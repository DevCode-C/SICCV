

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed May 26 22:54:00 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    38  0000                     
    39                           ; Version 2.20
    40                           ; Generated 12/02/2020 GMT
    41                           ; 
    42                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4550 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataBANK0
    75  001690                     __pidataBANK0:
    76                           	callstack 0
    77                           
    78                           ;initializer for _decimal
    79  001690  0A3D               	dw	2621
    80  001692  408F               	dw	16527
    81                           
    82                           ;initializer for _entero
    83  001694  0014               	dw	20
    84  0000                     _ADRES	set	4035
    85  0000                     _PORTBbits	set	3969
    86  0000                     _PORTB	set	3969
    87  0000                     _TRISD	set	3989
    88  0000                     _LATDbits	set	3980
    89  0000                     _ADCON0bits	set	4034
    90  0000                     _ADCON2bits	set	4032
    91  0000                     _ADCON1bits	set	4033
    92  0000                     _GO_nDONE	set	32273
    93                           
    94                           	psect	smallconst
    95  000800                     __psmallconst:
    96                           	callstack 0
    97  000800  00                 	db	0
    98  000801                     STR_2:
    99  000801  2A                 	db	42
   100  000802  2A                 	db	42
   101  000803  2A                 	db	42
   102  000804  2A                 	db	42
   103  000805  2A                 	db	42
   104  000806  2A                 	db	42
   105  000807  58                 	db	88	;'X'
   106  000808  43                 	db	67	;'C'
   107  000809  38                 	db	56	;'8'
   108  00080A  2A                 	db	42
   109  00080B  2A                 	db	42
   110  00080C  2A                 	db	42
   111  00080D  2A                 	db	42
   112  00080E  2A                 	db	42
   113  00080F  2A                 	db	42
   114  000810  00                 	db	0
   115  000811                     STR_1:
   116  000811  2A                 	db	42
   117  000812  2A                 	db	42
   118  000813  49                 	db	73	;'I'
   119  000814  44                 	db	68	;'D'
   120  000815  45                 	db	69	;'E'
   121  000816  20                 	db	32
   122  000817  4D                 	db	77	;'M'
   123  000818  50                 	db	80	;'P'
   124  000819  4C                 	db	76	;'L'
   125  00081A  41                 	db	65	;'A'
   126  00081B  42                 	db	66	;'B'
   127  00081C  20                 	db	32
   128  00081D  58                 	db	88	;'X'
   129  00081E  2A                 	db	42
   130  00081F  2A                 	db	42
   131  000820  00                 	db	0
   132  000821                     STR_3:
   133  000821  41                 	db	65	;'A'
   134  000822  44                 	db	68	;'D'
   135  000823  43                 	db	67	;'C'
   136  000824  31                 	db	49	;'1'
   137  000825  3A                 	db	58	;':'
   138  000826  25                 	db	37
   139  000827  64                 	db	100	;'d'
   140  000828  00                 	db	0
   141  000829                     STR_4:
   142  000829  41                 	db	65	;'A'
   143  00082A  44                 	db	68	;'D'
   144  00082B  43                 	db	67	;'C'
   145  00082C  32                 	db	50	;'2'
   146  00082D  3A                 	db	58	;':'
   147  00082E  25                 	db	37
   148  00082F  64                 	db	100	;'d'
   149  000830  00                 	db	0
   150  000831  00                 	db	0	; dummy byte at the end
   151  0000                     
   152                           ; #config settings
   153                           
   154                           	psect	cinit
   155  0015C2                     __pcinit:
   156                           	callstack 0
   157  0015C2                     start_initialization:
   158                           	callstack 0
   159  0015C2                     __initialization:
   160                           	callstack 0
   161                           
   162                           ; Initialize objects allocated to BANK0 (6 bytes)
   163                           ; load TBLPTR registers with __pidataBANK0
   164  0015C2  0E90               	movlw	low __pidataBANK0
   165  0015C4  6EF6               	movwf	tblptrl,c
   166  0015C6  0E16               	movlw	high __pidataBANK0
   167  0015C8  6EF7               	movwf	tblptrh,c
   168  0015CA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   169  0015CC  6EF8               	movwf	tblptru,c
   170  0015CE  EE00  F0A6         	lfsr	0,__pdataBANK0
   171  0015D2  EE10 F006          	lfsr	1,6
   172  0015D6                     copy_data0:
   173  0015D6  0009               	tblrd		*+
   174  0015D8  CFF5 FFEE          	movff	tablat,postinc0
   175  0015DC  50E5               	movf	postdec1,w,c
   176  0015DE  50E1               	movf	fsr1l,w,c
   177  0015E0  E1FA               	bnz	copy_data0
   178                           
   179                           ; Clear objects allocated to BANK0 (60 bytes)
   180  0015E2  EE00  F060         	lfsr	0,__pbssBANK0
   181  0015E6  0E3C               	movlw	60
   182  0015E8                     clear_0:
   183  0015E8  6AEE               	clrf	postinc0,c
   184  0015EA  06E8               	decf	wreg,f,c
   185  0015EC  E1FD               	bnz	clear_0
   186  0015EE                     end_of_initialization:
   187                           	callstack 0
   188  0015EE                     __end_of__initialization:
   189                           	callstack 0
   190  0015EE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   191  0015F0  6EF8               	movwf	tblptru,c
   192  0015F2  0100               	movlb	0
   193  0015F4  EFDA  F007         	goto	_main	;jump to C main() function
   194                           
   195                           	psect	bssBANK0
   196  000060                     __pbssBANK0:
   197                           	callstack 0
   198  000060                     _nout:
   199                           	callstack 0
   200  000060                     	ds	2
   201  000062                     _width:
   202                           	callstack 0
   203  000062                     	ds	2
   204  000064                     _prec:
   205                           	callstack 0
   206  000064                     	ds	2
   207  000066                     _flags:
   208                           	callstack 0
   209  000066                     	ds	2
   210  000068                     _dbuf:
   211                           	callstack 0
   212  000068                     	ds	32
   213  000088                     _buffer_lcd:
   214                           	callstack 0
   215  000088                     	ds	20
   216                           
   217                           	psect	dataBANK0
   218  0000A6                     __pdataBANK0:
   219                           	callstack 0
   220  0000A6                     _decimal:
   221                           	callstack 0
   222  0000A6                     	ds	4
   223  0000AA                     _entero:
   224                           	callstack 0
   225  0000AA                     	ds	2
   226                           
   227                           	psect	cstackBANK0
   228  00009C                     __pcstackBANK0:
   229                           	callstack 0
   230  00009C                     	ds	2
   231  00009E                     sprintf@ap:
   232                           	callstack 0
   233                           
   234                           ; 2 bytes @ 0x2
   235  00009E                     	ds	2
   236  0000A0                     sprintf@f:
   237                           	callstack 0
   238                           
   239                           ; 6 bytes @ 0x4
   240  0000A0                     	ds	6
   241                           
   242                           	psect	cstackCOMRAM
   243  000001                     __pcstackCOMRAM:
   244                           	callstack 0
   245  000001                     ??_adcInit:
   246  000001                     ?_strlen:
   247                           	callstack 0
   248  000001                     ?_adcGetValue:
   249                           	callstack 0
   250  000001                     ?___aodiv:
   251                           	callstack 0
   252  000001                     ?___aomod:
   253                           	callstack 0
   254  000001                     Lcd_Port@a:
   255                           	callstack 0
   256  000001                     fputc@c:
   257                           	callstack 0
   258  000001                     strlen@s:
   259                           	callstack 0
   260  000001                     ___aodiv@dividend:
   261                           	callstack 0
   262  000001                     ___aomod@dividend:
   263                           	callstack 0
   264                           
   265                           ; 8 bytes @ 0x0
   266  000001                     	ds	1
   267  000002                     ??_Lcd_Cmd:
   268  000002                     adcInit@ADC_PINs:
   269                           	callstack 0
   270  000002                     lcd_write_char@temp:
   271                           	callstack 0
   272                           
   273                           ; 1 bytes @ 0x1
   274  000002                     	ds	1
   275  000003                     ??_adcGetValue:
   276  000003                     Lcd_Cmd@a:
   277                           	callstack 0
   278  000003                     lcd_write_char@y:
   279                           	callstack 0
   280  000003                     fputc@fp:
   281                           	callstack 0
   282  000003                     strlen@a:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0x2
   286  000003                     	ds	1
   287  000004                     ??_lcd_init:
   288  000004                     adcGetValue@PinADC:
   289                           	callstack 0
   290  000004                     lcd_gotoxy@b:
   291                           	callstack 0
   292  000004                     lcd_write_char@a:
   293                           	callstack 0
   294                           
   295                           ; 1 bytes @ 0x3
   296  000004                     	ds	1
   297  000005                     ??_fputc:
   298  000005                     lcd_gotoxy@a:
   299                           	callstack 0
   300  000005                     lcd_putc@a:
   301                           	callstack 0
   302                           
   303                           ; 2 bytes @ 0x4
   304  000005                     	ds	1
   305  000006                     lcd_gotoxy@z:
   306                           	callstack 0
   307                           
   308                           ; 1 bytes @ 0x5
   309  000006                     	ds	1
   310  000007                     ??_lcd_putc:
   311  000007                     lcd_gotoxy@y:
   312                           	callstack 0
   313                           
   314                           ; 1 bytes @ 0x6
   315  000007                     	ds	1
   316  000008                     lcd_gotoxy@temp:
   317                           	callstack 0
   318                           
   319                           ; 1 bytes @ 0x7
   320  000008                     	ds	1
   321  000009                     lcd_putc@i:
   322                           	callstack 0
   323  000009                     ___aodiv@divisor:
   324                           	callstack 0
   325  000009                     ___aomod@divisor:
   326                           	callstack 0
   327                           
   328                           ; 8 bytes @ 0x8
   329  000009                     	ds	1
   330  00000A                     fputs@s:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x9
   334  00000A                     	ds	2
   335  00000C                     fputs@fp:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0xB
   339  00000C                     	ds	2
   340  00000E                     fputs@c:
   341                           	callstack 0
   342                           
   343                           ; 1 bytes @ 0xD
   344  00000E                     	ds	1
   345  00000F                     fputs@i:
   346                           	callstack 0
   347                           
   348                           ; 2 bytes @ 0xE
   349  00000F                     	ds	2
   350  000011                     ?_pad:
   351                           	callstack 0
   352  000011                     ___aodiv@counter:
   353                           	callstack 0
   354  000011                     ___aomod@counter:
   355                           	callstack 0
   356  000011                     pad@fp:
   357                           	callstack 0
   358                           
   359                           ; 2 bytes @ 0x10
   360  000011                     	ds	1
   361  000012                     ___aodiv@sign:
   362                           	callstack 0
   363  000012                     ___aomod@sign:
   364                           	callstack 0
   365                           
   366                           ; 1 bytes @ 0x11
   367  000012                     	ds	1
   368  000013                     ?_abs:
   369                           	callstack 0
   370  000013                     pad@buf:
   371                           	callstack 0
   372  000013                     abs@a:
   373                           	callstack 0
   374  000013                     ___aodiv@quotient:
   375                           	callstack 0
   376                           
   377                           ; 8 bytes @ 0x12
   378  000013                     	ds	2
   379  000015                     ??_abs:
   380  000015                     pad@p:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x14
   384  000015                     	ds	2
   385  000017                     ??_pad:
   386                           
   387                           ; 1 bytes @ 0x16
   388  000017                     	ds	1
   389  000018                     pad@i:
   390                           	callstack 0
   391                           
   392                           ; 2 bytes @ 0x17
   393  000018                     	ds	2
   394  00001A                     pad@w:
   395                           	callstack 0
   396                           
   397                           ; 2 bytes @ 0x19
   398  00001A                     	ds	2
   399  00001C                     ?_dtoa:
   400                           	callstack 0
   401  00001C                     dtoa@fp:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x1B
   405  00001C                     	ds	2
   406  00001E                     dtoa@d:
   407                           	callstack 0
   408                           
   409                           ; 8 bytes @ 0x1D
   410  00001E                     	ds	8
   411  000026                     ??_dtoa:
   412                           
   413                           ; 1 bytes @ 0x25
   414  000026                     	ds	8
   415  00002E                     _dtoa$849:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x2D
   419  00002E                     	ds	2
   420  000030                     dtoa@p:
   421                           	callstack 0
   422                           
   423                           ; 2 bytes @ 0x2F
   424  000030                     	ds	2
   425  000032                     dtoa@w:
   426                           	callstack 0
   427                           
   428                           ; 2 bytes @ 0x31
   429  000032                     	ds	2
   430  000034                     dtoa@s:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0x33
   434  000034                     	ds	2
   435  000036                     dtoa@n:
   436                           	callstack 0
   437                           
   438                           ; 8 bytes @ 0x35
   439  000036                     	ds	8
   440  00003E                     dtoa@i:
   441                           	callstack 0
   442                           
   443                           ; 2 bytes @ 0x3D
   444  00003E                     	ds	2
   445  000040                     ?_vfpfcnvrt:
   446                           	callstack 0
   447  000040                     vfpfcnvrt@fp:
   448                           	callstack 0
   449                           
   450                           ; 2 bytes @ 0x3F
   451  000040                     	ds	2
   452  000042                     vfpfcnvrt@fmt:
   453                           	callstack 0
   454                           
   455                           ; 2 bytes @ 0x41
   456  000042                     	ds	2
   457  000044                     vfpfcnvrt@ap:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x43
   461  000044                     	ds	2
   462  000046                     ??_vfpfcnvrt:
   463                           
   464                           ; 1 bytes @ 0x45
   465  000046                     	ds	2
   466  000048                     vfpfcnvrt@ll:
   467                           	callstack 0
   468                           
   469                           ; 8 bytes @ 0x47
   470  000048                     	ds	8
   471  000050                     ?_vfprintf:
   472                           	callstack 0
   473  000050                     vfprintf@fp:
   474                           	callstack 0
   475                           
   476                           ; 2 bytes @ 0x4F
   477  000050                     	ds	2
   478  000052                     vfprintf@fmt:
   479                           	callstack 0
   480                           
   481                           ; 2 bytes @ 0x51
   482  000052                     	ds	2
   483  000054                     vfprintf@ap:
   484                           	callstack 0
   485                           
   486                           ; 2 bytes @ 0x53
   487  000054                     	ds	2
   488  000056                     vfprintf@cfmt:
   489                           	callstack 0
   490                           
   491                           ; 2 bytes @ 0x55
   492  000056                     	ds	2
   493  000058                     ?_sprintf:
   494                           	callstack 0
   495  000058                     sprintf@s:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x57
   499  000058                     	ds	2
   500  00005A                     sprintf@fmt:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x59
   504  00005A                     	ds	4
   505  00005E                     ??_main:
   506                           
   507                           ; 1 bytes @ 0x5D
   508  00005E                     	ds	2
   509                           
   510 ;;
   511 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   512 ;;
   513 ;; *************** function _main *****************
   514 ;; Defined at:
   515 ;;		line 23 in file "main.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;		None
   518 ;; Auto vars:     Size  Location     Type
   519 ;;		None
   520 ;; Return value:  Size  Location     Type
   521 ;;                  1    wreg      void 
   522 ;; Registers used:
   523 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   529 ;;      Params:         0       0       0       0       0       0       0       0       0
   530 ;;      Locals:         0       0       0       0       0       0       0       0       0
   531 ;;      Temps:          2       0       0       0       0       0       0       0       0
   532 ;;      Totals:         2       0       0       0       0       0       0       0       0
   533 ;;Total ram usage:        2 bytes
   534 ;; Hardware stack levels required when called:    8
   535 ;; This function calls:
   536 ;;		_adcGetValue
   537 ;;		_adcInit
   538 ;;		_lcd_clear
   539 ;;		_lcd_gotoxy
   540 ;;		_lcd_init
   541 ;;		_lcd_putc
   542 ;;		_sprintf
   543 ;; This function is called by:
   544 ;;		Startup code after reset
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548                           	psect	text0
   549  000FB4                     __ptext0:
   550                           	callstack 0
   551  000FB4                     _main:
   552                           	callstack 23
   553  000FB4                     
   554                           ;main.c: 25:     TRISD=0x00;
   555  000FB4  0E00               	movlw	0
   556  000FB6  6E95               	movwf	149,c	;volatile
   557  000FB8                     
   558                           ;main.c: 26:     lcd_init();
   559  000FB8  EC69  F009         	call	_lcd_init	;wreg free
   560  000FBC                     
   561                           ;main.c: 27:     adcInit(2);
   562  000FBC  0E02               	movlw	2
   563  000FBE  EC5D  F00A         	call	_adcInit
   564  000FC2                     
   565                           ;main.c: 28:     lcd_clear();
   566  000FC2  EC41  F00B         	call	_lcd_clear	;wreg free
   567  000FC6                     
   568                           ;main.c: 29:     lcd_gotoxy(1,1);
   569  000FC6  0E01               	movlw	1
   570  000FC8  6E04               	movwf	lcd_gotoxy@b^0,c
   571  000FCA  0E01               	movlw	1
   572  000FCC  ECA2  F009         	call	_lcd_gotoxy
   573  000FD0                     
   574                           ;main.c: 30:     lcd_putc("**IDE MPLAB X**");
   575  000FD0  0E11               	movlw	low STR_1
   576  000FD2  6E05               	movwf	lcd_putc@a^0,c
   577  000FD4  0E08               	movlw	high STR_1
   578  000FD6  6E06               	movwf	(lcd_putc@a+1)^0,c
   579  000FD8  EC2A  F009         	call	_lcd_putc	;wreg free
   580  000FDC                     
   581                           ;main.c: 31:     lcd_gotoxy(2,1);
   582  000FDC  0E01               	movlw	1
   583  000FDE  6E04               	movwf	lcd_gotoxy@b^0,c
   584  000FE0  0E02               	movlw	2
   585  000FE2  ECA2  F009         	call	_lcd_gotoxy
   586  000FE6                     
   587                           ;main.c: 32:     lcd_putc("******XC8******");
   588  000FE6  0E01               	movlw	low STR_2
   589  000FE8  6E05               	movwf	lcd_putc@a^0,c
   590  000FEA  0E08               	movlw	high STR_2
   591  000FEC  6E06               	movwf	(lcd_putc@a+1)^0,c
   592  000FEE  EC2A  F009         	call	_lcd_putc	;wreg free
   593  000FF2                     
   594                           ;main.c: 33:     _delay((unsigned long)((1000)*(12000000/4000.0)));
   595  000FF2  0E10               	movlw	16
   596  000FF4  6E5F               	movwf	(??_main+1)^0,c
   597  000FF6  0E39               	movlw	57
   598  000FF8  6E5E               	movwf	??_main^0,c
   599  000FFA  0E0E               	movlw	14
   600  000FFC                     u1137:
   601  000FFC  2EE8               	decfsz	wreg,f,c
   602  000FFE  D7FE               	bra	u1137
   603  001000  2E5E               	decfsz	??_main^0,f,c
   604  001002  D7FC               	bra	u1137
   605  001004  2E5F               	decfsz	(??_main+1)^0,f,c
   606  001006  D7FA               	bra	u1137
   607  001008                     
   608                           ;main.c: 34:     lcd_clear();
   609  001008  EC41  F00B         	call	_lcd_clear	;wreg free
   610  00100C                     l1768:
   611                           
   612                           ;main.c: 36:     {;main.c: 37:         entero = adcGetValue(0);
   613  00100C  0E00               	movlw	0
   614  00100E  ECC3  F00A         	call	_adcGetValue
   615  001012  C001  F0AA         	movff	?_adcGetValue,_entero
   616  001016  C002  F0AB         	movff	?_adcGetValue+1,_entero+1
   617  00101A                     
   618                           ;main.c: 38:         sprintf(buffer_lcd,"ADC1:%d",entero);
   619  00101A  0E88               	movlw	low _buffer_lcd
   620  00101C  6E58               	movwf	sprintf@s^0,c
   621  00101E  0E00               	movlw	high _buffer_lcd
   622  001020  6E59               	movwf	(sprintf@s+1)^0,c
   623  001022  0E21               	movlw	low STR_3
   624  001024  6E5A               	movwf	sprintf@fmt^0,c
   625  001026  0E08               	movlw	high STR_3
   626  001028  6E5B               	movwf	(sprintf@fmt+1)^0,c
   627  00102A  C0AA  F05C         	movff	_entero,?_sprintf+4
   628  00102E  C0AB  F05D         	movff	_entero+1,?_sprintf+5
   629  001032  EC34  F00A         	call	_sprintf	;wreg free
   630  001036                     
   631                           ;main.c: 39:         lcd_gotoxy(1,1);
   632  001036  0E01               	movlw	1
   633  001038  6E04               	movwf	lcd_gotoxy@b^0,c
   634  00103A  0E01               	movlw	1
   635  00103C  ECA2  F009         	call	_lcd_gotoxy
   636  001040                     
   637                           ;main.c: 40:         lcd_putc(buffer_lcd);
   638  001040  0E88               	movlw	low _buffer_lcd
   639  001042  6E05               	movwf	lcd_putc@a^0,c
   640  001044  0E00               	movlw	high _buffer_lcd
   641  001046  6E06               	movwf	(lcd_putc@a+1)^0,c
   642  001048  EC2A  F009         	call	_lcd_putc	;wreg free
   643  00104C                     
   644                           ;main.c: 41:         _delay((unsigned long)((100)*(12000000/4000.0)));
   645  00104C  0E02               	movlw	2
   646  00104E  6E5F               	movwf	(??_main+1)^0,c
   647  001050  0E86               	movlw	134
   648  001052  6E5E               	movwf	??_main^0,c
   649  001054  0E99               	movlw	153
   650  001056                     u1147:
   651  001056  2EE8               	decfsz	wreg,f,c
   652  001058  D7FE               	bra	u1147
   653  00105A  2E5E               	decfsz	??_main^0,f,c
   654  00105C  D7FC               	bra	u1147
   655  00105E  2E5F               	decfsz	(??_main+1)^0,f,c
   656  001060  D7FA               	bra	u1147
   657  001062  F000               	nop	
   658  001064                     
   659                           ;main.c: 42:         entero = adcGetValue(1);
   660  001064  0E01               	movlw	1
   661  001066  ECC3  F00A         	call	_adcGetValue
   662  00106A  C001  F0AA         	movff	?_adcGetValue,_entero
   663  00106E  C002  F0AB         	movff	?_adcGetValue+1,_entero+1
   664  001072                     
   665                           ;main.c: 43:         sprintf(buffer_lcd,"ADC2:%d",entero);
   666  001072  0E88               	movlw	low _buffer_lcd
   667  001074  6E58               	movwf	sprintf@s^0,c
   668  001076  0E00               	movlw	high _buffer_lcd
   669  001078  6E59               	movwf	(sprintf@s+1)^0,c
   670  00107A  0E29               	movlw	low STR_4
   671  00107C  6E5A               	movwf	sprintf@fmt^0,c
   672  00107E  0E08               	movlw	high STR_4
   673  001080  6E5B               	movwf	(sprintf@fmt+1)^0,c
   674  001082  C0AA  F05C         	movff	_entero,?_sprintf+4
   675  001086  C0AB  F05D         	movff	_entero+1,?_sprintf+5
   676  00108A  EC34  F00A         	call	_sprintf	;wreg free
   677  00108E                     
   678                           ;main.c: 44:         lcd_gotoxy(2,1);
   679  00108E  0E01               	movlw	1
   680  001090  6E04               	movwf	lcd_gotoxy@b^0,c
   681  001092  0E02               	movlw	2
   682  001094  ECA2  F009         	call	_lcd_gotoxy
   683  001098                     
   684                           ;main.c: 45:         lcd_putc(buffer_lcd);
   685  001098  0E88               	movlw	low _buffer_lcd
   686  00109A  6E05               	movwf	lcd_putc@a^0,c
   687  00109C  0E00               	movlw	high _buffer_lcd
   688  00109E  6E06               	movwf	(lcd_putc@a+1)^0,c
   689  0010A0  EC2A  F009         	call	_lcd_putc	;wreg free
   690  0010A4                     
   691                           ;main.c: 46:         _delay((unsigned long)((100)*(12000000/4000.0)));
   692  0010A4  0E02               	movlw	2
   693  0010A6  6E5F               	movwf	(??_main+1)^0,c
   694  0010A8  0E86               	movlw	134
   695  0010AA  6E5E               	movwf	??_main^0,c
   696  0010AC  0E99               	movlw	153
   697  0010AE                     u1157:
   698  0010AE  2EE8               	decfsz	wreg,f,c
   699  0010B0  D7FE               	bra	u1157
   700  0010B2  2E5E               	decfsz	??_main^0,f,c
   701  0010B4  D7FC               	bra	u1157
   702  0010B6  2E5F               	decfsz	(??_main+1)^0,f,c
   703  0010B8  D7FA               	bra	u1157
   704  0010BA  F000               	nop	
   705  0010BC  EF06  F008         	goto	l1768
   706  0010C0  EF00  F000         	goto	start
   707  0010C4                     __end_of_main:
   708                           	callstack 0
   709                           
   710 ;; *************** function _sprintf *****************
   711 ;; Defined at:
   712 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_sprintf.c"
   713 ;; Parameters:    Size  Location     Type
   714 ;;  s               2   87[COMRAM] PTR unsigned char 
   715 ;;		 -> buffer_lcd(20), 
   716 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   717 ;;		 -> STR_4(8), STR_3(8), 
   718 ;; Auto vars:     Size  Location     Type
   719 ;;  f               6    4[BANK0 ] struct _IO_FILE
   720 ;;  ap              2    2[BANK0 ] PTR void [1]
   721 ;;		 -> ?_sprintf(2), 
   722 ;;  ret             2    0        int 
   723 ;; Return value:  Size  Location     Type
   724 ;;                  2   87[COMRAM] int 
   725 ;; Registers used:
   726 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   732 ;;      Params:         6       0       0       0       0       0       0       0       0
   733 ;;      Locals:         0      10       0       0       0       0       0       0       0
   734 ;;      Temps:          0       0       0       0       0       0       0       0       0
   735 ;;      Totals:         6      10       0       0       0       0       0       0       0
   736 ;;Total ram usage:       16 bytes
   737 ;; Hardware stack levels used:    1
   738 ;; Hardware stack levels required when called:    7
   739 ;; This function calls:
   740 ;;		_vfprintf
   741 ;; This function is called by:
   742 ;;		_main
   743 ;; This function uses a non-reentrant model
   744 ;;
   745                           
   746                           	psect	text1
   747  001468                     __ptext1:
   748                           	callstack 0
   749  001468                     _sprintf:
   750                           	callstack 23
   751  001468  0E5C               	movlw	low (?_sprintf+4)
   752  00146A  0100               	movlb	0	; () banked
   753  00146C  6F9E               	movwf	sprintf@ap& (0+255),b
   754  00146E  0E00               	movlw	high (?_sprintf+4)
   755  001470  6F9F               	movwf	(sprintf@ap+1)& (0+255),b
   756  001472  C058  F0A0         	movff	sprintf@s,sprintf@f
   757  001476  C059  F0A1         	movff	sprintf@s+1,sprintf@f+1
   758  00147A                     
   759                           ; BSR set to: 0
   760  00147A  0E00               	movlw	0
   761  00147C  6FA3               	movwf	(sprintf@f+3)& (0+255),b
   762  00147E  0E00               	movlw	0
   763  001480  6FA2               	movwf	(sprintf@f+2)& (0+255),b
   764  001482                     
   765                           ; BSR set to: 0
   766  001482  0E00               	movlw	0
   767  001484  6FA5               	movwf	(sprintf@f+5)& (0+255),b
   768  001486  0E00               	movlw	0
   769  001488  6FA4               	movwf	(sprintf@f+4)& (0+255),b
   770  00148A                     
   771                           ; BSR set to: 0
   772  00148A  0EA0               	movlw	low sprintf@f
   773  00148C  6E50               	movwf	vfprintf@fp^0,c
   774  00148E  0E00               	movlw	high sprintf@f
   775  001490  6E51               	movwf	(vfprintf@fp+1)^0,c
   776  001492  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
   777  001496  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   778  00149A  0E9E               	movlw	low sprintf@ap
   779  00149C  6E54               	movwf	vfprintf@ap^0,c
   780  00149E  0E00               	movlw	high sprintf@ap
   781  0014A0  6E55               	movwf	(vfprintf@ap+1)^0,c
   782  0014A2  ECD5  F009         	call	_vfprintf	;wreg free
   783  0014A6  0100               	movlb	0	; () banked
   784  0014A8  51A2               	movf	(sprintf@f+2)& (0+255),w,b
   785  0014AA  2458               	addwf	sprintf@s^0,w,c
   786  0014AC  6ED9               	movwf	fsr2l,c
   787  0014AE  51A3               	movf	(sprintf@f+3)& (0+255),w,b
   788  0014B0  2059               	addwfc	(sprintf@s+1)^0,w,c
   789  0014B2  6EDA               	movwf	fsr2h,c
   790  0014B4  0E00               	movlw	0
   791  0014B6  6EDF               	movwf	indf2,c
   792  0014B8                     
   793                           ; BSR set to: 0
   794  0014B8  0012               	return		;funcret
   795  0014BA                     __end_of_sprintf:
   796                           	callstack 0
   797                           
   798 ;; *************** function _vfprintf *****************
   799 ;; Defined at:
   800 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
   801 ;; Parameters:    Size  Location     Type
   802 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   803 ;;		 -> sprintf@f(6), 
   804 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   805 ;;		 -> STR_4(8), STR_3(8), 
   806 ;;  ap              2   83[COMRAM] PTR PTR void 
   807 ;;		 -> sprintf@ap(2), 
   808 ;; Auto vars:     Size  Location     Type
   809 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   810 ;;		 -> STR_4(8), STR_3(8), 
   811 ;; Return value:  Size  Location     Type
   812 ;;                  2   79[COMRAM] int 
   813 ;; Registers used:
   814 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   820 ;;      Params:         6       0       0       0       0       0       0       0       0
   821 ;;      Locals:         2       0       0       0       0       0       0       0       0
   822 ;;      Temps:          0       0       0       0       0       0       0       0       0
   823 ;;      Totals:         8       0       0       0       0       0       0       0       0
   824 ;;Total ram usage:        8 bytes
   825 ;; Hardware stack levels used:    1
   826 ;; Hardware stack levels required when called:    6
   827 ;; This function calls:
   828 ;;		_vfpfcnvrt
   829 ;; This function is called by:
   830 ;;		_sprintf
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834                           	psect	text2
   835  0013AA                     __ptext2:
   836                           	callstack 0
   837  0013AA                     _vfprintf:
   838                           	callstack 23
   839  0013AA                     
   840                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.31\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   841  0013AA  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   842  0013AE  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   843  0013B2                     
   844                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   845  0013B2  0E00               	movlw	0
   846  0013B4  0100               	movlb	0	; () banked
   847  0013B6  6F61               	movwf	(_nout+1)& (0+255),b
   848  0013B8  0E00               	movlw	0
   849  0013BA  6F60               	movwf	_nout& (0+255),b
   850                           
   851                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   852  0013BC  EFF3  F009         	goto	l1654
   853  0013C0                     l1652:
   854                           
   855                           ; BSR set to: 0
   856                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   857  0013C0  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   858  0013C4  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   859  0013C8  0E56               	movlw	low vfprintf@cfmt
   860  0013CA  6E42               	movwf	vfpfcnvrt@fmt^0,c
   861  0013CC  0E00               	movlw	high vfprintf@cfmt
   862  0013CE  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
   863  0013D0  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   864  0013D4  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   865  0013D8  EC8A  F005         	call	_vfpfcnvrt	;wreg free
   866  0013DC  5040               	movf	?_vfpfcnvrt^0,w,c
   867  0013DE  0100               	movlb	0	; () banked
   868  0013E0  2760               	addwf	_nout& (0+255),f,b
   869  0013E2  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
   870  0013E4  2361               	addwfc	(_nout+1)& (0+255),f,b
   871  0013E6                     l1654:
   872                           
   873                           ; BSR set to: 0
   874                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   875  0013E6  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   876  0013EA  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   877  0013EE                     	if	0	;tblptru may be non-zero
   878  0013EE                     	endif
   879  0013EE                     	if	0	;tblptru may be non-zero
   880  0013EE                     	endif
   881  0013EE  0008               	tblrd		*
   882  0013F0  50F5               	movf	tablat,w,c
   883  0013F2  0900               	iorlw	0
   884  0013F4  A4D8               	btfss	status,2,c
   885  0013F6  EFFF  F009         	goto	u1051
   886  0013FA  EF01  F00A         	goto	u1050
   887  0013FE                     u1051:
   888  0013FE  EFE0  F009         	goto	l1652
   889  001402                     u1050:
   890  001402                     
   891                           ; BSR set to: 0
   892                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   893  001402  C060  F050         	movff	_nout,?_vfprintf
   894  001406  C061  F051         	movff	_nout+1,?_vfprintf+1
   895  00140A                     
   896                           ; BSR set to: 0
   897  00140A  0012               	return		;funcret
   898  00140C                     __end_of_vfprintf:
   899                           	callstack 0
   900                           
   901 ;; *************** function _vfpfcnvrt *****************
   902 ;; Defined at:
   903 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
   904 ;; Parameters:    Size  Location     Type
   905 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   906 ;;		 -> sprintf@f(6), 
   907 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   908 ;;		 -> vfprintf@cfmt(2), 
   909 ;;  ap              2   67[COMRAM] PTR PTR void 
   910 ;;		 -> sprintf@ap(2), 
   911 ;; Auto vars:     Size  Location     Type
   912 ;;  ll              8   71[COMRAM] long long 
   913 ;;  llu             8    0        unsigned long long 
   914 ;;  f               4    0        unsigned long long 
   915 ;;  vp              3    0        PTR void 
   916 ;;  ct              3    0        unsigned char [3]
   917 ;;  cp              3    0        PTR unsigned char 
   918 ;;  i               2    0        int 
   919 ;;  done            2    0        int 
   920 ;;  c               1    0        unsigned char 
   921 ;; Return value:  Size  Location     Type
   922 ;;                  2   63[COMRAM] int 
   923 ;; Registers used:
   924 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   930 ;;      Params:         6       0       0       0       0       0       0       0       0
   931 ;;      Locals:         8       0       0       0       0       0       0       0       0
   932 ;;      Temps:          2       0       0       0       0       0       0       0       0
   933 ;;      Totals:        16       0       0       0       0       0       0       0       0
   934 ;;Total ram usage:       16 bytes
   935 ;; Hardware stack levels used:    1
   936 ;; Hardware stack levels required when called:    5
   937 ;; This function calls:
   938 ;;		_dtoa
   939 ;;		_fputc
   940 ;; This function is called by:
   941 ;;		_vfprintf
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           	psect	text3
   946  000B14                     __ptext3:
   947                           	callstack 0
   948  000B14                     _vfpfcnvrt:
   949                           	callstack 23
   950  000B14                     
   951                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.31\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.31\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.31\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          1\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   952  000B14  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   953  000B18  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   954  000B1C  CFDE FFF6          	movff	postinc2,tblptrl
   955  000B20  CFDD FFF7          	movff	postdec2,tblptrh
   956  000B24                     	if	0	;tblptru may be non-zero
   957  000B24                     	endif
   958  000B24                     	if	0	;tblptru may be non-zero
   959  000B24                     	endif
   960  000B24  0008               	tblrd		*
   961  000B26  50F5               	movf	tablat,w,c
   962  000B28  0A25               	xorlw	37
   963  000B2A  A4D8               	btfss	status,2,c
   964  000B2C  EF9A  F005         	goto	u1011
   965  000B30  EF9C  F005         	goto	u1010
   966  000B34                     u1011:
   967  000B34  EF48  F006         	goto	l1610
   968  000B38                     u1010:
   969  000B38                     
   970                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   971  000B38  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   972  000B3C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   973  000B40  2ADE               	incf	postinc2,f,c
   974  000B42  0E00               	movlw	0
   975  000B44  22DD               	addwfc	postdec2,f,c
   976  000B46                     
   977                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   978  000B46  0E00               	movlw	0
   979  000B48  0100               	movlb	0	; () banked
   980  000B4A  6F63               	movwf	(_width+1)& (0+255),b
   981  000B4C  0E00               	movlw	0
   982  000B4E  6F62               	movwf	_width& (0+255),b
   983  000B50  C062  F066         	movff	_width,_flags
   984  000B54  C063  F067         	movff	_width+1,_flags+1
   985  000B58                     
   986                           ; BSR set to: 0
   987                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   988  000B58  6964               	setf	_prec& (0+255),b
   989  000B5A  6965               	setf	(_prec+1)& (0+255),b
   990  000B5C                     
   991                           ; BSR set to: 0
   992                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   993  000B5C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   994  000B60  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   995  000B64  CFDE FFF6          	movff	postinc2,tblptrl
   996  000B68  CFDD FFF7          	movff	postdec2,tblptrh
   997  000B6C                     	if	0	;tblptru may be non-zero
   998  000B6C                     	endif
   999  000B6C                     	if	0	;tblptru may be non-zero
  1000  000B6C                     	endif
  1001  000B6C  0008               	tblrd		*
  1002  000B6E  50F5               	movf	tablat,w,c
  1003  000B70  0A64               	xorlw	100
  1004  000B72  B4D8               	btfsc	status,2,c
  1005  000B74  EFBE  F005         	goto	u1021
  1006  000B78  EFC0  F005         	goto	u1020
  1007  000B7C                     u1021:
  1008  000B7C  EFD2  F005         	goto	l1588
  1009  000B80                     u1020:
  1010  000B80                     
  1011                           ; BSR set to: 0
  1012  000B80  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1013  000B84  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1014  000B88  CFDE FFF6          	movff	postinc2,tblptrl
  1015  000B8C  CFDD FFF7          	movff	postdec2,tblptrh
  1016  000B90                     	if	0	;tblptru may be non-zero
  1017  000B90                     	endif
  1018  000B90                     	if	0	;tblptru may be non-zero
  1019  000B90                     	endif
  1020  000B90  0008               	tblrd		*
  1021  000B92  50F5               	movf	tablat,w,c
  1022  000B94  0A69               	xorlw	105
  1023  000B96  A4D8               	btfss	status,2,c
  1024  000B98  EFD0  F005         	goto	u1031
  1025  000B9C  EFD2  F005         	goto	u1030
  1026  000BA0                     u1031:
  1027  000BA0  EF12  F006         	goto	l1594
  1028  000BA4                     u1030:
  1029  000BA4                     l1588:
  1030                           
  1031                           ; BSR set to: 0
  1032                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  1033  000BA4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1034  000BA8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1035  000BAC  2ADE               	incf	postinc2,f,c
  1036  000BAE  0E00               	movlw	0
  1037  000BB0  22DD               	addwfc	postdec2,f,c
  1038                           
  1039                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1040  000BB2  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1041  000BB6  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1042  000BBA  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1043  000BBE  0E02               	movlw	2
  1044  000BC0  26DE               	addwf	postinc2,f,c
  1045  000BC2  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1046  000BC6  0E00               	movlw	0
  1047  000BC8  22DD               	addwfc	postdec2,f,c
  1048  000BCA  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1049  000BCE  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1050  000BD2  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  1051  000BD6  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  1052  000BDA  0E00               	movlw	0
  1053  000BDC  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1054  000BDE  0EFF               	movlw	-1
  1055  000BE0  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
  1056  000BE2  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  1057  000BE4  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  1058  000BE6  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  1059  000BE8  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  1060  000BEA  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  1061  000BEC                     
  1062                           ; BSR set to: 0
  1063                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  1064  000BEC  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1065  000BF0  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1066  000BF4  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1067  000BF8  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1068  000BFC  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1069  000C00  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1070  000C04  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1071  000C08  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1072  000C0C  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1073  000C10  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1074  000C14  EC19  F004         	call	_dtoa	;wreg free
  1075  000C18  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1076  000C1C  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1077  000C20  EF63  F006         	goto	l863
  1078  000C24                     l1594:
  1079                           
  1080                           ; BSR set to: 0
  1081                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1082  000C24  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1083  000C28  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1084  000C2C  CFDE FFF6          	movff	postinc2,tblptrl
  1085  000C30  CFDD FFF7          	movff	postdec2,tblptrh
  1086  000C34                     	if	0	;tblptru may be non-zero
  1087  000C34                     	endif
  1088  000C34                     	if	0	;tblptru may be non-zero
  1089  000C34                     	endif
  1090  000C34  0008               	tblrd		*
  1091  000C36  50F5               	movf	tablat,w,c
  1092  000C38  0A25               	xorlw	37
  1093  000C3A  A4D8               	btfss	status,2,c
  1094  000C3C  EF22  F006         	goto	u1041
  1095  000C40  EF24  F006         	goto	u1040
  1096  000C44                     u1041:
  1097  000C44  EF3B  F006         	goto	l1604
  1098  000C48                     u1040:
  1099  000C48                     
  1100                           ; BSR set to: 0
  1101                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1102  000C48  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1103  000C4C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1104  000C50  2ADE               	incf	postinc2,f,c
  1105  000C52  0E00               	movlw	0
  1106  000C54  22DD               	addwfc	postdec2,f,c
  1107  000C56                     
  1108                           ; BSR set to: 0
  1109                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1110  000C56  0E00               	movlw	0
  1111  000C58  6E02               	movwf	(fputc@c+1)^0,c
  1112  000C5A  0E25               	movlw	37
  1113  000C5C  6E01               	movwf	fputc@c^0,c
  1114  000C5E  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1115  000C62  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1116  000C66  EC62  F008         	call	_fputc	;wreg free
  1117  000C6A                     l1600:
  1118                           
  1119                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1120  000C6A  0E00               	movlw	0
  1121  000C6C  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1122  000C6E  0E01               	movlw	1
  1123  000C70  6E40               	movwf	?_vfpfcnvrt^0,c
  1124  000C72  EF63  F006         	goto	l863
  1125  000C76                     l1604:
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1129  000C76  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1130  000C7A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1131  000C7E  2ADE               	incf	postinc2,f,c
  1132  000C80  0E00               	movlw	0
  1133  000C82  22DD               	addwfc	postdec2,f,c
  1134  000C84                     
  1135                           ; BSR set to: 0
  1136                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1137  000C84  0E00               	movlw	0
  1138  000C86  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1139  000C88  0E00               	movlw	0
  1140  000C8A  6E40               	movwf	?_vfpfcnvrt^0,c
  1141  000C8C  EF63  F006         	goto	l863
  1142  000C90                     l1610:
  1143                           
  1144                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1145  000C90  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1146  000C94  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1147  000C98  CFDE FFF6          	movff	postinc2,tblptrl
  1148  000C9C  CFDD FFF7          	movff	postdec2,tblptrh
  1149  000CA0                     	if	0	;tblptru may be non-zero
  1150  000CA0                     	endif
  1151  000CA0                     	if	0	;tblptru may be non-zero
  1152  000CA0                     	endif
  1153  000CA0  0008               	tblrd		*
  1154  000CA2  50F5               	movf	tablat,w,c
  1155  000CA4  6E01               	movwf	fputc@c^0,c
  1156  000CA6  6A02               	clrf	(fputc@c+1)^0,c
  1157  000CA8  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1158  000CAC  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1159  000CB0  EC62  F008         	call	_fputc	;wreg free
  1160  000CB4                     
  1161                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1162  000CB4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1163  000CB8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1164  000CBC  2ADE               	incf	postinc2,f,c
  1165  000CBE  0E00               	movlw	0
  1166  000CC0  22DD               	addwfc	postdec2,f,c
  1167  000CC2  EF35  F006         	goto	l1600
  1168  000CC6                     l863:
  1169  000CC6  0012               	return		;funcret
  1170  000CC8                     __end_of_vfpfcnvrt:
  1171                           	callstack 0
  1172                           
  1173 ;; *************** function _dtoa *****************
  1174 ;; Defined at:
  1175 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1178 ;;		 -> sprintf@f(6), 
  1179 ;;  d               8   29[COMRAM] long long 
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;  n               8   53[COMRAM] long long 
  1182 ;;  i               2   61[COMRAM] int 
  1183 ;;  s               2   51[COMRAM] int 
  1184 ;;  w               2   49[COMRAM] int 
  1185 ;;  p               2   47[COMRAM] int 
  1186 ;; Return value:  Size  Location     Type
  1187 ;;                  2   27[COMRAM] int 
  1188 ;; Registers used:
  1189 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1190 ;; Tracked objects:
  1191 ;;		On entry : 0/0
  1192 ;;		On exit  : 0/0
  1193 ;;		Unchanged: 0/0
  1194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1195 ;;      Params:        10       0       0       0       0       0       0       0       0
  1196 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1197 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1198 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1199 ;;Total ram usage:       36 bytes
  1200 ;; Hardware stack levels used:    1
  1201 ;; Hardware stack levels required when called:    4
  1202 ;; This function calls:
  1203 ;;		___aodiv
  1204 ;;		___aomod
  1205 ;;		_abs
  1206 ;;		_pad
  1207 ;; This function is called by:
  1208 ;;		_vfpfcnvrt
  1209 ;; This function uses a non-reentrant model
  1210 ;;
  1211                           
  1212                           	psect	text4
  1213  000832                     __ptext4:
  1214                           	callstack 0
  1215  000832                     _dtoa:
  1216                           	callstack 23
  1217  000832                     
  1218                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  1219  000832  C01E  F036         	movff	dtoa@d,dtoa@n
  1220  000836  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1221  00083A  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1222  00083E  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1223  000842  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1224  000846  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1225  00084A  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1226  00084E  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1227  000852                     
  1228                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  1229  000852  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1230  000854  EF2E  F004         	goto	u821
  1231  000858  EF31  F004         	goto	u820
  1232  00085C                     u821:
  1233  00085C  0E01               	movlw	1
  1234  00085E  EF32  F004         	goto	u830
  1235  000862                     u820:
  1236  000862  0E00               	movlw	0
  1237  000864                     u830:
  1238  000864  6E34               	movwf	dtoa@s^0,c
  1239  000866  6A35               	clrf	(dtoa@s+1)^0,c
  1240                           
  1241                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1242  000868  5034               	movf	dtoa@s^0,w,c
  1243  00086A  1035               	iorwf	(dtoa@s+1)^0,w,c
  1244  00086C  B4D8               	btfsc	status,2,c
  1245  00086E  EF3B  F004         	goto	u841
  1246  000872  EF3D  F004         	goto	u840
  1247  000876                     u841:
  1248  000876  EF4D  F004         	goto	l1504
  1249  00087A                     u840:
  1250  00087A                     
  1251                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1252  00087A  1E3D               	comf	(dtoa@n+7)^0,f,c
  1253  00087C  1E3C               	comf	(dtoa@n+6)^0,f,c
  1254  00087E  1E3B               	comf	(dtoa@n+5)^0,f,c
  1255  000880  1E3A               	comf	(dtoa@n+4)^0,f,c
  1256  000882  1E39               	comf	(dtoa@n+3)^0,f,c
  1257  000884  1E38               	comf	(dtoa@n+2)^0,f,c
  1258  000886  1E37               	comf	(dtoa@n+1)^0,f,c
  1259  000888  6C36               	negf	dtoa@n^0,c
  1260  00088A  0E00               	movlw	0
  1261  00088C  2237               	addwfc	(dtoa@n+1)^0,f,c
  1262  00088E  2238               	addwfc	(dtoa@n+2)^0,f,c
  1263  000890  2239               	addwfc	(dtoa@n+3)^0,f,c
  1264  000892  223A               	addwfc	(dtoa@n+4)^0,f,c
  1265  000894  223B               	addwfc	(dtoa@n+5)^0,f,c
  1266  000896  223C               	addwfc	(dtoa@n+6)^0,f,c
  1267  000898  223D               	addwfc	(dtoa@n+7)^0,f,c
  1268  00089A                     l1504:
  1269                           
  1270                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1271  00089A  0100               	movlb	0	; () banked
  1272  00089C  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1273  00089E  EF53  F004         	goto	u851
  1274  0008A2  EF55  F004         	goto	u850
  1275  0008A6                     u851:
  1276  0008A6  EF56  F004         	goto	l1508
  1277  0008AA                     u850:
  1278  0008AA                     
  1279                           ; BSR set to: 0
  1280                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1281  0008AA  9366               	bcf	_flags& (0+255),1,b
  1282  0008AC                     l1508:
  1283                           
  1284                           ; BSR set to: 0
  1285                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1286  0008AC  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1287  0008AE  EF63  F004         	goto	u860
  1288  0008B2  5165               	movf	(_prec+1)& (0+255),w,b
  1289  0008B4  E106               	bnz	u861
  1290  0008B6  0564               	decf	_prec& (0+255),w,b
  1291  0008B8  B0D8               	btfsc	status,0,c
  1292  0008BA  EF61  F004         	goto	u861
  1293  0008BE  EF63  F004         	goto	u860
  1294  0008C2                     u861:
  1295  0008C2  EF69  F004         	goto	l836
  1296  0008C6                     u860:
  1297  0008C6                     
  1298                           ; BSR set to: 0
  1299  0008C6  0E00               	movlw	0
  1300  0008C8  6E31               	movwf	(dtoa@p+1)^0,c
  1301  0008CA  0E01               	movlw	1
  1302  0008CC  6E30               	movwf	dtoa@p^0,c
  1303  0008CE  EF6D  F004         	goto	l838
  1304  0008D2                     l836:
  1305                           
  1306                           ; BSR set to: 0
  1307  0008D2  C064  F030         	movff	_prec,dtoa@p
  1308  0008D6  C065  F031         	movff	_prec+1,dtoa@p+1
  1309  0008DA                     l838:
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1313  0008DA  C062  F032         	movff	_width,dtoa@w
  1314  0008DE  C063  F033         	movff	_width+1,dtoa@w+1
  1315  0008E2                     
  1316                           ; BSR set to: 0
  1317                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1318  0008E2  5034               	movf	dtoa@s^0,w,c
  1319  0008E4  1035               	iorwf	(dtoa@s+1)^0,w,c
  1320  0008E6  A4D8               	btfss	status,2,c
  1321  0008E8  EF78  F004         	goto	u871
  1322  0008EC  EF7A  F004         	goto	u870
  1323  0008F0                     u871:
  1324  0008F0  EF81  F004         	goto	l1516
  1325  0008F4                     u870:
  1326  0008F4                     
  1327                           ; BSR set to: 0
  1328  0008F4  A566               	btfss	_flags& (0+255),2,b
  1329  0008F6  EF7F  F004         	goto	u881
  1330  0008FA  EF81  F004         	goto	u880
  1331  0008FE                     u881:
  1332  0008FE  EF84  F004         	goto	l1518
  1333  000902                     u880:
  1334  000902                     l1516:
  1335                           
  1336                           ; BSR set to: 0
  1337                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 306:         --w;
  1338  000902  0632               	decf	dtoa@w^0,f,c
  1339  000904  A0D8               	btfss	status,0,c
  1340  000906  0633               	decf	(dtoa@w+1)^0,f,c
  1341  000908                     l1518:
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1345  000908  0E00               	movlw	0
  1346  00090A  6E3F               	movwf	(dtoa@i+1)^0,c
  1347  00090C  0E1F               	movlw	31
  1348  00090E  6E3E               	movwf	dtoa@i^0,c
  1349  000910                     
  1350                           ; BSR set to: 0
  1351                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1352  000910  0E00               	movlw	0
  1353  000912  6F87               	movwf	(_dbuf+31)& (0+255),b
  1354                           
  1355                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1356  000914  EF08  F005         	goto	l1532
  1357  000918                     l1522:
  1358                           
  1359                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 313:         --i;
  1360  000918  063E               	decf	dtoa@i^0,f,c
  1361  00091A  A0D8               	btfss	status,0,c
  1362  00091C  063F               	decf	(dtoa@i+1)^0,f,c
  1363  00091E                     
  1364                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1365  00091E  0E68               	movlw	low _dbuf
  1366  000920  243E               	addwf	dtoa@i^0,w,c
  1367  000922  6ED9               	movwf	fsr2l,c
  1368  000924  0E00               	movlw	high _dbuf
  1369  000926  203F               	addwfc	(dtoa@i+1)^0,w,c
  1370  000928  6EDA               	movwf	fsr2h,c
  1371  00092A  C036  F001         	movff	dtoa@n,___aomod@dividend
  1372  00092E  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1373  000932  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1374  000936  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1375  00093A  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1376  00093E  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1377  000942  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1378  000946  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1379  00094A  0E0A               	movlw	10
  1380  00094C  6E09               	movwf	___aomod@divisor^0,c
  1381  00094E  0E00               	movlw	0
  1382  000950  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1383  000952  0E00               	movlw	0
  1384  000954  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1385  000956  0E00               	movlw	0
  1386  000958  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1387  00095A  0E00               	movlw	0
  1388  00095C  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1389  00095E  0E00               	movlw	0
  1390  000960  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1391  000962  0E00               	movlw	0
  1392  000964  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1393  000966  0E00               	movlw	0
  1394  000968  6E10               	movwf	(___aomod@divisor+7)^0,c
  1395  00096A  EC28  F007         	call	___aomod	;wreg free
  1396  00096E  C001  F026         	movff	?___aomod,??_dtoa
  1397  000972  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1398  000976  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1399  00097A  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1400  00097E  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1401  000982  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1402  000986  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1403  00098A  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1404  00098E  C026  F013         	movff	??_dtoa,abs@a
  1405  000992  C028  F014         	movff	??_dtoa+2,abs@a+1
  1406  000996  ECA3  F00A         	call	_abs	;wreg free
  1407  00099A  5013               	movf	?_abs^0,w,c
  1408  00099C  0F30               	addlw	48
  1409  00099E  6EDF               	movwf	indf2,c
  1410  0009A0                     
  1411                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 315:         --p;
  1412  0009A0  0630               	decf	dtoa@p^0,f,c
  1413  0009A2  A0D8               	btfss	status,0,c
  1414  0009A4  0631               	decf	(dtoa@p+1)^0,f,c
  1415  0009A6                     
  1416                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 316:         --w;
  1417  0009A6  0632               	decf	dtoa@w^0,f,c
  1418  0009A8  A0D8               	btfss	status,0,c
  1419  0009AA  0633               	decf	(dtoa@w+1)^0,f,c
  1420  0009AC                     
  1421                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1422  0009AC  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1423  0009B0  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1424  0009B4  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1425  0009B8  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1426  0009BC  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1427  0009C0  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1428  0009C4  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1429  0009C8  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1430  0009CC  0E0A               	movlw	10
  1431  0009CE  6E09               	movwf	___aodiv@divisor^0,c
  1432  0009D0  0E00               	movlw	0
  1433  0009D2  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1434  0009D4  0E00               	movlw	0
  1435  0009D6  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1436  0009D8  0E00               	movlw	0
  1437  0009DA  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1438  0009DC  0E00               	movlw	0
  1439  0009DE  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1440  0009E0  0E00               	movlw	0
  1441  0009E2  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1442  0009E4  0E00               	movlw	0
  1443  0009E6  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1444  0009E8  0E00               	movlw	0
  1445  0009EA  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1446  0009EC  EC64  F006         	call	___aodiv	;wreg free
  1447  0009F0  C001  F036         	movff	?___aodiv,dtoa@n
  1448  0009F4  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1449  0009F8  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1450  0009FC  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1451  000A00  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1452  000A04  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1453  000A08  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1454  000A0C  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1455  000A10                     l1532:
  1456                           
  1457                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1458  000A10  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1459  000A12  EF13  F005         	goto	u891
  1460  000A16  503F               	movf	(dtoa@i+1)^0,w,c
  1461  000A18  E108               	bnz	u890
  1462  000A1A  043E               	decf	dtoa@i^0,w,c
  1463  000A1C  A0D8               	btfss	status,0,c
  1464  000A1E  EF13  F005         	goto	u891
  1465  000A22  EF15  F005         	goto	u890
  1466  000A26                     u891:
  1467  000A26  EF46  F005         	goto	l1542
  1468  000A2A                     u890:
  1469  000A2A  5036               	movf	dtoa@n^0,w,c
  1470  000A2C  1037               	iorwf	(dtoa@n+1)^0,w,c
  1471  000A2E  1038               	iorwf	(dtoa@n+2)^0,w,c
  1472  000A30  1039               	iorwf	(dtoa@n+3)^0,w,c
  1473  000A32  103A               	iorwf	(dtoa@n+4)^0,w,c
  1474  000A34  103B               	iorwf	(dtoa@n+5)^0,w,c
  1475  000A36  103C               	iorwf	(dtoa@n+6)^0,w,c
  1476  000A38  103D               	iorwf	(dtoa@n+7)^0,w,c
  1477  000A3A  A4D8               	btfss	status,2,c
  1478  000A3C  EF22  F005         	goto	u901
  1479  000A40  EF24  F005         	goto	u900
  1480  000A44                     u901:
  1481  000A44  EF8C  F004         	goto	l1522
  1482  000A48                     u900:
  1483  000A48  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1484  000A4A  EF31  F005         	goto	u910
  1485  000A4E  5031               	movf	(dtoa@p+1)^0,w,c
  1486  000A50  E106               	bnz	u911
  1487  000A52  0430               	decf	dtoa@p^0,w,c
  1488  000A54  B0D8               	btfsc	status,0,c
  1489  000A56  EF2F  F005         	goto	u911
  1490  000A5A  EF31  F005         	goto	u910
  1491  000A5E                     u911:
  1492  000A5E  EF8C  F004         	goto	l1522
  1493  000A62                     u910:
  1494  000A62  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1495  000A64  EF3C  F005         	goto	u921
  1496  000A68  5033               	movf	(dtoa@w+1)^0,w,c
  1497  000A6A  E108               	bnz	u920
  1498  000A6C  0432               	decf	dtoa@w^0,w,c
  1499  000A6E  A0D8               	btfss	status,0,c
  1500  000A70  EF3C  F005         	goto	u921
  1501  000A74  EF3E  F005         	goto	u920
  1502  000A78                     u921:
  1503  000A78  EF46  F005         	goto	l1542
  1504  000A7C                     u920:
  1505  000A7C  0100               	movlb	0	; () banked
  1506  000A7E  B366               	btfsc	_flags& (0+255),1,b
  1507  000A80  EF44  F005         	goto	u931
  1508  000A84  EF46  F005         	goto	u930
  1509  000A88                     u931:
  1510  000A88  EF8C  F004         	goto	l1522
  1511  000A8C                     u930:
  1512  000A8C                     l1542:
  1513                           
  1514                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1515  000A8C  5034               	movf	dtoa@s^0,w,c
  1516  000A8E  1035               	iorwf	(dtoa@s+1)^0,w,c
  1517  000A90  A4D8               	btfss	status,2,c
  1518  000A92  EF4D  F005         	goto	u941
  1519  000A96  EF4F  F005         	goto	u940
  1520  000A9A                     u941:
  1521  000A9A  EF57  F005         	goto	l1546
  1522  000A9E                     u940:
  1523  000A9E  0100               	movlb	0	; () banked
  1524  000AA0  A566               	btfss	_flags& (0+255),2,b
  1525  000AA2  EF55  F005         	goto	u951
  1526  000AA6  EF57  F005         	goto	u950
  1527  000AAA                     u951:
  1528  000AAA  EF75  F005         	goto	l1556
  1529  000AAE                     u950:
  1530  000AAE                     l1546:
  1531                           
  1532                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 322:         --i;
  1533  000AAE  063E               	decf	dtoa@i^0,f,c
  1534  000AB0  A0D8               	btfss	status,0,c
  1535  000AB2  063F               	decf	(dtoa@i+1)^0,f,c
  1536  000AB4                     
  1537                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1538  000AB4  5034               	movf	dtoa@s^0,w,c
  1539  000AB6  1035               	iorwf	(dtoa@s+1)^0,w,c
  1540  000AB8  A4D8               	btfss	status,2,c
  1541  000ABA  EF61  F005         	goto	u961
  1542  000ABE  EF63  F005         	goto	u960
  1543  000AC2                     u961:
  1544  000AC2  EF69  F005         	goto	l1552
  1545  000AC6                     u960:
  1546  000AC6  0E00               	movlw	0
  1547  000AC8  6E2F               	movwf	(_dtoa$849+1)^0,c
  1548  000ACA  0E2B               	movlw	43
  1549  000ACC  6E2E               	movwf	_dtoa$849^0,c
  1550  000ACE  EF6D  F005         	goto	l1554
  1551  000AD2                     l1552:
  1552  000AD2  0E00               	movlw	0
  1553  000AD4  6E2F               	movwf	(_dtoa$849+1)^0,c
  1554  000AD6  0E2D               	movlw	45
  1555  000AD8  6E2E               	movwf	_dtoa$849^0,c
  1556  000ADA                     l1554:
  1557  000ADA  0E68               	movlw	low _dbuf
  1558  000ADC  243E               	addwf	dtoa@i^0,w,c
  1559  000ADE  6ED9               	movwf	fsr2l,c
  1560  000AE0  0E00               	movlw	high _dbuf
  1561  000AE2  203F               	addwfc	(dtoa@i+1)^0,w,c
  1562  000AE4  6EDA               	movwf	fsr2h,c
  1563  000AE6  C02E  FFDF         	movff	_dtoa$849,indf2
  1564  000AEA                     l1556:
  1565                           
  1566                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1567  000AEA  C01C  F011         	movff	dtoa@fp,pad@fp
  1568  000AEE  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1569  000AF2  0E68               	movlw	low _dbuf
  1570  000AF4  243E               	addwf	dtoa@i^0,w,c
  1571  000AF6  6E13               	movwf	pad@buf^0,c
  1572  000AF8  0E00               	movlw	high _dbuf
  1573  000AFA  203F               	addwfc	(dtoa@i+1)^0,w,c
  1574  000AFC  6E14               	movwf	(pad@buf+1)^0,c
  1575  000AFE  C032  F015         	movff	dtoa@w,pad@p
  1576  000B02  C033  F016         	movff	dtoa@w+1,pad@p+1
  1577  000B06  ECC7  F008         	call	_pad	;wreg free
  1578  000B0A  C011  F01C         	movff	?_pad,?_dtoa
  1579  000B0E  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1580  000B12  0012               	return		;funcret
  1581  000B14                     __end_of_dtoa:
  1582                           	callstack 0
  1583                           
  1584 ;; *************** function _pad *****************
  1585 ;; Defined at:
  1586 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1589 ;;		 -> sprintf@f(6), 
  1590 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1591 ;;		 -> dbuf(32), 
  1592 ;;  p               2   20[COMRAM] int 
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;  w               2   25[COMRAM] int 
  1595 ;;  i               2   23[COMRAM] int 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  2   16[COMRAM] int 
  1598 ;; Registers used:
  1599 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1605 ;;      Params:         6       0       0       0       0       0       0       0       0
  1606 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1607 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1608 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1609 ;;Total ram usage:       11 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    3
  1612 ;; This function calls:
  1613 ;;		_fputc
  1614 ;;		_fputs
  1615 ;;		_strlen
  1616 ;; This function is called by:
  1617 ;;		_dtoa
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text5
  1622  00118E                     __ptext5:
  1623                           	callstack 0
  1624  00118E                     _pad:
  1625                           	callstack 23
  1626  00118E                     
  1627                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1628  00118E  0100               	movlb	0	; () banked
  1629  001190  A166               	btfss	_flags& (0+255),0,b
  1630  001192  EFCD  F008         	goto	u771
  1631  001196  EFCF  F008         	goto	u770
  1632  00119A                     u771:
  1633  00119A  EFD9  F008         	goto	l1476
  1634  00119E                     u770:
  1635  00119E                     
  1636                           ; BSR set to: 0
  1637                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1638  00119E  C013  F00A         	movff	pad@buf,fputs@s
  1639  0011A2  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1640  0011A6  C011  F00C         	movff	pad@fp,fputs@fp
  1641  0011AA  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1642  0011AE  EC81  F00A         	call	_fputs	;wreg free
  1643  0011B2                     l1476:
  1644                           
  1645                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1646  0011B2  BE16               	btfsc	(pad@p+1)^0,7,c
  1647  0011B4  EFDE  F008         	goto	u781
  1648  0011B8  EFE0  F008         	goto	u780
  1649  0011BC                     u781:
  1650  0011BC  EFE6  F008         	goto	l1480
  1651  0011C0                     u780:
  1652  0011C0  C015  F01A         	movff	pad@p,pad@w
  1653  0011C4  C016  F01B         	movff	pad@p+1,pad@w+1
  1654  0011C8  EFEA  F008         	goto	l825
  1655  0011CC                     l1480:
  1656  0011CC  0E00               	movlw	0
  1657  0011CE  6E1B               	movwf	(pad@w+1)^0,c
  1658  0011D0  0E00               	movlw	0
  1659  0011D2  6E1A               	movwf	pad@w^0,c
  1660  0011D4                     l825:
  1661                           
  1662                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1663  0011D4  0E00               	movlw	0
  1664  0011D6  6E19               	movwf	(pad@i+1)^0,c
  1665  0011D8  0E00               	movlw	0
  1666  0011DA  6E18               	movwf	pad@i^0,c
  1667                           
  1668                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1669  0011DC  EFFC  F008         	goto	l1486
  1670  0011E0                     l1482:
  1671                           
  1672                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1673  0011E0  0E00               	movlw	0
  1674  0011E2  6E02               	movwf	(fputc@c+1)^0,c
  1675  0011E4  0E20               	movlw	32
  1676  0011E6  6E01               	movwf	fputc@c^0,c
  1677  0011E8  C011  F003         	movff	pad@fp,fputc@fp
  1678  0011EC  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1679  0011F0  EC62  F008         	call	_fputc	;wreg free
  1680  0011F4                     
  1681                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1682  0011F4  4A18               	infsnz	pad@i^0,f,c
  1683  0011F6  2A19               	incf	(pad@i+1)^0,f,c
  1684  0011F8                     l1486:
  1685                           
  1686                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1687  0011F8  501A               	movf	pad@w^0,w,c
  1688  0011FA  5C18               	subwf	pad@i^0,w,c
  1689  0011FC  5019               	movf	(pad@i+1)^0,w,c
  1690  0011FE  0A80               	xorlw	128
  1691  001200  6E17               	movwf	??_pad^0,c
  1692  001202  501B               	movf	(pad@w+1)^0,w,c
  1693  001204  0A80               	xorlw	128
  1694  001206  5817               	subwfb	??_pad^0,w,c
  1695  001208  A0D8               	btfss	status,0,c
  1696  00120A  EF09  F009         	goto	u791
  1697  00120E  EF0B  F009         	goto	u790
  1698  001212                     u791:
  1699  001212  EFF0  F008         	goto	l1482
  1700  001216                     u790:
  1701  001216                     
  1702                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1703  001216  0100               	movlb	0	; () banked
  1704  001218  B166               	btfsc	_flags& (0+255),0,b
  1705  00121A  EF11  F009         	goto	u801
  1706  00121E  EF13  F009         	goto	u800
  1707  001222                     u801:
  1708  001222  EF1D  F009         	goto	l1490
  1709  001226                     u800:
  1710  001226                     
  1711                           ; BSR set to: 0
  1712                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1713  001226  C013  F00A         	movff	pad@buf,fputs@s
  1714  00122A  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1715  00122E  C011  F00C         	movff	pad@fp,fputs@fp
  1716  001232  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1717  001236  EC81  F00A         	call	_fputs	;wreg free
  1718  00123A                     l1490:
  1719                           
  1720                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1721  00123A  C013  F001         	movff	pad@buf,strlen@s
  1722  00123E  C014  F002         	movff	pad@buf+1,strlen@s+1
  1723  001242  ECFC  F00A         	call	_strlen	;wreg free
  1724  001246  501A               	movf	pad@w^0,w,c
  1725  001248  2401               	addwf	?_strlen^0,w,c
  1726  00124A  6E11               	movwf	?_pad^0,c
  1727  00124C  501B               	movf	(pad@w+1)^0,w,c
  1728  00124E  2002               	addwfc	(?_strlen+1)^0,w,c
  1729  001250  6E12               	movwf	(?_pad+1)^0,c
  1730  001252  0012               	return		;funcret
  1731  001254                     __end_of_pad:
  1732                           	callstack 0
  1733                           
  1734 ;; *************** function _strlen *****************
  1735 ;; Defined at:
  1736 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\strlen.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1739 ;;		 -> dbuf(32), 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1742 ;;		 -> dbuf(32), 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  2    0[COMRAM] unsigned int 
  1745 ;; Registers used:
  1746 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1752 ;;      Params:         2       0       0       0       0       0       0       0       0
  1753 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1754 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1755 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1756 ;;Total ram usage:        4 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_pad
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           	psect	text6
  1766  0015F8                     __ptext6:
  1767                           	callstack 0
  1768  0015F8                     _strlen:
  1769                           	callstack 25
  1770  0015F8  C001  F003         	movff	strlen@s,strlen@a
  1771  0015FC  C002  F004         	movff	strlen@s+1,strlen@a+1
  1772  001600  EF04  F00B         	goto	l1386
  1773  001604                     l1384:
  1774  001604  4A01               	infsnz	strlen@s^0,f,c
  1775  001606  2A02               	incf	(strlen@s+1)^0,f,c
  1776  001608                     l1386:
  1777  001608  C001  FFD9         	movff	strlen@s,fsr2l
  1778  00160C  C002  FFDA         	movff	strlen@s+1,fsr2h
  1779  001610  50DF               	movf	indf2,w,c
  1780  001612  A4D8               	btfss	status,2,c
  1781  001614  EF0E  F00B         	goto	u631
  1782  001618  EF10  F00B         	goto	u630
  1783  00161C                     u631:
  1784  00161C  EF02  F00B         	goto	l1384
  1785  001620                     u630:
  1786  001620  5003               	movf	strlen@a^0,w,c
  1787  001622  5C01               	subwf	strlen@s^0,w,c
  1788  001624  6E01               	movwf	?_strlen^0,c
  1789  001626  5004               	movf	(strlen@a+1)^0,w,c
  1790  001628  5802               	subwfb	(strlen@s+1)^0,w,c
  1791  00162A  6E02               	movwf	(?_strlen+1)^0,c
  1792  00162C  0012               	return		;funcret
  1793  00162E                     __end_of_strlen:
  1794                           	callstack 0
  1795                           
  1796 ;; *************** function _fputs *****************
  1797 ;; Defined at:
  1798 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_fputs.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1801 ;;		 -> dbuf(32), 
  1802 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1803 ;;		 -> sprintf@f(6), 
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;  i               2   14[COMRAM] int 
  1806 ;;  c               1   13[COMRAM] unsigned char 
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  2    9[COMRAM] int 
  1809 ;; Registers used:
  1810 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1816 ;;      Params:         4       0       0       0       0       0       0       0       0
  1817 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1818 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1819 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1820 ;;Total ram usage:        7 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    2
  1823 ;; This function calls:
  1824 ;;		_fputc
  1825 ;; This function is called by:
  1826 ;;		_pad
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           	psect	text7
  1831  001502                     __ptext7:
  1832                           	callstack 0
  1833  001502                     _fputs:
  1834                           	callstack 23
  1835  001502  0E00               	movlw	0
  1836  001504  6E10               	movwf	(fputs@i+1)^0,c
  1837  001506  0E00               	movlw	0
  1838  001508  6E0F               	movwf	fputs@i^0,c
  1839  00150A  EF92  F00A         	goto	l1380
  1840  00150E                     l1376:
  1841  00150E  C00E  F001         	movff	fputs@c,fputc@c
  1842  001512  6A02               	clrf	(fputc@c+1)^0,c
  1843  001514  C00C  F003         	movff	fputs@fp,fputc@fp
  1844  001518  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1845  00151C  EC62  F008         	call	_fputc	;wreg free
  1846  001520  4A0F               	infsnz	fputs@i^0,f,c
  1847  001522  2A10               	incf	(fputs@i+1)^0,f,c
  1848  001524                     l1380:
  1849  001524  500F               	movf	fputs@i^0,w,c
  1850  001526  240A               	addwf	fputs@s^0,w,c
  1851  001528  6ED9               	movwf	fsr2l,c
  1852  00152A  5010               	movf	(fputs@i+1)^0,w,c
  1853  00152C  200B               	addwfc	(fputs@s+1)^0,w,c
  1854  00152E  6EDA               	movwf	fsr2h,c
  1855  001530  50DF               	movf	indf2,w,c
  1856  001532  6E0E               	movwf	fputs@c^0,c
  1857  001534  500E               	movf	fputs@c^0,w,c
  1858  001536  A4D8               	btfss	status,2,c
  1859  001538  EFA0  F00A         	goto	u621
  1860  00153C  EFA2  F00A         	goto	u620
  1861  001540                     u621:
  1862  001540  EF87  F00A         	goto	l1376
  1863  001544                     u620:
  1864  001544  0012               	return		;funcret
  1865  001546                     __end_of_fputs:
  1866                           	callstack 0
  1867                           
  1868 ;; *************** function _fputc *****************
  1869 ;; Defined at:
  1870 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_fputc.c"
  1871 ;; Parameters:    Size  Location     Type
  1872 ;;  c               2    0[COMRAM] int 
  1873 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1874 ;;		 -> sprintf@f(6), 
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  2    0[COMRAM] int 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1886 ;;      Params:         4       0       0       0       0       0       0       0       0
  1887 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1888 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1889 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1890 ;;Total ram usage:        9 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    1
  1893 ;; This function calls:
  1894 ;;		_putch
  1895 ;; This function is called by:
  1896 ;;		_pad
  1897 ;;		_vfpfcnvrt
  1898 ;;		_fputs
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           	psect	text8
  1903  0010C4                     __ptext8:
  1904                           	callstack 0
  1905  0010C4                     _fputc:
  1906                           	callstack 26
  1907  0010C4  5003               	movf	fputc@fp^0,w,c
  1908  0010C6  1004               	iorwf	(fputc@fp+1)^0,w,c
  1909  0010C8  B4D8               	btfsc	status,2,c
  1910  0010CA  EF69  F008         	goto	u581
  1911  0010CE  EF6B  F008         	goto	u580
  1912  0010D2                     u581:
  1913  0010D2  EF74  F008         	goto	l1364
  1914  0010D6                     u580:
  1915  0010D6  5003               	movf	fputc@fp^0,w,c
  1916  0010D8  1004               	iorwf	(fputc@fp+1)^0,w,c
  1917  0010DA  A4D8               	btfss	status,2,c
  1918  0010DC  EF72  F008         	goto	u591
  1919  0010E0  EF74  F008         	goto	u590
  1920  0010E4                     u591:
  1921  0010E4  EF79  F008         	goto	l1366
  1922  0010E8                     u590:
  1923  0010E8                     l1364:
  1924  0010E8  5001               	movf	fputc@c^0,w,c
  1925  0010EA  EC4B  F00B         	call	_putch
  1926  0010EE  EFC6  F008         	goto	l889
  1927  0010F2                     l1366:
  1928  0010F2  EE20 F004          	lfsr	2,4
  1929  0010F6  5003               	movf	fputc@fp^0,w,c
  1930  0010F8  26D9               	addwf	fsr2l,f,c
  1931  0010FA  5004               	movf	(fputc@fp+1)^0,w,c
  1932  0010FC  22DA               	addwfc	fsr2h,f,c
  1933  0010FE  50DE               	movf	postinc2,w,c
  1934  001100  10DE               	iorwf	postinc2,w,c
  1935  001102  B4D8               	btfsc	status,2,c
  1936  001104  EF86  F008         	goto	u601
  1937  001108  EF88  F008         	goto	u600
  1938  00110C                     u601:
  1939  00110C  EFA3  F008         	goto	l1370
  1940  001110                     u600:
  1941  001110  EE20 F004          	lfsr	2,4
  1942  001114  5003               	movf	fputc@fp^0,w,c
  1943  001116  26D9               	addwf	fsr2l,f,c
  1944  001118  5004               	movf	(fputc@fp+1)^0,w,c
  1945  00111A  22DA               	addwfc	fsr2h,f,c
  1946  00111C  EE10 F002          	lfsr	1,2
  1947  001120  5003               	movf	fputc@fp^0,w,c
  1948  001122  26E1               	addwf	fsr1l,f,c
  1949  001124  5004               	movf	(fputc@fp+1)^0,w,c
  1950  001126  22E2               	addwfc	fsr1h,f,c
  1951  001128  50DE               	movf	postinc2,w,c
  1952  00112A  5CE6               	subwf	postinc1,w,c
  1953  00112C  50E6               	movf	postinc1,w,c
  1954  00112E  0A80               	xorlw	128
  1955  001130  6E09               	movwf	(??_fputc+4)^0,c
  1956  001132  50DE               	movf	postinc2,w,c
  1957  001134  0A80               	xorlw	128
  1958  001136  5809               	subwfb	(??_fputc+4)^0,w,c
  1959  001138  B0D8               	btfsc	status,0,c
  1960  00113A  EFA1  F008         	goto	u611
  1961  00113E  EFA3  F008         	goto	u610
  1962  001142                     u611:
  1963  001142  EFC6  F008         	goto	l889
  1964  001146                     u610:
  1965  001146                     l1370:
  1966  001146  EE20 F002          	lfsr	2,2
  1967  00114A  5003               	movf	fputc@fp^0,w,c
  1968  00114C  26D9               	addwf	fsr2l,f,c
  1969  00114E  5004               	movf	(fputc@fp+1)^0,w,c
  1970  001150  22DA               	addwfc	fsr2h,f,c
  1971  001152  CFDE F005          	movff	postinc2,??_fputc
  1972  001156  CFDD F006          	movff	postdec2,??_fputc+1
  1973  00115A  C003  FFD9         	movff	fputc@fp,fsr2l
  1974  00115E  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1975  001162  CFDE F007          	movff	postinc2,??_fputc+2
  1976  001166  CFDD F008          	movff	postdec2,??_fputc+3
  1977  00116A  5005               	movf	??_fputc^0,w,c
  1978  00116C  2407               	addwf	(??_fputc+2)^0,w,c
  1979  00116E  6ED9               	movwf	fsr2l,c
  1980  001170  5006               	movf	(??_fputc+1)^0,w,c
  1981  001172  2008               	addwfc	(??_fputc+3)^0,w,c
  1982  001174  6EDA               	movwf	fsr2h,c
  1983  001176  C001  FFDF         	movff	fputc@c,indf2
  1984  00117A  EE20 F002          	lfsr	2,2
  1985  00117E  5003               	movf	fputc@fp^0,w,c
  1986  001180  26D9               	addwf	fsr2l,f,c
  1987  001182  5004               	movf	(fputc@fp+1)^0,w,c
  1988  001184  22DA               	addwfc	fsr2h,f,c
  1989  001186  2ADE               	incf	postinc2,f,c
  1990  001188  0E00               	movlw	0
  1991  00118A  22DD               	addwfc	postdec2,f,c
  1992  00118C                     l889:
  1993  00118C  0012               	return		;funcret
  1994  00118E                     __end_of_fputc:
  1995                           	callstack 0
  1996                           
  1997 ;; *************** function _putch *****************
  1998 ;; Defined at:
  1999 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\putch.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;  c               1    wreg     unsigned char 
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;  c               1    0[COMRAM] unsigned char 
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  1    wreg      void 
  2006 ;; Registers used:
  2007 ;;		wreg
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2013 ;;      Params:         0       0       0       0       0       0       0       0       0
  2014 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2016 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2017 ;;Total ram usage:        0 bytes
  2018 ;; Hardware stack levels used:    1
  2019 ;; This function calls:
  2020 ;;		Nothing
  2021 ;; This function is called by:
  2022 ;;		_fputc
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026                           	psect	text9
  2027  001696                     __ptext9:
  2028                           	callstack 0
  2029  001696                     _putch:
  2030                           	callstack 26
  2031  001696  0012               	return		;funcret
  2032  001698                     __end_of_putch:
  2033                           	callstack 0
  2034                           
  2035 ;; *************** function _abs *****************
  2036 ;; Defined at:
  2037 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\abs.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;  a               2   18[COMRAM] int 
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;		None
  2042 ;; Return value:  Size  Location     Type
  2043 ;;                  2   18[COMRAM] int 
  2044 ;; Registers used:
  2045 ;;		wreg, status,2, status,0
  2046 ;; Tracked objects:
  2047 ;;		On entry : 0/0
  2048 ;;		On exit  : 0/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2051 ;;      Params:         2       0       0       0       0       0       0       0       0
  2052 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2053 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2054 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2055 ;;Total ram usage:        4 bytes
  2056 ;; Hardware stack levels used:    1
  2057 ;; This function calls:
  2058 ;;		Nothing
  2059 ;; This function is called by:
  2060 ;;		_dtoa
  2061 ;; This function uses a non-reentrant model
  2062 ;;
  2063                           
  2064                           	psect	text10
  2065  001546                     __ptext10:
  2066                           	callstack 0
  2067  001546                     _abs:
  2068                           	callstack 26
  2069  001546  BE14               	btfsc	(abs@a+1)^0,7,c
  2070  001548  EFB0  F00A         	goto	u810
  2071  00154C  5014               	movf	(abs@a+1)^0,w,c
  2072  00154E  E106               	bnz	u811
  2073  001550  0413               	decf	abs@a^0,w,c
  2074  001552  B0D8               	btfsc	status,0,c
  2075  001554  EFAE  F00A         	goto	u811
  2076  001558  EFB0  F00A         	goto	u810
  2077  00155C                     u811:
  2078  00155C  EFBE  F00A         	goto	l874
  2079  001560                     u810:
  2080  001560  C013  F015         	movff	abs@a,??_abs
  2081  001564  C014  F016         	movff	abs@a+1,??_abs+1
  2082  001568  1E15               	comf	??_abs^0,f,c
  2083  00156A  1E16               	comf	(??_abs+1)^0,f,c
  2084  00156C  4A15               	infsnz	??_abs^0,f,c
  2085  00156E  2A16               	incf	(??_abs+1)^0,f,c
  2086  001570  C015  F013         	movff	??_abs,?_abs
  2087  001574  C016  F014         	movff	??_abs+1,?_abs+1
  2088  001578  EFC2  F00A         	goto	l877
  2089  00157C                     l874:
  2090  00157C  C013  F013         	movff	abs@a,?_abs
  2091  001580  C014  F014         	movff	abs@a+1,?_abs+1
  2092  001584                     l877:
  2093  001584  0012               	return		;funcret
  2094  001586                     __end_of_abs:
  2095                           	callstack 0
  2096                           
  2097 ;; *************** function ___aomod *****************
  2098 ;; Defined at:
  2099 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\aomod.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;  dividend        8    0[COMRAM] long long 
  2102 ;;  divisor         8    8[COMRAM] long long 
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;  sign            1   17[COMRAM] unsigned char 
  2105 ;;  counter         1   16[COMRAM] unsigned char 
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  8    0[COMRAM] long long 
  2108 ;; Registers used:
  2109 ;;		wreg, status,2, status,0
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2115 ;;      Params:        16       0       0       0       0       0       0       0       0
  2116 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2117 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2118 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2119 ;;Total ram usage:       18 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; This function calls:
  2122 ;;		Nothing
  2123 ;; This function is called by:
  2124 ;;		_dtoa
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           	psect	text11
  2129  000E50                     __ptext11:
  2130                           	callstack 0
  2131  000E50                     ___aomod:
  2132                           	callstack 26
  2133  000E50  0E00               	movlw	0
  2134  000E52  6E12               	movwf	___aomod@sign^0,c
  2135  000E54  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2136  000E56  EF31  F007         	goto	u710
  2137  000E5A  EF2F  F007         	goto	u711
  2138  000E5E                     u711:
  2139  000E5E  EF43  F007         	goto	l1444
  2140  000E62                     u710:
  2141  000E62  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2142  000E64  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2143  000E66  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2144  000E68  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2145  000E6A  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2146  000E6C  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2147  000E6E  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2148  000E70  6C01               	negf	___aomod@dividend^0,c
  2149  000E72  0E00               	movlw	0
  2150  000E74  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2151  000E76  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2152  000E78  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2153  000E7A  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2154  000E7C  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2155  000E7E  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2156  000E80  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2157  000E82  0E01               	movlw	1
  2158  000E84  6E12               	movwf	___aomod@sign^0,c
  2159  000E86                     l1444:
  2160  000E86  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2161  000E88  EF4A  F007         	goto	u720
  2162  000E8C  EF48  F007         	goto	u721
  2163  000E90                     u721:
  2164  000E90  EF5A  F007         	goto	l1448
  2165  000E94                     u720:
  2166  000E94  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2167  000E96  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2168  000E98  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2169  000E9A  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2170  000E9C  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2171  000E9E  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2172  000EA0  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2173  000EA2  6C09               	negf	___aomod@divisor^0,c
  2174  000EA4  0E00               	movlw	0
  2175  000EA6  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2176  000EA8  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2177  000EAA  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2178  000EAC  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2179  000EAE  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2180  000EB0  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2181  000EB2  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2182  000EB4                     l1448:
  2183  000EB4  5009               	movf	___aomod@divisor^0,w,c
  2184  000EB6  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2185  000EB8  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2186  000EBA  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2187  000EBC  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2188  000EBE  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2189  000EC0  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2190  000EC2  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2191  000EC4  B4D8               	btfsc	status,2,c
  2192  000EC6  EF67  F007         	goto	u731
  2193  000ECA  EF69  F007         	goto	u730
  2194  000ECE                     u731:
  2195  000ECE  EFB1  F007         	goto	l1464
  2196  000ED2                     u730:
  2197  000ED2  0E01               	movlw	1
  2198  000ED4  6E11               	movwf	___aomod@counter^0,c
  2199  000ED6  EF77  F007         	goto	l1454
  2200  000EDA                     l1452:
  2201  000EDA  90D8               	bcf	status,0,c
  2202  000EDC  3609               	rlcf	___aomod@divisor^0,f,c
  2203  000EDE  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2204  000EE0  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2205  000EE2  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2206  000EE4  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2207  000EE6  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2208  000EE8  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2209  000EEA  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2210  000EEC  2A11               	incf	___aomod@counter^0,f,c
  2211  000EEE                     l1454:
  2212  000EEE  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2213  000EF0  EF7C  F007         	goto	u741
  2214  000EF4  EF7E  F007         	goto	u740
  2215  000EF8                     u741:
  2216  000EF8  EF6D  F007         	goto	l1452
  2217  000EFC                     u740:
  2218  000EFC                     l1456:
  2219  000EFC  5009               	movf	___aomod@divisor^0,w,c
  2220  000EFE  5C01               	subwf	___aomod@dividend^0,w,c
  2221  000F00  500A               	movf	(___aomod@divisor+1)^0,w,c
  2222  000F02  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2223  000F04  500B               	movf	(___aomod@divisor+2)^0,w,c
  2224  000F06  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2225  000F08  500C               	movf	(___aomod@divisor+3)^0,w,c
  2226  000F0A  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2227  000F0C  500D               	movf	(___aomod@divisor+4)^0,w,c
  2228  000F0E  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2229  000F10  500E               	movf	(___aomod@divisor+5)^0,w,c
  2230  000F12  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2231  000F14  500F               	movf	(___aomod@divisor+6)^0,w,c
  2232  000F16  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2233  000F18  5010               	movf	(___aomod@divisor+7)^0,w,c
  2234  000F1A  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2235  000F1C  A0D8               	btfss	status,0,c
  2236  000F1E  EF93  F007         	goto	u751
  2237  000F22  EF95  F007         	goto	u750
  2238  000F26                     u751:
  2239  000F26  EFA5  F007         	goto	l1460
  2240  000F2A                     u750:
  2241  000F2A  5009               	movf	___aomod@divisor^0,w,c
  2242  000F2C  5E01               	subwf	___aomod@dividend^0,f,c
  2243  000F2E  500A               	movf	(___aomod@divisor+1)^0,w,c
  2244  000F30  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2245  000F32  500B               	movf	(___aomod@divisor+2)^0,w,c
  2246  000F34  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2247  000F36  500C               	movf	(___aomod@divisor+3)^0,w,c
  2248  000F38  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2249  000F3A  500D               	movf	(___aomod@divisor+4)^0,w,c
  2250  000F3C  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2251  000F3E  500E               	movf	(___aomod@divisor+5)^0,w,c
  2252  000F40  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2253  000F42  500F               	movf	(___aomod@divisor+6)^0,w,c
  2254  000F44  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2255  000F46  5010               	movf	(___aomod@divisor+7)^0,w,c
  2256  000F48  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2257  000F4A                     l1460:
  2258  000F4A  90D8               	bcf	status,0,c
  2259  000F4C  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2260  000F4E  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2261  000F50  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2262  000F52  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2263  000F54  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2264  000F56  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2265  000F58  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2266  000F5A  3209               	rrcf	___aomod@divisor^0,f,c
  2267  000F5C  2E11               	decfsz	___aomod@counter^0,f,c
  2268  000F5E  EF7E  F007         	goto	l1456
  2269  000F62                     l1464:
  2270  000F62  5012               	movf	___aomod@sign^0,w,c
  2271  000F64  B4D8               	btfsc	status,2,c
  2272  000F66  EFB7  F007         	goto	u761
  2273  000F6A  EFB9  F007         	goto	u760
  2274  000F6E                     u761:
  2275  000F6E  EFC9  F007         	goto	l1468
  2276  000F72                     u760:
  2277  000F72  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2278  000F74  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2279  000F76  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2280  000F78  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2281  000F7A  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2282  000F7C  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2283  000F7E  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2284  000F80  6C01               	negf	___aomod@dividend^0,c
  2285  000F82  0E00               	movlw	0
  2286  000F84  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2287  000F86  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2288  000F88  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2289  000F8A  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2290  000F8C  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2291  000F8E  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2292  000F90  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2293  000F92                     l1468:
  2294  000F92  C001  F001         	movff	___aomod@dividend,?___aomod
  2295  000F96  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2296  000F9A  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2297  000F9E  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2298  000FA2  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2299  000FA6  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2300  000FAA  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2301  000FAE  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2302  000FB2  0012               	return		;funcret
  2303  000FB4                     __end_of___aomod:
  2304                           	callstack 0
  2305                           
  2306 ;; *************** function ___aodiv *****************
  2307 ;; Defined at:
  2308 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\aodiv.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;  dividend        8    0[COMRAM] long long 
  2311 ;;  divisor         8    8[COMRAM] long long 
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;  quotient        8   18[COMRAM] long long 
  2314 ;;  sign            1   17[COMRAM] unsigned char 
  2315 ;;  counter         1   16[COMRAM] unsigned char 
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  8    0[COMRAM] long long 
  2318 ;; Registers used:
  2319 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2325 ;;      Params:        16       0       0       0       0       0       0       0       0
  2326 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2327 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2328 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2329 ;;Total ram usage:       26 bytes
  2330 ;; Hardware stack levels used:    1
  2331 ;; This function calls:
  2332 ;;		Nothing
  2333 ;; This function is called by:
  2334 ;;		_dtoa
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           	psect	text12
  2339  000CC8                     __ptext12:
  2340                           	callstack 0
  2341  000CC8                     ___aodiv:
  2342                           	callstack 26
  2343  000CC8  0E00               	movlw	0
  2344  000CCA  6E12               	movwf	___aodiv@sign^0,c
  2345  000CCC  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2346  000CCE  EF6D  F006         	goto	u640
  2347  000CD2  EF6B  F006         	goto	u641
  2348  000CD6                     u641:
  2349  000CD6  EF7F  F006         	goto	l1400
  2350  000CDA                     u640:
  2351  000CDA  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2352  000CDC  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2353  000CDE  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2354  000CE0  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2355  000CE2  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2356  000CE4  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2357  000CE6  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2358  000CE8  6C09               	negf	___aodiv@divisor^0,c
  2359  000CEA  0E00               	movlw	0
  2360  000CEC  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2361  000CEE  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2362  000CF0  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2363  000CF2  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2364  000CF4  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2365  000CF6  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2366  000CF8  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2367  000CFA  0E01               	movlw	1
  2368  000CFC  6E12               	movwf	___aodiv@sign^0,c
  2369  000CFE                     l1400:
  2370  000CFE  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2371  000D00  EF86  F006         	goto	u650
  2372  000D04  EF84  F006         	goto	u651
  2373  000D08                     u651:
  2374  000D08  EF98  F006         	goto	l1406
  2375  000D0C                     u650:
  2376  000D0C  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2377  000D0E  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2378  000D10  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2379  000D12  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2380  000D14  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2381  000D16  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2382  000D18  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2383  000D1A  6C01               	negf	___aodiv@dividend^0,c
  2384  000D1C  0E00               	movlw	0
  2385  000D1E  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2386  000D20  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2387  000D22  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2388  000D24  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2389  000D26  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2390  000D28  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2391  000D2A  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2392  000D2C  0E01               	movlw	1
  2393  000D2E  1A12               	xorwf	___aodiv@sign^0,f,c
  2394  000D30                     l1406:
  2395  000D30  EE20  F013         	lfsr	2,___aodiv@quotient
  2396  000D34  0E07               	movlw	7
  2397  000D36                     u661:
  2398  000D36  6ADE               	clrf	postinc2,c
  2399  000D38  06E8               	decf	wreg,f,c
  2400  000D3A  E2FD               	bc	u661
  2401  000D3C  5009               	movf	___aodiv@divisor^0,w,c
  2402  000D3E  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2403  000D40  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2404  000D42  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2405  000D44  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2406  000D46  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2407  000D48  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2408  000D4A  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2409  000D4C  B4D8               	btfsc	status,2,c
  2410  000D4E  EFAB  F006         	goto	u671
  2411  000D52  EFAD  F006         	goto	u670
  2412  000D56                     u671:
  2413  000D56  EFFF  F006         	goto	l1428
  2414  000D5A                     u670:
  2415  000D5A  0E01               	movlw	1
  2416  000D5C  6E11               	movwf	___aodiv@counter^0,c
  2417  000D5E  EFBB  F006         	goto	l1414
  2418  000D62                     l1412:
  2419  000D62  90D8               	bcf	status,0,c
  2420  000D64  3609               	rlcf	___aodiv@divisor^0,f,c
  2421  000D66  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2422  000D68  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2423  000D6A  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2424  000D6C  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2425  000D6E  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2426  000D70  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2427  000D72  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2428  000D74  2A11               	incf	___aodiv@counter^0,f,c
  2429  000D76                     l1414:
  2430  000D76  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2431  000D78  EFC0  F006         	goto	u681
  2432  000D7C  EFC2  F006         	goto	u680
  2433  000D80                     u681:
  2434  000D80  EFB1  F006         	goto	l1412
  2435  000D84                     u680:
  2436  000D84                     l1416:
  2437  000D84  90D8               	bcf	status,0,c
  2438  000D86  3613               	rlcf	___aodiv@quotient^0,f,c
  2439  000D88  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2440  000D8A  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2441  000D8C  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2442  000D8E  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2443  000D90  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2444  000D92  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2445  000D94  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2446  000D96  5009               	movf	___aodiv@divisor^0,w,c
  2447  000D98  5C01               	subwf	___aodiv@dividend^0,w,c
  2448  000D9A  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2449  000D9C  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2450  000D9E  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2451  000DA0  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2452  000DA2  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2453  000DA4  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2454  000DA6  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2455  000DA8  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2456  000DAA  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2457  000DAC  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2458  000DAE  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2459  000DB0  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2460  000DB2  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2461  000DB4  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2462  000DB6  A0D8               	btfss	status,0,c
  2463  000DB8  EFE0  F006         	goto	u691
  2464  000DBC  EFE2  F006         	goto	u690
  2465  000DC0                     u691:
  2466  000DC0  EFF3  F006         	goto	l1424
  2467  000DC4                     u690:
  2468  000DC4  5009               	movf	___aodiv@divisor^0,w,c
  2469  000DC6  5E01               	subwf	___aodiv@dividend^0,f,c
  2470  000DC8  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2471  000DCA  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2472  000DCC  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2473  000DCE  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2474  000DD0  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2475  000DD2  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2476  000DD4  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2477  000DD6  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2478  000DD8  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2479  000DDA  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2480  000DDC  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2481  000DDE  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2482  000DE0  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2483  000DE2  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2484  000DE4  8013               	bsf	___aodiv@quotient^0,0,c
  2485  000DE6                     l1424:
  2486  000DE6  90D8               	bcf	status,0,c
  2487  000DE8  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2488  000DEA  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2489  000DEC  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2490  000DEE  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2491  000DF0  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2492  000DF2  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2493  000DF4  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2494  000DF6  3209               	rrcf	___aodiv@divisor^0,f,c
  2495  000DF8  2E11               	decfsz	___aodiv@counter^0,f,c
  2496  000DFA  EFC2  F006         	goto	l1416
  2497  000DFE                     l1428:
  2498  000DFE  5012               	movf	___aodiv@sign^0,w,c
  2499  000E00  B4D8               	btfsc	status,2,c
  2500  000E02  EF05  F007         	goto	u701
  2501  000E06  EF07  F007         	goto	u700
  2502  000E0A                     u701:
  2503  000E0A  EF17  F007         	goto	l1432
  2504  000E0E                     u700:
  2505  000E0E  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2506  000E10  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2507  000E12  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2508  000E14  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2509  000E16  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2510  000E18  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2511  000E1A  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2512  000E1C  6C13               	negf	___aodiv@quotient^0,c
  2513  000E1E  0E00               	movlw	0
  2514  000E20  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2515  000E22  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2516  000E24  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2517  000E26  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2518  000E28  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2519  000E2A  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2520  000E2C  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2521  000E2E                     l1432:
  2522  000E2E  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2523  000E32  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2524  000E36  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2525  000E3A  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2526  000E3E  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2527  000E42  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2528  000E46  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2529  000E4A  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2530  000E4E  0012               	return		;funcret
  2531  000E50                     __end_of___aodiv:
  2532                           	callstack 0
  2533                           
  2534 ;; *************** function _lcd_putc *****************
  2535 ;; Defined at:
  2536 ;;		line 107 in file "./HeaderApp/lcd.h"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  a               2    4[COMRAM] PTR unsigned char 
  2539 ;;		 -> buffer_lcd(20), STR_2(16), STR_1(16), 
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;  i               2    8[COMRAM] int 
  2542 ;; Return value:  Size  Location     Type
  2543 ;;                  1    wreg      void 
  2544 ;; Registers used:
  2545 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2546 ;; Tracked objects:
  2547 ;;		On entry : 0/0
  2548 ;;		On exit  : 0/0
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2551 ;;      Params:         2       0       0       0       0       0       0       0       0
  2552 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2553 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2554 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2555 ;;Total ram usage:        6 bytes
  2556 ;; Hardware stack levels used:    1
  2557 ;; Hardware stack levels required when called:    2
  2558 ;; This function calls:
  2559 ;;		_lcd_write_char
  2560 ;; This function is called by:
  2561 ;;		_main
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           	psect	text13
  2566  001254                     __ptext13:
  2567                           	callstack 0
  2568  001254                     _lcd_putc:
  2569                           	callstack 28
  2570  001254                     
  2571                           ;./HeaderApp/lcd.h: 107: void lcd_putc(char *a);./HeaderApp/lcd.h: 108: {;./HeaderApp/lc
      +                          d.h: 109:    int i;;./HeaderApp/lcd.h: 110:    for(i=0;a[i]!='\0';i++)
  2572  001254  0E00               	movlw	0
  2573  001256  6E0A               	movwf	(lcd_putc@i+1)^0,c
  2574  001258  0E00               	movlw	0
  2575  00125A  6E09               	movwf	lcd_putc@i^0,c
  2576  00125C  EF4A  F009         	goto	l1730
  2577  001260                     l1726:
  2578                           
  2579                           ;./HeaderApp/lcd.h: 111:       lcd_write_char(a[i]);
  2580  001260  5009               	movf	lcd_putc@i^0,w,c
  2581  001262  2405               	addwf	lcd_putc@a^0,w,c
  2582  001264  6E07               	movwf	??_lcd_putc^0,c
  2583  001266  500A               	movf	(lcd_putc@i+1)^0,w,c
  2584  001268  2006               	addwfc	(lcd_putc@a+1)^0,w,c
  2585  00126A  6E08               	movwf	(??_lcd_putc+1)^0,c
  2586  00126C  C007  FFF6         	movff	??_lcd_putc,tblptrl
  2587  001270  C008  FFF7         	movff	??_lcd_putc+1,tblptrh
  2588  001274  6AF8               	clrf	tblptru,c
  2589  001276  0E07               	movlw	(high __ramtop+-1)
  2590  001278  64F7               	cpfsgt	tblptrh,c
  2591  00127A  D003               	bra	u1107
  2592  00127C  0008               	tblrd		*
  2593  00127E  50F5               	movf	tablat,w,c
  2594  001280  D005               	bra	u1100
  2595  001282                     u1107:
  2596  001282  CFF6 FFE1          	movff	tblptrl,fsr1l
  2597  001286  CFF7 FFE2          	movff	tblptrh,fsr1h
  2598  00128A  50E7               	movf	indf1,w,c
  2599  00128C                     u1100:
  2600  00128C  EC17  F00B         	call	_lcd_write_char
  2601  001290  4A09               	infsnz	lcd_putc@i^0,f,c
  2602  001292  2A0A               	incf	(lcd_putc@i+1)^0,f,c
  2603  001294                     l1730:
  2604  001294  5009               	movf	lcd_putc@i^0,w,c
  2605  001296  2405               	addwf	lcd_putc@a^0,w,c
  2606  001298  6E07               	movwf	??_lcd_putc^0,c
  2607  00129A  500A               	movf	(lcd_putc@i+1)^0,w,c
  2608  00129C  2006               	addwfc	(lcd_putc@a+1)^0,w,c
  2609  00129E  6E08               	movwf	(??_lcd_putc+1)^0,c
  2610  0012A0  C007  FFF6         	movff	??_lcd_putc,tblptrl
  2611  0012A4  C008  FFF7         	movff	??_lcd_putc+1,tblptrh
  2612  0012A8  6AF8               	clrf	tblptru,c
  2613  0012AA  0E07               	movlw	(high __ramtop+-1)
  2614  0012AC  64F7               	cpfsgt	tblptrh,c
  2615  0012AE  D003               	bra	u1117
  2616  0012B0  0008               	tblrd		*
  2617  0012B2  50F5               	movf	tablat,w,c
  2618  0012B4  D005               	bra	u1110
  2619  0012B6                     u1117:
  2620  0012B6  CFF6 FFE1          	movff	tblptrl,fsr1l
  2621  0012BA  CFF7 FFE2          	movff	tblptrh,fsr1h
  2622  0012BE  50E7               	movf	indf1,w,c
  2623  0012C0                     u1110:
  2624  0012C0  0900               	iorlw	0
  2625  0012C2  A4D8               	btfss	status,2,c
  2626  0012C4  EF66  F009         	goto	u1121
  2627  0012C8  EF68  F009         	goto	u1120
  2628  0012CC                     u1121:
  2629  0012CC  EF30  F009         	goto	l1726
  2630  0012D0                     u1120:
  2631  0012D0  0012               	return		;funcret
  2632  0012D2                     __end_of_lcd_putc:
  2633                           	callstack 0
  2634                           
  2635 ;; *************** function _lcd_write_char *****************
  2636 ;; Defined at:
  2637 ;;		line 91 in file "./HeaderApp/lcd.h"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  a               1    wreg     unsigned char 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  a               1    3[COMRAM] unsigned char 
  2642 ;;  y               1    2[COMRAM] unsigned char 
  2643 ;;  temp            1    1[COMRAM] unsigned char 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      void 
  2646 ;; Registers used:
  2647 ;;		wreg, status,2, status,0, cstack
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2653 ;;      Params:         0       0       0       0       0       0       0       0       0
  2654 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2655 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2656 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2657 ;;Total ram usage:        3 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:    1
  2660 ;; This function calls:
  2661 ;;		_Lcd_Port
  2662 ;; This function is called by:
  2663 ;;		_lcd_putc
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           	psect	text14
  2668  00162E                     __ptext14:
  2669                           	callstack 0
  2670  00162E                     _lcd_write_char:
  2671                           	callstack 28
  2672                           
  2673                           ;incstack = 0
  2674                           ;lcd_write_char@a stored from wreg
  2675  00162E  6E04               	movwf	lcd_write_char@a^0,c
  2676  001630                     
  2677                           ;./HeaderApp/lcd.h: 91: void lcd_write_char(char a);./HeaderApp/lcd.h: 92: {;./HeaderApp
      +                          /lcd.h: 93:    char temp,y;;./HeaderApp/lcd.h: 94:    temp = a&0x0F;
  2678  001630  5004               	movf	lcd_write_char@a^0,w,c
  2679  001632  0B0F               	andlw	15
  2680  001634  6E02               	movwf	lcd_write_char@temp^0,c
  2681                           
  2682                           ;./HeaderApp/lcd.h: 95:    y = a&0xF0;
  2683  001636  5004               	movf	lcd_write_char@a^0,w,c
  2684  001638  0BF0               	andlw	240
  2685  00163A  6E03               	movwf	lcd_write_char@y^0,c
  2686  00163C                     
  2687                           ;./HeaderApp/lcd.h: 96:    LATDbits.LD2 = 1;
  2688  00163C  848C               	bsf	140,2,c	;volatile
  2689  00163E                     
  2690                           ;./HeaderApp/lcd.h: 97:    Lcd_Port(y>>4);
  2691  00163E  3803               	swapf	lcd_write_char@y^0,w,c
  2692  001640  0B0F               	andlw	15
  2693  001642  EC06  F00A         	call	_Lcd_Port
  2694  001646                     
  2695                           ;./HeaderApp/lcd.h: 98:    LATDbits.LD3 = 1;
  2696  001646  868C               	bsf	140,3,c	;volatile
  2697  001648                     
  2698                           ;./HeaderApp/lcd.h: 99:    _delay((unsigned long)((40)*(12000000/4000000.0)));
  2699  001648  0E28               	movlw	40
  2700  00164A                     u1167:
  2701  00164A  2EE8               	decfsz	wreg,f,c
  2702  00164C  D7FE               	bra	u1167
  2703  00164E                     
  2704                           ;./HeaderApp/lcd.h: 100:    LATDbits.LD3 = 0;
  2705  00164E  968C               	bcf	140,3,c	;volatile
  2706  001650                     
  2707                           ;./HeaderApp/lcd.h: 101:    Lcd_Port(temp);
  2708  001650  5002               	movf	lcd_write_char@temp^0,w,c
  2709  001652  EC06  F00A         	call	_Lcd_Port
  2710  001656                     
  2711                           ;./HeaderApp/lcd.h: 102:    LATDbits.LD3 = 1;
  2712  001656  868C               	bsf	140,3,c	;volatile
  2713  001658                     
  2714                           ;./HeaderApp/lcd.h: 103:    _delay((unsigned long)((40)*(12000000/4000000.0)));
  2715  001658  0E28               	movlw	40
  2716  00165A                     u1177:
  2717  00165A  2EE8               	decfsz	wreg,f,c
  2718  00165C  D7FE               	bra	u1177
  2719  00165E                     
  2720                           ;./HeaderApp/lcd.h: 104:    LATDbits.LD3 = 0;
  2721  00165E  968C               	bcf	140,3,c	;volatile
  2722  001660  0012               	return		;funcret
  2723  001662                     __end_of_lcd_write_char:
  2724                           	callstack 0
  2725                           
  2726 ;; *************** function _lcd_init *****************
  2727 ;; Defined at:
  2728 ;;		line 72 in file "./HeaderApp/lcd.h"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;		None
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;		None
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  1    wreg      void 
  2735 ;; Registers used:
  2736 ;;		wreg, status,2, cstack
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2742 ;;      Params:         0       0       0       0       0       0       0       0       0
  2743 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2744 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2745 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2746 ;;Total ram usage:        1 bytes
  2747 ;; Hardware stack levels used:    1
  2748 ;; Hardware stack levels required when called:    2
  2749 ;; This function calls:
  2750 ;;		_Lcd_Cmd
  2751 ;;		_Lcd_Port
  2752 ;; This function is called by:
  2753 ;;		_main
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text15
  2758  0012D2                     __ptext15:
  2759                           	callstack 0
  2760  0012D2                     _lcd_init:
  2761                           	callstack 28
  2762  0012D2                     
  2763                           ;./HeaderApp/lcd.h: 74:   Lcd_Port(0x00);
  2764  0012D2  0E00               	movlw	0
  2765  0012D4  EC06  F00A         	call	_Lcd_Port
  2766  0012D8                     
  2767                           ;./HeaderApp/lcd.h: 75:    _delay((unsigned long)((20)*(12000000/4000.0)));
  2768  0012D8  0E4E               	movlw	78
  2769  0012DA  6E04               	movwf	??_lcd_init^0,c
  2770  0012DC  0EEB               	movlw	235
  2771  0012DE                     u1187:
  2772  0012DE  2EE8               	decfsz	wreg,f,c
  2773  0012E0  D7FE               	bra	u1187
  2774  0012E2  2E04               	decfsz	??_lcd_init^0,f,c
  2775  0012E4  D7FC               	bra	u1187
  2776  0012E6  F000               	nop	
  2777  0012E8                     
  2778                           ;./HeaderApp/lcd.h: 76:   Lcd_Cmd(0x03);
  2779  0012E8  0E03               	movlw	3
  2780  0012EA  EC31  F00B         	call	_Lcd_Cmd
  2781  0012EE                     
  2782                           ;./HeaderApp/lcd.h: 77:    _delay((unsigned long)((5)*(12000000/4000.0)));
  2783  0012EE  0E14               	movlw	20
  2784  0012F0  6E04               	movwf	??_lcd_init^0,c
  2785  0012F2  0E7A               	movlw	122
  2786  0012F4                     u1197:
  2787  0012F4  2EE8               	decfsz	wreg,f,c
  2788  0012F6  D7FE               	bra	u1197
  2789  0012F8  2E04               	decfsz	??_lcd_init^0,f,c
  2790  0012FA  D7FC               	bra	u1197
  2791  0012FC                     
  2792                           ;./HeaderApp/lcd.h: 78:   Lcd_Cmd(0x03);
  2793  0012FC  0E03               	movlw	3
  2794  0012FE  EC31  F00B         	call	_Lcd_Cmd
  2795  001302                     
  2796                           ;./HeaderApp/lcd.h: 79:    _delay((unsigned long)((11)*(12000000/4000.0)));
  2797  001302  0E2B               	movlw	43
  2798  001304  6E04               	movwf	??_lcd_init^0,c
  2799  001306  0EDA               	movlw	218
  2800  001308                     u1207:
  2801  001308  2EE8               	decfsz	wreg,f,c
  2802  00130A  D7FE               	bra	u1207
  2803  00130C  2E04               	decfsz	??_lcd_init^0,f,c
  2804  00130E  D7FC               	bra	u1207
  2805  001310  D000               	nop2	
  2806  001312                     
  2807                           ;./HeaderApp/lcd.h: 80:   Lcd_Cmd(0x03);
  2808  001312  0E03               	movlw	3
  2809  001314  EC31  F00B         	call	_Lcd_Cmd
  2810  001318                     
  2811                           ;./HeaderApp/lcd.h: 82:   Lcd_Cmd(0x02);
  2812  001318  0E02               	movlw	2
  2813  00131A  EC31  F00B         	call	_Lcd_Cmd
  2814  00131E                     
  2815                           ;./HeaderApp/lcd.h: 83:   Lcd_Cmd(0x02);
  2816  00131E  0E02               	movlw	2
  2817  001320  EC31  F00B         	call	_Lcd_Cmd
  2818  001324                     
  2819                           ;./HeaderApp/lcd.h: 84:   Lcd_Cmd(0x08);
  2820  001324  0E08               	movlw	8
  2821  001326  EC31  F00B         	call	_Lcd_Cmd
  2822  00132A                     
  2823                           ;./HeaderApp/lcd.h: 85:   Lcd_Cmd(0x00);
  2824  00132A  0E00               	movlw	0
  2825  00132C  EC31  F00B         	call	_Lcd_Cmd
  2826  001330                     
  2827                           ;./HeaderApp/lcd.h: 86:   Lcd_Cmd(0x0C);
  2828  001330  0E0C               	movlw	12
  2829  001332  EC31  F00B         	call	_Lcd_Cmd
  2830  001336                     
  2831                           ;./HeaderApp/lcd.h: 87:   Lcd_Cmd(0x00);
  2832  001336  0E00               	movlw	0
  2833  001338  EC31  F00B         	call	_Lcd_Cmd
  2834  00133C                     
  2835                           ;./HeaderApp/lcd.h: 88:   Lcd_Cmd(0x06);
  2836  00133C  0E06               	movlw	6
  2837  00133E  EC31  F00B         	call	_Lcd_Cmd
  2838  001342  0012               	return		;funcret
  2839  001344                     __end_of_lcd_init:
  2840                           	callstack 0
  2841                           
  2842 ;; *************** function _lcd_gotoxy *****************
  2843 ;; Defined at:
  2844 ;;		line 51 in file "./HeaderApp/lcd.h"
  2845 ;; Parameters:    Size  Location     Type
  2846 ;;  a               1    wreg     unsigned char 
  2847 ;;  b               1    3[COMRAM] unsigned char 
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;  a               1    4[COMRAM] unsigned char 
  2850 ;;  temp            1    7[COMRAM] unsigned char 
  2851 ;;  y               1    6[COMRAM] unsigned char 
  2852 ;;  z               1    5[COMRAM] unsigned char 
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  1    wreg      void 
  2855 ;; Registers used:
  2856 ;;		wreg, status,2, status,0, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2862 ;;      Params:         1       0       0       0       0       0       0       0       0
  2863 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2864 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2865 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2866 ;;Total ram usage:        5 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:    2
  2869 ;; This function calls:
  2870 ;;		_Lcd_Cmd
  2871 ;; This function is called by:
  2872 ;;		_main
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text16
  2877  001344                     __ptext16:
  2878                           	callstack 0
  2879  001344                     _lcd_gotoxy:
  2880                           	callstack 28
  2881                           
  2882                           ;incstack = 0
  2883                           ;lcd_gotoxy@a stored from wreg
  2884  001344  6E05               	movwf	lcd_gotoxy@a^0,c
  2885  001346                     
  2886                           ;./HeaderApp/lcd.h: 51: void lcd_gotoxy(char a, char b);./HeaderApp/lcd.h: 52: {;./Heade
      +                          rApp/lcd.h: 53:    char temp,z,y;;./HeaderApp/lcd.h: 54:    if(a == 1)
  2887  001346  0405               	decf	lcd_gotoxy@a^0,w,c
  2888  001348  A4D8               	btfss	status,2,c
  2889  00134A  EFA9  F009         	goto	u1081
  2890  00134E  EFAB  F009         	goto	u1080
  2891  001352                     u1081:
  2892  001352  EFBC  F009         	goto	l1688
  2893  001356                     u1080:
  2894  001356                     
  2895                           ;./HeaderApp/lcd.h: 55:    {;./HeaderApp/lcd.h: 56:      temp = 0x80 + b - 1;
  2896  001356  5004               	movf	lcd_gotoxy@b^0,w,c
  2897  001358  0F7F               	addlw	127
  2898  00135A  6E08               	movwf	lcd_gotoxy@temp^0,c
  2899                           
  2900                           ;./HeaderApp/lcd.h: 57:       z = temp>>4;
  2901  00135C  3808               	swapf	lcd_gotoxy@temp^0,w,c
  2902  00135E  0B0F               	andlw	15
  2903  001360  6E06               	movwf	lcd_gotoxy@z^0,c
  2904                           
  2905                           ;./HeaderApp/lcd.h: 58:       y = temp & 0x0F;
  2906  001362  5008               	movf	lcd_gotoxy@temp^0,w,c
  2907  001364  0B0F               	andlw	15
  2908  001366  6E07               	movwf	lcd_gotoxy@y^0,c
  2909  001368                     
  2910                           ;./HeaderApp/lcd.h: 59:       Lcd_Cmd(z);
  2911  001368  5006               	movf	lcd_gotoxy@z^0,w,c
  2912  00136A  EC31  F00B         	call	_Lcd_Cmd
  2913  00136E                     
  2914                           ;./HeaderApp/lcd.h: 60:       Lcd_Cmd(y);
  2915  00136E  5007               	movf	lcd_gotoxy@y^0,w,c
  2916  001370  EC31  F00B         	call	_Lcd_Cmd
  2917                           
  2918                           ;./HeaderApp/lcd.h: 61:    }
  2919  001374  EFD4  F009         	goto	l58
  2920  001378                     l1688:
  2921  001378  0E02               	movlw	2
  2922  00137A  1805               	xorwf	lcd_gotoxy@a^0,w,c
  2923  00137C  A4D8               	btfss	status,2,c
  2924  00137E  EFC3  F009         	goto	u1091
  2925  001382  EFC5  F009         	goto	u1090
  2926  001386                     u1091:
  2927  001386  EFD4  F009         	goto	l58
  2928  00138A                     u1090:
  2929  00138A                     
  2930                           ;./HeaderApp/lcd.h: 63:    {;./HeaderApp/lcd.h: 64:       temp = 0xC0 + b - 1;
  2931  00138A  5004               	movf	lcd_gotoxy@b^0,w,c
  2932  00138C  0FBF               	addlw	191
  2933  00138E  6E08               	movwf	lcd_gotoxy@temp^0,c
  2934                           
  2935                           ;./HeaderApp/lcd.h: 65:       z = temp>>4;
  2936  001390  3808               	swapf	lcd_gotoxy@temp^0,w,c
  2937  001392  0B0F               	andlw	15
  2938  001394  6E06               	movwf	lcd_gotoxy@z^0,c
  2939                           
  2940                           ;./HeaderApp/lcd.h: 66:       y = temp & 0x0F;
  2941  001396  5008               	movf	lcd_gotoxy@temp^0,w,c
  2942  001398  0B0F               	andlw	15
  2943  00139A  6E07               	movwf	lcd_gotoxy@y^0,c
  2944  00139C                     
  2945                           ;./HeaderApp/lcd.h: 67:       Lcd_Cmd(z);
  2946  00139C  5006               	movf	lcd_gotoxy@z^0,w,c
  2947  00139E  EC31  F00B         	call	_Lcd_Cmd
  2948  0013A2                     
  2949                           ;./HeaderApp/lcd.h: 68:       Lcd_Cmd(y);
  2950  0013A2  5007               	movf	lcd_gotoxy@y^0,w,c
  2951  0013A4  EC31  F00B         	call	_Lcd_Cmd
  2952  0013A8                     l58:
  2953  0013A8  0012               	return		;funcret
  2954  0013AA                     __end_of_lcd_gotoxy:
  2955                           	callstack 0
  2956                           
  2957 ;; *************** function _lcd_clear *****************
  2958 ;; Defined at:
  2959 ;;		line 45 in file "./HeaderApp/lcd.h"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;		None
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;		None
  2964 ;; Return value:  Size  Location     Type
  2965 ;;                  1    wreg      void 
  2966 ;; Registers used:
  2967 ;;		wreg, status,2, cstack
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2973 ;;      Params:         0       0       0       0       0       0       0       0       0
  2974 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2975 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2976 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2977 ;;Total ram usage:        0 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    2
  2980 ;; This function calls:
  2981 ;;		_Lcd_Cmd
  2982 ;; This function is called by:
  2983 ;;		_main
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           	psect	text17
  2988  001682                     __ptext17:
  2989                           	callstack 0
  2990  001682                     _lcd_clear:
  2991                           	callstack 28
  2992  001682                     
  2993                           ;./HeaderApp/lcd.h: 47:    Lcd_Cmd(0);
  2994  001682  0E00               	movlw	0
  2995  001684  EC31  F00B         	call	_Lcd_Cmd
  2996                           
  2997                           ;./HeaderApp/lcd.h: 48:    Lcd_Cmd(1);
  2998  001688  0E01               	movlw	1
  2999  00168A  EC31  F00B         	call	_Lcd_Cmd
  3000  00168E  0012               	return		;funcret
  3001  001690                     __end_of_lcd_clear:
  3002                           	callstack 0
  3003                           
  3004 ;; *************** function _Lcd_Cmd *****************
  3005 ;; Defined at:
  3006 ;;		line 36 in file "./HeaderApp/lcd.h"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  a               1    wreg     unsigned char 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  a               1    2[COMRAM] unsigned char 
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  1    wreg      void 
  3013 ;; Registers used:
  3014 ;;		wreg, status,2, cstack
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3020 ;;      Params:         0       0       0       0       0       0       0       0       0
  3021 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3022 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3023 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3024 ;;Total ram usage:        2 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    1
  3027 ;; This function calls:
  3028 ;;		_Lcd_Port
  3029 ;; This function is called by:
  3030 ;;		_lcd_clear
  3031 ;;		_lcd_gotoxy
  3032 ;;		_lcd_init
  3033 ;;		_lcd_shift_right
  3034 ;;		_lcd_shift_left
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           	psect	text18
  3039  001662                     __ptext18:
  3040                           	callstack 0
  3041  001662                     _Lcd_Cmd:
  3042                           	callstack 28
  3043                           
  3044                           ;incstack = 0
  3045                           ;Lcd_Cmd@a stored from wreg
  3046  001662  6E03               	movwf	Lcd_Cmd@a^0,c
  3047  001664                     
  3048                           ;./HeaderApp/lcd.h: 36: void Lcd_Cmd(char a);./HeaderApp/lcd.h: 37: {;./HeaderApp/lcd.h:
      +                           38:    LATDbits.LD2 = 0;
  3049  001664  948C               	bcf	140,2,c	;volatile
  3050  001666                     
  3051                           ;./HeaderApp/lcd.h: 39:    Lcd_Port(a);
  3052  001666  5003               	movf	Lcd_Cmd@a^0,w,c
  3053  001668  EC06  F00A         	call	_Lcd_Port
  3054  00166C                     
  3055                           ;./HeaderApp/lcd.h: 40:    LATDbits.LD3 = 1;
  3056  00166C  868C               	bsf	140,3,c	;volatile
  3057  00166E                     
  3058                           ;./HeaderApp/lcd.h: 41:         _delay((unsigned long)((4)*(12000000/4000.0)));
  3059  00166E  0E10               	movlw	16
  3060  001670  6E02               	movwf	??_Lcd_Cmd^0,c
  3061  001672  0E94               	movlw	148
  3062  001674                     u1217:
  3063  001674  2EE8               	decfsz	wreg,f,c
  3064  001676  D7FE               	bra	u1217
  3065  001678  2E02               	decfsz	??_Lcd_Cmd^0,f,c
  3066  00167A  D7FC               	bra	u1217
  3067  00167C  D000               	nop2	
  3068  00167E                     
  3069                           ;./HeaderApp/lcd.h: 42:         LATDbits.LD3 = 0;
  3070  00167E  968C               	bcf	140,3,c	;volatile
  3071  001680  0012               	return		;funcret
  3072  001682                     __end_of_Lcd_Cmd:
  3073                           	callstack 0
  3074                           
  3075 ;; *************** function _Lcd_Port *****************
  3076 ;; Defined at:
  3077 ;;		line 14 in file "./HeaderApp/lcd.h"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  a               1    wreg     unsigned char 
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  a               1    0[COMRAM] unsigned char 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  1    wreg      void 
  3084 ;; Registers used:
  3085 ;;		wreg
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3091 ;;      Params:         0       0       0       0       0       0       0       0       0
  3092 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3093 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3094 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3095 ;;Total ram usage:        1 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; This function calls:
  3098 ;;		Nothing
  3099 ;; This function is called by:
  3100 ;;		_Lcd_Cmd
  3101 ;;		_lcd_init
  3102 ;;		_lcd_write_char
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           	psect	text19
  3107  00140C                     __ptext19:
  3108                           	callstack 0
  3109  00140C                     _Lcd_Port:
  3110                           	callstack 28
  3111                           
  3112                           ;incstack = 0
  3113                           ;Lcd_Port@a stored from wreg
  3114  00140C  6E01               	movwf	Lcd_Port@a^0,c
  3115  00140E                     
  3116                           ;./HeaderApp/lcd.h: 14: void Lcd_Port(char a);./HeaderApp/lcd.h: 15: {;./HeaderApp/lcd.h
      +                          : 16:    if(a & 1)
  3117  00140E  A001               	btfss	Lcd_Port@a^0,0,c
  3118  001410  EF0C  F00A         	goto	u971
  3119  001414  EF0E  F00A         	goto	u970
  3120  001418                     u971:
  3121  001418  EF11  F00A         	goto	l38
  3122  00141C                     u970:
  3123  00141C                     
  3124                           ;./HeaderApp/lcd.h: 17:       LATDbits.LD4 = 1;
  3125  00141C  888C               	bsf	140,4,c	;volatile
  3126  00141E  EF12  F00A         	goto	l1564
  3127  001422                     l38:
  3128                           
  3129                           ;./HeaderApp/lcd.h: 19:       LATDbits.LD4 = 0;
  3130  001422  988C               	bcf	140,4,c	;volatile
  3131  001424                     l1564:
  3132                           
  3133                           ;./HeaderApp/lcd.h: 21:    if(a & 2)
  3134  001424  A201               	btfss	Lcd_Port@a^0,1,c
  3135  001426  EF17  F00A         	goto	u981
  3136  00142A  EF19  F00A         	goto	u980
  3137  00142E                     u981:
  3138  00142E  EF1C  F00A         	goto	l40
  3139  001432                     u980:
  3140  001432                     
  3141                           ;./HeaderApp/lcd.h: 22:       LATDbits.LD5 = 1;
  3142  001432  8A8C               	bsf	140,5,c	;volatile
  3143  001434  EF1D  F00A         	goto	l1568
  3144  001438                     l40:
  3145                           
  3146                           ;./HeaderApp/lcd.h: 24:       LATDbits.LD5 = 0;
  3147  001438  9A8C               	bcf	140,5,c	;volatile
  3148  00143A                     l1568:
  3149                           
  3150                           ;./HeaderApp/lcd.h: 26:    if(a & 4)
  3151  00143A  A401               	btfss	Lcd_Port@a^0,2,c
  3152  00143C  EF22  F00A         	goto	u991
  3153  001440  EF24  F00A         	goto	u990
  3154  001444                     u991:
  3155  001444  EF27  F00A         	goto	l42
  3156  001448                     u990:
  3157  001448                     
  3158                           ;./HeaderApp/lcd.h: 27:       LATDbits.LD6 = 1;
  3159  001448  8C8C               	bsf	140,6,c	;volatile
  3160  00144A  EF28  F00A         	goto	l1572
  3161  00144E                     l42:
  3162                           
  3163                           ;./HeaderApp/lcd.h: 29:       LATDbits.LD6 = 0;
  3164  00144E  9C8C               	bcf	140,6,c	;volatile
  3165  001450                     l1572:
  3166                           
  3167                           ;./HeaderApp/lcd.h: 31:    if(a & 8)
  3168  001450  A601               	btfss	Lcd_Port@a^0,3,c
  3169  001452  EF2D  F00A         	goto	u1001
  3170  001456  EF2F  F00A         	goto	u1000
  3171  00145A                     u1001:
  3172  00145A  EF32  F00A         	goto	l44
  3173  00145E                     u1000:
  3174  00145E                     
  3175                           ;./HeaderApp/lcd.h: 32:       LATDbits.LD7 = 1;
  3176  00145E  8E8C               	bsf	140,7,c	;volatile
  3177  001460  EF33  F00A         	goto	l46
  3178  001464                     l44:
  3179                           
  3180                           ;./HeaderApp/lcd.h: 34:       LATDbits.LD7 = 0;
  3181  001464  9E8C               	bcf	140,7,c	;volatile
  3182  001466                     l46:
  3183  001466  0012               	return		;funcret
  3184  001468                     __end_of_Lcd_Port:
  3185                           	callstack 0
  3186                           
  3187 ;; *************** function _adcInit *****************
  3188 ;; Defined at:
  3189 ;;		line 11 in file "adc.c"
  3190 ;; Parameters:    Size  Location     Type
  3191 ;;  ADC_PINs        1    wreg     unsigned char 
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;  ADC_PINs        1    1[COMRAM] unsigned char 
  3194 ;; Return value:  Size  Location     Type
  3195 ;;                  1    wreg      void 
  3196 ;; Registers used:
  3197 ;;		wreg, status,2, status,0
  3198 ;; Tracked objects:
  3199 ;;		On entry : 0/0
  3200 ;;		On exit  : 0/0
  3201 ;;		Unchanged: 0/0
  3202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3203 ;;      Params:         0       0       0       0       0       0       0       0       0
  3204 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3205 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3206 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3207 ;;Total ram usage:        2 bytes
  3208 ;; Hardware stack levels used:    1
  3209 ;; This function calls:
  3210 ;;		Nothing
  3211 ;; This function is called by:
  3212 ;;		_main
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text20
  3217  0014BA                     __ptext20:
  3218                           	callstack 0
  3219  0014BA                     _adcInit:
  3220                           	callstack 30
  3221                           
  3222                           ;incstack = 0
  3223                           ;adcInit@ADC_PINs stored from wreg
  3224  0014BA  6E02               	movwf	adcInit@ADC_PINs^0,c
  3225  0014BC                     
  3226                           ;adc.c: 11: void adcInit(uint8_t ADC_PINs);adc.c: 12: {;adc.c: 14:     if(ADC_PINs == 0)
  3227  0014BC  5002               	movf	adcInit@ADC_PINs^0,w,c
  3228  0014BE  A4D8               	btfss	status,2,c
  3229  0014C0  EF64  F00A         	goto	u1061
  3230  0014C4  EF66  F00A         	goto	u1060
  3231  0014C8                     u1061:
  3232  0014C8  EF6C  F00A         	goto	l1660
  3233  0014CC                     u1060:
  3234  0014CC                     
  3235                           ;adc.c: 15:     {;adc.c: 16:         ADCON1bits.PCFG = 0b1110;
  3236  0014CC  50C1               	movf	193,w,c	;volatile
  3237  0014CE  0BF0               	andlw	-16
  3238  0014D0  090E               	iorlw	14
  3239  0014D2  6EC1               	movwf	193,c	;volatile
  3240                           
  3241                           ;adc.c: 17:     }
  3242  0014D4  EF74  F00A         	goto	l1662
  3243  0014D8                     l1660:
  3244                           
  3245                           ;adc.c: 19:     {;adc.c: 20:         ADCON1bits.PCFG = 15 - ADC_PINs;
  3246  0014D8  5002               	movf	adcInit@ADC_PINs^0,w,c
  3247  0014DA  080F               	sublw	15
  3248  0014DC  6E01               	movwf	??_adcInit^0,c
  3249  0014DE  50C1               	movf	193,w,c	;volatile
  3250  0014E0  1801               	xorwf	??_adcInit^0,w,c
  3251  0014E2  0BF0               	andlw	-16
  3252  0014E4  1801               	xorwf	??_adcInit^0,w,c
  3253  0014E6  6EC1               	movwf	193,c	;volatile
  3254  0014E8                     l1662:
  3255                           
  3256                           ;adc.c: 26:     ADCON1bits.VCFG = 0b00;
  3257  0014E8  0ECF               	movlw	-49
  3258  0014EA  16C1               	andwf	193,f,c	;volatile
  3259  0014EC                     
  3260                           ;adc.c: 31:     ADCON2bits.ACQT = 0b010;
  3261  0014EC  50C0               	movf	192,w,c	;volatile
  3262  0014EE  0BC7               	andlw	-57
  3263  0014F0  0910               	iorlw	16
  3264  0014F2  6EC0               	movwf	192,c	;volatile
  3265  0014F4                     
  3266                           ;adc.c: 36:     ADCON2bits.ADCS = 3;
  3267  0014F4  50C0               	movf	192,w,c	;volatile
  3268  0014F6  0BF8               	andlw	-8
  3269  0014F8  0903               	iorlw	3
  3270  0014FA  6EC0               	movwf	192,c	;volatile
  3271  0014FC                     
  3272                           ;adc.c: 39:     ADCON2bits.ADFM = 1;
  3273  0014FC  8EC0               	bsf	192,7,c	;volatile
  3274  0014FE                     
  3275                           ;adc.c: 40:     ADCON0bits.ADON = 1;
  3276  0014FE  80C2               	bsf	194,0,c	;volatile
  3277  001500  0012               	return		;funcret
  3278  001502                     __end_of_adcInit:
  3279                           	callstack 0
  3280                           
  3281 ;; *************** function _adcGetValue *****************
  3282 ;; Defined at:
  3283 ;;		line 43 in file "adc.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;  PinADC          1    wreg     unsigned char 
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;  PinADC          1    3[COMRAM] unsigned char 
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  2    0[COMRAM] unsigned short 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2, status,0
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3297 ;;      Params:         2       0       0       0       0       0       0       0       0
  3298 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3299 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3300 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3301 ;;Total ram usage:        4 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; This function calls:
  3304 ;;		Nothing
  3305 ;; This function is called by:
  3306 ;;		_main
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           	psect	text21
  3311  001586                     __ptext21:
  3312                           	callstack 0
  3313  001586                     _adcGetValue:
  3314                           	callstack 30
  3315                           
  3316                           ;incstack = 0
  3317                           ;adcGetValue@PinADC stored from wreg
  3318  001586  6E04               	movwf	adcGetValue@PinADC^0,c
  3319  001588                     
  3320                           ;adc.c: 43: uint16_t adcGetValue(uint8_t PinADC);adc.c: 44: {;adc.c: 45:     ADCON0bits.
      +                          CHS = PinADC;
  3321  001588  C004  F003         	movff	adcGetValue@PinADC,??_adcGetValue
  3322  00158C  4603               	rlncf	??_adcGetValue^0,f,c
  3323  00158E  4603               	rlncf	??_adcGetValue^0,f,c
  3324  001590  50C2               	movf	194,w,c	;volatile
  3325  001592  1803               	xorwf	??_adcGetValue^0,w,c
  3326  001594  0BC3               	andlw	-61
  3327  001596  1803               	xorwf	??_adcGetValue^0,w,c
  3328  001598  6EC2               	movwf	194,c	;volatile
  3329  00159A                     
  3330                           ;adc.c: 46:     _delay((unsigned long)((2)*(12000000/4000.0)));
  3331  00159A  0E08               	movlw	8
  3332  00159C  6E03               	movwf	??_adcGetValue^0,c
  3333  00159E  0ECA               	movlw	202
  3334  0015A0                     u1227:
  3335  0015A0  2EE8               	decfsz	wreg,f,c
  3336  0015A2  D7FE               	bra	u1227
  3337  0015A4  2E03               	decfsz	??_adcGetValue^0,f,c
  3338  0015A6  D7FC               	bra	u1227
  3339  0015A8                     
  3340                           ;adc.c: 47:     GO_nDONE = 1;
  3341  0015A8  82C2               	bsf	4034,1,c	;volatile
  3342  0015AA                     l20:
  3343                           
  3344                           ;adc.c: 48:     while(ADCON0bits.GO_DONE)
  3345  0015AA  B2C2               	btfsc	194,1,c	;volatile
  3346  0015AC  EFDA  F00A         	goto	u1071
  3347  0015B0  EFDC  F00A         	goto	u1070
  3348  0015B4                     u1071:
  3349  0015B4  EFD5  F00A         	goto	l20
  3350  0015B8                     u1070:
  3351  0015B8                     
  3352                           ;adc.c: 51:     return ADRES;
  3353  0015B8  CFC3 F001          	movff	4035,?_adcGetValue	;volatile
  3354  0015BC  CFC4 F002          	movff	4036,?_adcGetValue+1	;volatile
  3355  0015C0  0012               	return		;funcret
  3356  0015C2                     __end_of_adcGetValue:
  3357                           	callstack 0
  3358                           
  3359                           	psect	rparam
  3360  0000                     
  3361                           	psect	idloc
  3362                           
  3363                           ;Config register IDLOC0 @ 0x200000
  3364                           ;	unspecified, using default values
  3365  200000                     	org	2097152
  3366  200000  FF                 	db	255
  3367                           
  3368                           ;Config register IDLOC1 @ 0x200001
  3369                           ;	unspecified, using default values
  3370  200001                     	org	2097153
  3371  200001  FF                 	db	255
  3372                           
  3373                           ;Config register IDLOC2 @ 0x200002
  3374                           ;	unspecified, using default values
  3375  200002                     	org	2097154
  3376  200002  FF                 	db	255
  3377                           
  3378                           ;Config register IDLOC3 @ 0x200003
  3379                           ;	unspecified, using default values
  3380  200003                     	org	2097155
  3381  200003  FF                 	db	255
  3382                           
  3383                           ;Config register IDLOC4 @ 0x200004
  3384                           ;	unspecified, using default values
  3385  200004                     	org	2097156
  3386  200004  FF                 	db	255
  3387                           
  3388                           ;Config register IDLOC5 @ 0x200005
  3389                           ;	unspecified, using default values
  3390  200005                     	org	2097157
  3391  200005  FF                 	db	255
  3392                           
  3393                           ;Config register IDLOC6 @ 0x200006
  3394                           ;	unspecified, using default values
  3395  200006                     	org	2097158
  3396  200006  FF                 	db	255
  3397                           
  3398                           ;Config register IDLOC7 @ 0x200007
  3399                           ;	unspecified, using default values
  3400  200007                     	org	2097159
  3401  200007  FF                 	db	255
  3402                           
  3403                           	psect	config
  3404                           
  3405                           ;Config register CONFIG1L @ 0x300000
  3406                           ;	PLL Prescaler Selection bits
  3407                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  3408                           ;	System Clock Postscaler Selection bits
  3409                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  3410                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3411                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  3412  300000                     	org	3145728
  3413  300000  00                 	db	0
  3414                           
  3415                           ;Config register CONFIG1H @ 0x300001
  3416                           ;	Oscillator Selection bits
  3417                           ;	FOSC = HS, HS oscillator (HS)
  3418                           ;	Fail-Safe Clock Monitor Enable bit
  3419                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3420                           ;	Internal/External Oscillator Switchover bit
  3421                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3422  300001                     	org	3145729
  3423  300001  0C                 	db	12
  3424                           
  3425                           ;Config register CONFIG2L @ 0x300002
  3426                           ;	Power-up Timer Enable bit
  3427                           ;	PWRT = OFF, PWRT disabled
  3428                           ;	Brown-out Reset Enable bits
  3429                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3430                           ;	Brown-out Reset Voltage bits
  3431                           ;	BORV = 3, Minimum setting 2.05V
  3432                           ;	USB Voltage Regulator Enable bit
  3433                           ;	VREGEN = OFF, USB voltage regulator disabled
  3434  300002                     	org	3145730
  3435  300002  19                 	db	25
  3436                           
  3437                           ;Config register CONFIG2H @ 0x300003
  3438                           ;	Watchdog Timer Enable bit
  3439                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3440                           ;	Watchdog Timer Postscale Select bits
  3441                           ;	WDTPS = 32768, 1:32768
  3442  300003                     	org	3145731
  3443  300003  1E                 	db	30
  3444                           
  3445                           ; Padding undefined space
  3446  300004                     	org	3145732
  3447  300004  FF                 	db	255
  3448                           
  3449                           ;Config register CONFIG3H @ 0x300005
  3450                           ;	CCP2 MUX bit
  3451                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  3452                           ;	PORTB A/D Enable bit
  3453                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3454                           ;	Low-Power Timer 1 Oscillator Enable bit
  3455                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3456                           ;	MCLR Pin Enable bit
  3457                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3458  300005                     	org	3145733
  3459  300005  81                 	db	129
  3460                           
  3461                           ;Config register CONFIG4L @ 0x300006
  3462                           ;	Stack Full/Underflow Reset Enable bit
  3463                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3464                           ;	Single-Supply ICSP Enable bit
  3465                           ;	LVP = OFF, Single-Supply ICSP disabled
  3466                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3467                           ;	ICPRT = OFF, ICPORT disabled
  3468                           ;	Extended Instruction Set Enable bit
  3469                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3470                           ;	Background Debugger Enable bit
  3471                           ;	DEBUG = 0x1, unprogrammed default
  3472  300006                     	org	3145734
  3473  300006  81                 	db	129
  3474                           
  3475                           ; Padding undefined space
  3476  300007                     	org	3145735
  3477  300007  FF                 	db	255
  3478                           
  3479                           ;Config register CONFIG5L @ 0x300008
  3480                           ;	Code Protection bit
  3481                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  3482                           ;	Code Protection bit
  3483                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  3484                           ;	Code Protection bit
  3485                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  3486                           ;	Code Protection bit
  3487                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  3488  300008                     	org	3145736
  3489  300008  0F                 	db	15
  3490                           
  3491                           ;Config register CONFIG5H @ 0x300009
  3492                           ;	Boot Block Code Protection bit
  3493                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  3494                           ;	Data EEPROM Code Protection bit
  3495                           ;	CPD = OFF, Data EEPROM is not code-protected
  3496  300009                     	org	3145737
  3497  300009  C0                 	db	192
  3498                           
  3499                           ;Config register CONFIG6L @ 0x30000A
  3500                           ;	Write Protection bit
  3501                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  3502                           ;	Write Protection bit
  3503                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  3504                           ;	Write Protection bit
  3505                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  3506                           ;	Write Protection bit
  3507                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  3508  30000A                     	org	3145738
  3509  30000A  0F                 	db	15
  3510                           
  3511                           ;Config register CONFIG6H @ 0x30000B
  3512                           ;	Configuration Register Write Protection bit
  3513                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3514                           ;	Boot Block Write Protection bit
  3515                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  3516                           ;	Data EEPROM Write Protection bit
  3517                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3518  30000B                     	org	3145739
  3519  30000B  E0                 	db	224
  3520                           
  3521                           ;Config register CONFIG7L @ 0x30000C
  3522                           ;	Table Read Protection bit
  3523                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3524                           ;	Table Read Protection bit
  3525                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3526                           ;	Table Read Protection bit
  3527                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3528                           ;	Table Read Protection bit
  3529                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3530  30000C                     	org	3145740
  3531  30000C  0F                 	db	15
  3532                           
  3533                           ;Config register CONFIG7H @ 0x30000D
  3534                           ;	Boot Block Table Read Protection bit
  3535                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  3536  30000D                     	org	3145741
  3537  30000D  40                 	db	64
  3538                           tosu	equ	0xFFF
  3539                           tosh	equ	0xFFE
  3540                           tosl	equ	0xFFD
  3541                           stkptr	equ	0xFFC
  3542                           pclatu	equ	0xFFB
  3543                           pclath	equ	0xFFA
  3544                           pcl	equ	0xFF9
  3545                           tblptru	equ	0xFF8
  3546                           tblptrh	equ	0xFF7
  3547                           tblptrl	equ	0xFF6
  3548                           tablat	equ	0xFF5
  3549                           prodh	equ	0xFF4
  3550                           prodl	equ	0xFF3
  3551                           indf0	equ	0xFEF
  3552                           postinc0	equ	0xFEE
  3553                           postdec0	equ	0xFED
  3554                           preinc0	equ	0xFEC
  3555                           plusw0	equ	0xFEB
  3556                           fsr0h	equ	0xFEA
  3557                           fsr0l	equ	0xFE9
  3558                           wreg	equ	0xFE8
  3559                           indf1	equ	0xFE7
  3560                           postinc1	equ	0xFE6
  3561                           postdec1	equ	0xFE5
  3562                           preinc1	equ	0xFE4
  3563                           plusw1	equ	0xFE3
  3564                           fsr1h	equ	0xFE2
  3565                           fsr1l	equ	0xFE1
  3566                           bsr	equ	0xFE0
  3567                           indf2	equ	0xFDF
  3568                           postinc2	equ	0xFDE
  3569                           postdec2	equ	0xFDD
  3570                           preinc2	equ	0xFDC
  3571                           plusw2	equ	0xFDB
  3572                           fsr2h	equ	0xFDA
  3573                           fsr2l	equ	0xFD9
  3574                           status	equ	0xFD8

Data Sizes:
    Strings     48
    Constant    0
    Data        6
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     10      76
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> buffer_lcd(BANK0[20]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[8]), STR_3(CODE[8]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[8]), STR_3(CODE[8]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[8]), STR_3(CODE[8]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 20
		 -> buffer_lcd(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S776_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> buffer_lcd(BANK0[20]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> buffer_lcd(BANK0[20]), 

    lcd_putc@a	PTR unsigned char  size(2) Largest target is 20
		 -> buffer_lcd(BANK0[20]), STR_2(CODE[16]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _lcd_putc->_lcd_write_char
    _lcd_write_char->_Lcd_Port
    _lcd_init->_Lcd_Cmd
    _lcd_gotoxy->_Lcd_Cmd
    _lcd_clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8238
                                             93 COMRAM     2     2      0
                        _adcGetValue
                            _adcInit
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_putc
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6608
                                             87 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _lcd_putc                                             6     4      2     572
                                              4 COMRAM     6     4      2
                     _lcd_write_char
 ---------------------------------------------------------------------------------
 (2) _lcd_write_char                                       3     3      0     178
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     198
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           5     4      1     684
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              2     2      0      44
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _adcGetValue                                          4     2      2      22
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adcGetValue
   _adcInit
   _lcd_clear
     _Lcd_Cmd
       _Lcd_Port
   _lcd_gotoxy
     _Lcd_Cmd
       _Lcd_Port
   _lcd_init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _lcd_putc
     _lcd_write_char
       _Lcd_Port
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A      4C       5       47.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AB      20        0.0%
DATA                 0      0      AB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed May 26 22:54:00 2021

                     l20 15AA                       l22 15B8                       l23 15C0  
                     l40 1438                       l17 1500                       l42 144E  
                     l44 1464                       l52 168E                       l61 1342  
                     l46 1466                       l38 1422                       l70 12D0  
                     l64 1660                       l49 1680                       l58 13A8  
                    l234 0E4E                      l247 0FB2                      l900 1696  
                    l830 1252                      l825 11D4                      l906 162C  
                    l828 1216                      l836 08D2                      l838 08DA  
                    l870 140A                      l863 0CC6                      l856 0B12  
                    l874 157C                      l877 1584                      l869 1402  
                    l798 14B8                      l889 118C                      l897 1544  
        adcInit@ADC_PINs 0002                      u600 1110                      u601 110C  
                    u610 1146                      u611 1142                      u700 0E0E  
                    u620 1544                      u701 0E0A                      u621 1540  
                    u710 0E62                      u630 1620                      u711 0E5E  
                    u631 161C                      u640 0CDA                      u720 0E94  
                    u800 1226                      u641 0CD6                      u721 0E90  
                    u801 1222                      u650 0D0C                      u730 0ED2  
                    u810 1560                      u651 0D08                      u731 0ECE  
                    u811 155C                      u740 0EFC                      u580 10D6  
                    u900 0A48                      u820 0862                      u661 0D36  
                    u741 0EF8                      u581 10D2                      u901 0A44  
                    u821 085C                      u670 0D5A                      u750 0F2A  
                    u590 10E8                      u910 0A62                      u830 0864  
                    u671 0D56                      u751 0F26                      u591 10E4  
                    u911 0A5E                      u680 0D84                      u760 0F72  
                    u920 0A7C                      u840 087A                      u681 0D80  
                    u761 0F6E                      u921 0A78                      u841 0876  
                    u690 0DC4                      u770 119E                      u930 0A8C  
                    u850 08AA                      u691 0DC0                      u771 119A  
                    u931 0A88                      u851 08A6                      u780 11C0  
                    u940 0A9E                      u860 08C6                      u781 11BC  
                    u941 0A9A                      u861 08C2                      u790 1216  
                    u950 0AAE                      u870 08F4                      u791 1212  
                    u951 0AAA                      u871 08F0                      u960 0AC6  
                    u880 0902                      u961 0AC2                      u881 08FE  
                    u970 141C                      u890 0A2A                      u971 1418  
                    u891 0A26                      u980 1432                      u981 142E  
                    u990 1448                      u991 1444                      _abs 1546  
                    _pad 118E                      wreg 000FE8              lcd_gotoxy@a 0005  
            lcd_gotoxy@b 0004              lcd_gotoxy@y 0007              lcd_gotoxy@z 0006  
                   ?_abs 0013                     l1400 0CFE                     l1410 0D5A  
                   l1402 0D0C                     l1420 0DC4                     l1412 0D62  
                   l1404 0D2C                     l1500 0852                     l1430 0E0E  
                   l1422 0DE4                     l1414 0D76                     l1406 0D30  
                   l1510 08C6                     l1502 087A                     l1432 0E2E  
                   l1424 0DE6                     l1416 0D84                     l1408 0D3C  
                   l1440 0E62                     l1360 10C4                     l1520 0910  
                   l1512 08E2                     l1504 089A                     l1600 0C6A  
                   l1426 0DF8                     l1418 0D96                     l1450 0ED2  
                   l1442 0E82                     l1370 1146                     l1362 10D6  
                   l1530 09AC                     l1522 0918                     l1514 08F4  
                   l1506 08AA                     l1610 0C90                     l1620 1666  
                   l1700 12E8                     l1428 0DFE                     l1460 0F4A  
                   l1452 0EDA                     l1444 0E86                     l1436 0E50  
                   l1364 10E8                     l1380 1524                     l1540 0A7C  
                   l1524 091E                     l1532 0A10                     l1516 0902  
                   l1508 08AC                     l1612 0CB4                     l1604 0C76  
                   l1622 166C                     l1710 1318                     l1702 12EE  
                   l1630 163C                     l1462 0F5C                     l1454 0EEE  
                   l1446 0E94                     l1438 0E54                     l1366 10F2  
                   l1374 1502                     l1382 15F8                     l1550 0AC6  
                   l1534 0A2A                     l1542 0A8C                     l1526 09A0  
                   l1518 0908                     l1606 0C84                     l1560 140E  
                   l1624 166E                     l1720 1336                     l1712 131E  
                   l1704 12FC                     l1640 1650                     l1632 163E  
                   l1392 0CC8                     l1456 0EFC                     l1464 0F62  
                   l1448 0EB4                     l1368 1110                     l1376 150E  
                   l1384 1604                     l1480 11CC                     l1472 118E  
                   l1552 0AD2                     l1544 0A9E                     l1536 0A48  
                   l1528 09A6                     l1570 1448                     l1562 141C  
                   l1626 167E                     l1618 1664                     l1722 133C  
                   l1714 1324                     l1706 1302                     l1642 1656  
                   l1634 1646                     l1730 1294                     l1394 0CCC  
                   l1466 0F72                     l1458 0F2A                     l1378 1520  
                   l1386 1608                     l1490 123A                     l1482 11E0  
                   l1474 119E                     l1554 0ADA                     l1546 0AAE  
                   l1538 0A62                     l1650 13B2                     l1660 14D8  
                   l1572 1450                     l1564 1424                     l1716 132A  
                   l1708 1312                     l1644 1658                     l1636 1648  
                   l1628 1630                     l1724 1254                     l1396 0CDA  
                   l1468 0F92                     l1388 1620                     l1484 11F4  
                   l1476 11B2                     l1548 0AB4                     l1556 0AEA  
                   l1580 0B46                     l1652 13C0                     l1740 14A6  
                   l1732 1468                     l1670 14FE                     l1662 14E8  
                   l1574 145E                     l1566 1432                     l1718 1330  
                   l1646 165E                     l1638 164E                     l1726 1260  
                   l1398 0CFA                     l1494 1546                     l1486 11F8  
                   l1478 11C0                     l1590 0BEC                     l1582 0B58  
                   l1654 13E6                     l1734 147A                     l1750 0FB8  
                   l1672 1588                     l1664 14EC                     l1656 14BC  
                   l1568 143A                     l1680 1346                     l1728 1290  
                   l1496 1560                     l1488 1226                     l1584 0B5C  
                   l1576 0B14                     l1648 13AA                     l1736 1482  
                   l1760 0FDC                     l1752 0FBC                     l1674 159A  
                   l1666 14F4                     l1658 14CC                     l1690 138A  
                   l1682 1356                     l1498 0832                     l1594 0C24  
                   l1586 0B80                     l1578 0B38                     l1738 148A  
                   l1770 101A                     l1762 0FE6                     l1754 0FC2  
                   l1676 15A8                     l1668 14FC                     l1692 139C  
                   l1684 1368                     l1596 0C48                     l1588 0BA4  
                   l1780 1072                     l1772 1036                     l1764 0FF2  
                   l1756 0FC6                     l1748 0FB4                     l1678 1682  
                   l1694 13A2                     l1686 136E                     l1598 0C56  
                   l1782 108E                     l1774 1040                     l1766 1008  
                   l1758 0FD0                     l1688 1378                     l1696 12D2  
                   l1784 1098                     l1776 104C                     l1768 100C  
                   l1698 12D8                     l1786 10A4                     l1778 1064  
                   ?_pad 0011                     STR_1 0811                     STR_2 0801  
                   STR_3 0821                     STR_4 0829                     u1000 145E  
                   u1001 145A                     u1010 0B38                     u1011 0B34  
                   u1100 128C                     u1020 0B80                     u1021 0B7C  
                   u1110 12C0                     u1030 0BA4                     u1031 0BA0  
                   u1120 12D0                     u1040 0C48                     u1121 12CC  
                   u1041 0C44                     u1050 1402                     u1107 1282  
                   u1051 13FE                     u1060 14CC                     u1061 14C8  
                   u1117 12B6                     u1070 15B8                     u1071 15B4  
                   u1207 1308                     u1080 1356                     u1217 1674  
                   u1081 1352                     u1137 0FFC                     u1090 138A  
                   u1227 15A0                     u1091 1386                     u1147 1056  
                   u1157 10AE                     u1167 164A                     u1177 165A  
                   u1187 12DE                     u1197 12F4          lcd_write_char@a 0004  
        lcd_write_char@y 0003   __end_of_lcd_write_char 1662                     abs@a 0013  
                   _dbuf 0068                     _main 0FB4                     _dtoa 0832  
                   _prec 0064                     _nout 0060                     pad@i 0018  
                   pad@p 0015                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf1 000FE7                     indf2 000FDF                     fsr1l 000FE1  
                   pad@w 001A                     fsr2l 000FD9                     start 0000  
        __end_of_Lcd_Cmd 1682             ___param_bank 000000                    ??_abs 0015  
                  ??_pad 0017          __end_of___aodiv 0E50                    ?_main 0001  
                  ?_dtoa 001C          __end_of___aomod 0FB4          __end_of_adcInit 1502  
                  _ADRES 000FC3             vfpfcnvrt@fmt 0042                    _PORTB 000F81  
                  _TRISD 000F95                    _flags 0066                    _fputc 10C4  
                  _fputs 1502                    pad@fp 0011                    _width 0062  
                  _putch 1696                    dtoa@d 001E                    dtoa@i 003E  
                  dtoa@n 0036                    dtoa@p 0030                    dtoa@s 0034  
                  dtoa@w 0032                    tablat 000FF5          ?_lcd_write_char 0001  
                  status 000FD8          __end_of_sprintf 14BA         __end_of_Lcd_Port 1468  
        __initialization 15C2             __end_of_main 10C4             __end_of_dtoa 0B14  
                 ??_main 005E                   ??_dtoa 0026            __activetblptr 000002  
                 ?_fputc 0001                   ?_fputs 000A                   ?_putch 0001  
              ??_Lcd_Cmd 0002             vfprintf@cfmt 0056         __end_of_lcd_init 1344  
       __end_of_lcd_putc 12D2                ??___aodiv 0011                ??___aomod 0011  
              ??_adcInit 0001                   _entero 00AA                   clear_0 15E8  
                 pad@buf 0013                   dtoa@fp 001C                   _strlen 15F8  
                 fputc@c 0001                   fputs@c 000E                   fputs@i 000F  
                 fputs@s 000A             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8        adcGetValue@PinADC 0004  
                 putch@c 0001         __end_of_vfprintf 140C                ??_sprintf 005E  
             __accesstop 0060  __end_of__initialization 15EE            ___rparam_used 000001  
         __pcstackCOMRAM 0001             __pidataBANK0 1690            __end_of_fputc 118E  
          __end_of_fputs 1546            __end_of_putch 1698            ??_adcGetValue 0003  
         lcd_gotoxy@temp 0008       __size_of_lcd_clear 000E                ?_Lcd_Port 0001  
                ??_fputc 0005                  ??_fputs 000E                  ??_putch 0001  
             __pbssBANK0 0060                  ?_strlen 0001               _buffer_lcd 0088  
     __size_of_vfpfcnvrt 01B4               _lcd_gotoxy 1344         ??_lcd_write_char 0002  
             ??_Lcd_Port 0001      __end_of_adcGetValue 15C2                ?_lcd_init 0001  
              ?_lcd_putc 0005       lcd_write_char@temp 0002                  _Lcd_Cmd 1662  
                __Hparam 0000                  __Lparam 0000        __end_of_lcd_clear 1690  
                ___aodiv 0CC8                  ___aomod 0E50                  _adcInit 14BA  
              ?_vfprintf 0050             __psmallconst 0800                  _decimal 00A6  
                __pcinit 15C2                  __ramtop 0800                  __ptext0 0FB4  
                __ptext1 1468                  __ptext2 13AA                  __ptext3 0B14  
                __ptext4 0832                  __ptext5 118E                  __ptext6 15F8  
                __ptext7 1502                  __ptext8 10C4                  __ptext9 1696  
        __size_of_strlen 0036             __size_of_abs 0040             __size_of_pad 00C6  
                _sprintf 1468               ??_lcd_init 0004               ??_lcd_putc 0007  
   end_of_initialization 15EE                  fputc@fp 0003            __Lmediumconst 0000  
                fputs@fp 000C        __end_of_vfpfcnvrt 0CC8                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE                Lcd_Port@a 0001               ??_vfprintf 0056  
                strlen@a 0003                  strlen@s 0001                _PORTBbits 000F81  
            _adcGetValue 1586              ?_lcd_gotoxy 0004              vfpfcnvrt@ap 0044  
            vfpfcnvrt@fp 0040              vfpfcnvrt@ll 0048           __end_of_strlen 162E  
    start_initialization 15C2              __end_of_abs 1586              __end_of_pad 1254  
      __size_of_Lcd_Port 005C              vfprintf@fmt 0052      __size_of_lcd_gotoxy 0066  
            __pdataBANK0 00A6                 ??_strlen 0003            __pcstackBANK0 009C  
       ___aodiv@dividend 0001                 ?_Lcd_Cmd 0001        __size_of_lcd_init 0072  
      __size_of_lcd_putc 007E                 ?___aodiv 0001                 ?___aomod 0001  
               ?_adcInit 0001         ___aodiv@quotient 0013                _lcd_clear 1682  
      __size_of_vfprintf 0062              __smallconst 0800                 ?_sprintf 0058  
         __size_of_fputc 00CA           __size_of_fputs 0044           __size_of_putch 0002  
               _LATDbits 000F8C                 Lcd_Cmd@a 0003                 _GO_nDONE 007E11  
             ?_lcd_clear 0001                _vfpfcnvrt 0B14               _ADCON0bits 000FC2  
             _ADCON1bits 000FC1               _ADCON2bits 000FC0             ?_adcGetValue 0001  
              lcd_putc@a 0005                lcd_putc@i 0009             ??_lcd_gotoxy 0005  
               _Lcd_Port 140C                copy_data0 15D6         __size_of_Lcd_Cmd 0020  
__size_of_lcd_write_char 0034                 __Hrparam 0000               vfprintf@ap 0054  
               __Lrparam 0000               vfprintf@fp 0050       __end_of_lcd_gotoxy 13AA  
       __size_of___aodiv 0188         __size_of___aomod 0164         __size_of_adcInit 0048  
             ?_vfpfcnvrt 0040          ___aodiv@divisor 0009          ___aodiv@counter 0011  
             sprintf@fmt 005A                 _dtoa$849 002E                 __ptext10 1546  
               __ptext11 0E50                 __ptext20 14BA                 __ptext12 0CC8  
               __ptext21 1586                 __ptext13 1254                 __ptext14 162E  
               __ptext15 12D2                 __ptext16 1344                 __ptext17 1682  
               __ptext18 1662                 __ptext19 140C                 _lcd_init 12D2  
               _lcd_putc 1254         __size_of_sprintf 0052            __size_of_main 0110  
          __size_of_dtoa 02E2                 _vfprintf 13AA              ??_lcd_clear 0004  
       ___aomod@dividend 0001                sprintf@ap 009E          ___aomod@divisor 0009  
            ??_vfpfcnvrt 0046          ___aomod@counter 0011                 sprintf@f 00A0  
               sprintf@s 0058     __size_of_adcGetValue 003C             ___aodiv@sign 0012  
         _lcd_write_char 162E             ___aomod@sign 0012  
