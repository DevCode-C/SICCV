

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed May 26 23:29:36 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4550 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     _ADRES	set	4035
    70  0000                     _LATDbits	set	3980
    71  0000                     _TRISDbits	set	3989
    72  0000                     _PORTBbits	set	3969
    73  0000                     _PORTB	set	3969
    74  0000                     _ADCON0bits	set	4034
    75  0000                     _ADCON2bits	set	4032
    76  0000                     _ADCON1bits	set	4033
    77  0000                     _GO_nDONE	set	32273
    78                           
    79                           	psect	smallconst
    80  000800                     __psmallconst:
    81                           	callstack 0
    82  000800  00                 	db	0
    83  000801                     STR_1:
    84  000801  42                 	db	66	;'B'
    85  000802  69                 	db	105	;'i'
    86  000803  65                 	db	101	;'e'
    87  000804  6E                 	db	110	;'n'
    88  000805  76                 	db	118	;'v'
    89  000806  65                 	db	101	;'e'
    90  000807  6E                 	db	110	;'n'
    91  000808  69                 	db	105	;'i'
    92  000809  64                 	db	100	;'d'
    93  00080A  6F                 	db	111	;'o'
    94  00080B  20                 	db	32
    95  00080C  3A                 	db	58	;':'
    96  00080D  2A                 	db	42
    97  00080E  00                 	db	0
    98  00080F                     STR_2:
    99  00080F  2A                 	db	42
   100  000810  43                 	db	67	;'C'
   101  000811  61                 	db	97	;'a'
   102  000812  6C                 	db	108	;'l'
   103  000813  63                 	db	99	;'c'
   104  000814  75                 	db	117	;'u'
   105  000815  6C                 	db	108	;'l'
   106  000816  61                 	db	97	;'a'
   107  000817  64                 	db	100	;'d'
   108  000818  6F                 	db	111	;'o'
   109  000819  72                 	db	114	;'r'
   110  00081A  61                 	db	97	;'a'
   111  00081B  2A                 	db	42
   112  00081C  00                 	db	0
   113  00081D                     STR_3:
   114  00081D  41                 	db	65	;'A'
   115  00081E  44                 	db	68	;'D'
   116  00081F  43                 	db	67	;'C'
   117  000820  31                 	db	49	;'1'
   118  000821  3A                 	db	58	;':'
   119  000822  25                 	db	37
   120  000823  64                 	db	100	;'d'
   121  000824  00                 	db	0
   122  000825                     STR_4:
   123  000825  41                 	db	65	;'A'
   124  000826  44                 	db	68	;'D'
   125  000827  43                 	db	67	;'C'
   126  000828  32                 	db	50	;'2'
   127  000829  3A                 	db	58	;':'
   128  00082A  25                 	db	37
   129  00082B  64                 	db	100	;'d'
   130  00082C  00                 	db	0
   131  00082D  00                 	db	0	; dummy byte at the end
   132  0000                     
   133                           ; #config settings
   134                           
   135                           	psect	cinit
   136  0018E2                     __pcinit:
   137                           	callstack 0
   138  0018E2                     start_initialization:
   139                           	callstack 0
   140  0018E2                     __initialization:
   141                           	callstack 0
   142                           
   143                           ; Clear objects allocated to BANK0 (58 bytes)
   144  0018E2  EE00  F060         	lfsr	0,__pbssBANK0
   145  0018E6  0E3A               	movlw	58
   146  0018E8                     clear_0:
   147  0018E8  6AEE               	clrf	postinc0,c
   148  0018EA  06E8               	decf	wreg,f,c
   149  0018EC  E1FD               	bnz	clear_0
   150  0018EE                     end_of_initialization:
   151                           	callstack 0
   152  0018EE                     __end_of__initialization:
   153                           	callstack 0
   154  0018EE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   155  0018F0  6EF8               	movwf	tblptru,c
   156  0018F2  0100               	movlb	0
   157  0018F4  EF7F  F008         	goto	_main	;jump to C main() function
   158                           
   159                           	psect	bssBANK0
   160  000060                     __pbssBANK0:
   161                           	callstack 0
   162  000060                     _nout:
   163                           	callstack 0
   164  000060                     	ds	2
   165  000062                     _width:
   166                           	callstack 0
   167  000062                     	ds	2
   168  000064                     _prec:
   169                           	callstack 0
   170  000064                     	ds	2
   171  000066                     _flags:
   172                           	callstack 0
   173  000066                     	ds	2
   174  000068                     _entero:
   175                           	callstack 0
   176  000068                     	ds	2
   177  00006A                     _dbuf:
   178                           	callstack 0
   179  00006A                     	ds	32
   180  00008A                     _buffer_lcd:
   181                           	callstack 0
   182  00008A                     	ds	16
   183                           
   184                           	psect	cstackBANK0
   185  00009A                     __pcstackBANK0:
   186                           	callstack 0
   187  00009A                     	ds	2
   188  00009C                     sprintf@ap:
   189                           	callstack 0
   190                           
   191                           ; 2 bytes @ 0x2
   192  00009C                     	ds	2
   193  00009E                     sprintf@f:
   194                           	callstack 0
   195                           
   196                           ; 6 bytes @ 0x4
   197  00009E                     	ds	6
   198                           
   199                           	psect	cstackCOMRAM
   200  000001                     __pcstackCOMRAM:
   201                           	callstack 0
   202  000001                     ??_Lcd_Cmd:
   203  000001                     ??_Lcd_Chr_CP:
   204  000001                     ??_adcInit:
   205  000001                     ?_strlen:
   206                           	callstack 0
   207  000001                     ?_adcGetValue:
   208                           	callstack 0
   209  000001                     ?___aodiv:
   210                           	callstack 0
   211  000001                     ?___aomod:
   212                           	callstack 0
   213  000001                     fputc@c:
   214                           	callstack 0
   215  000001                     strlen@s:
   216                           	callstack 0
   217  000001                     ___aodiv@dividend:
   218                           	callstack 0
   219  000001                     ___aomod@dividend:
   220                           	callstack 0
   221                           
   222                           ; 8 bytes @ 0x0
   223  000001                     	ds	1
   224  000002                     adcInit@ADC_PINs:
   225                           	callstack 0
   226                           
   227                           ; 1 bytes @ 0x1
   228  000002                     	ds	1
   229  000003                     ??_adcGetValue:
   230  000003                     Lcd_Chr_CP@data:
   231                           	callstack 0
   232  000003                     Lcd_Cmd@data:
   233                           	callstack 0
   234  000003                     fputc@fp:
   235                           	callstack 0
   236  000003                     strlen@a:
   237                           	callstack 0
   238                           
   239                           ; 2 bytes @ 0x2
   240  000003                     	ds	1
   241  000004                     ??_Lcd_Init:
   242  000004                     adcGetValue@PinADC:
   243                           	callstack 0
   244  000004                     Lcd_Out@x:
   245                           	callstack 0
   246  000004                     Lcd_Out2@x:
   247                           	callstack 0
   248                           
   249                           ; 1 bytes @ 0x3
   250  000004                     	ds	1
   251  000005                     ??_fputc:
   252  000005                     Lcd_Init@i:
   253                           	callstack 0
   254  000005                     Lcd_Out@buffer:
   255                           	callstack 0
   256  000005                     Lcd_Out2@buffer:
   257                           	callstack 0
   258                           
   259                           ; 2 bytes @ 0x4
   260  000005                     	ds	2
   261  000007                     ??_Lcd_Out:
   262  000007                     ??_Lcd_Out2:
   263                           
   264                           ; 1 bytes @ 0x6
   265  000007                     	ds	2
   266  000009                     Lcd_Out@y:
   267                           	callstack 0
   268  000009                     Lcd_Out2@y:
   269                           	callstack 0
   270  000009                     ___aodiv@divisor:
   271                           	callstack 0
   272  000009                     ___aomod@divisor:
   273                           	callstack 0
   274                           
   275                           ; 8 bytes @ 0x8
   276  000009                     	ds	1
   277  00000A                     Lcd_Out@data:
   278                           	callstack 0
   279  00000A                     Lcd_Out2@data:
   280                           	callstack 0
   281  00000A                     fputs@s:
   282                           	callstack 0
   283                           
   284                           ; 2 bytes @ 0x9
   285  00000A                     	ds	2
   286  00000C                     fputs@fp:
   287                           	callstack 0
   288                           
   289                           ; 2 bytes @ 0xB
   290  00000C                     	ds	2
   291  00000E                     fputs@c:
   292                           	callstack 0
   293                           
   294                           ; 1 bytes @ 0xD
   295  00000E                     	ds	1
   296  00000F                     fputs@i:
   297                           	callstack 0
   298                           
   299                           ; 2 bytes @ 0xE
   300  00000F                     	ds	2
   301  000011                     ?_pad:
   302                           	callstack 0
   303  000011                     ___aodiv@counter:
   304                           	callstack 0
   305  000011                     ___aomod@counter:
   306                           	callstack 0
   307  000011                     pad@fp:
   308                           	callstack 0
   309                           
   310                           ; 2 bytes @ 0x10
   311  000011                     	ds	1
   312  000012                     ___aodiv@sign:
   313                           	callstack 0
   314  000012                     ___aomod@sign:
   315                           	callstack 0
   316                           
   317                           ; 1 bytes @ 0x11
   318  000012                     	ds	1
   319  000013                     ?_abs:
   320                           	callstack 0
   321  000013                     pad@buf:
   322                           	callstack 0
   323  000013                     abs@a:
   324                           	callstack 0
   325  000013                     ___aodiv@quotient:
   326                           	callstack 0
   327                           
   328                           ; 8 bytes @ 0x12
   329  000013                     	ds	2
   330  000015                     ??_abs:
   331  000015                     pad@p:
   332                           	callstack 0
   333                           
   334                           ; 2 bytes @ 0x14
   335  000015                     	ds	2
   336  000017                     ??_pad:
   337                           
   338                           ; 1 bytes @ 0x16
   339  000017                     	ds	1
   340  000018                     pad@i:
   341                           	callstack 0
   342                           
   343                           ; 2 bytes @ 0x17
   344  000018                     	ds	2
   345  00001A                     pad@w:
   346                           	callstack 0
   347                           
   348                           ; 2 bytes @ 0x19
   349  00001A                     	ds	2
   350  00001C                     ?_dtoa:
   351                           	callstack 0
   352  00001C                     dtoa@fp:
   353                           	callstack 0
   354                           
   355                           ; 2 bytes @ 0x1B
   356  00001C                     	ds	2
   357  00001E                     dtoa@d:
   358                           	callstack 0
   359                           
   360                           ; 8 bytes @ 0x1D
   361  00001E                     	ds	8
   362  000026                     ??_dtoa:
   363                           
   364                           ; 1 bytes @ 0x25
   365  000026                     	ds	8
   366  00002E                     _dtoa$915:
   367                           	callstack 0
   368                           
   369                           ; 2 bytes @ 0x2D
   370  00002E                     	ds	2
   371  000030                     dtoa@p:
   372                           	callstack 0
   373                           
   374                           ; 2 bytes @ 0x2F
   375  000030                     	ds	2
   376  000032                     dtoa@w:
   377                           	callstack 0
   378                           
   379                           ; 2 bytes @ 0x31
   380  000032                     	ds	2
   381  000034                     dtoa@s:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0x33
   385  000034                     	ds	2
   386  000036                     dtoa@n:
   387                           	callstack 0
   388                           
   389                           ; 8 bytes @ 0x35
   390  000036                     	ds	8
   391  00003E                     dtoa@i:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x3D
   395  00003E                     	ds	2
   396  000040                     ?_vfpfcnvrt:
   397                           	callstack 0
   398  000040                     vfpfcnvrt@fp:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0x3F
   402  000040                     	ds	2
   403  000042                     vfpfcnvrt@fmt:
   404                           	callstack 0
   405                           
   406                           ; 2 bytes @ 0x41
   407  000042                     	ds	2
   408  000044                     vfpfcnvrt@ap:
   409                           	callstack 0
   410                           
   411                           ; 2 bytes @ 0x43
   412  000044                     	ds	2
   413  000046                     ??_vfpfcnvrt:
   414                           
   415                           ; 1 bytes @ 0x45
   416  000046                     	ds	2
   417  000048                     vfpfcnvrt@ll:
   418                           	callstack 0
   419                           
   420                           ; 8 bytes @ 0x47
   421  000048                     	ds	8
   422  000050                     ?_vfprintf:
   423                           	callstack 0
   424  000050                     vfprintf@fp:
   425                           	callstack 0
   426                           
   427                           ; 2 bytes @ 0x4F
   428  000050                     	ds	2
   429  000052                     vfprintf@fmt:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x51
   433  000052                     	ds	2
   434  000054                     vfprintf@ap:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x53
   438  000054                     	ds	2
   439  000056                     vfprintf@cfmt:
   440                           	callstack 0
   441                           
   442                           ; 2 bytes @ 0x55
   443  000056                     	ds	2
   444  000058                     ?_sprintf:
   445                           	callstack 0
   446  000058                     sprintf@s:
   447                           	callstack 0
   448                           
   449                           ; 2 bytes @ 0x57
   450  000058                     	ds	2
   451  00005A                     sprintf@fmt:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0x59
   455  00005A                     	ds	4
   456  00005E                     ??_main:
   457                           
   458                           ; 1 bytes @ 0x5D
   459  00005E                     	ds	2
   460                           
   461 ;;
   462 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   463 ;;
   464 ;; *************** function _main *****************
   465 ;; Defined at:
   466 ;;		line 23 in file "main.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;		None
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      void 
   473 ;; Registers used:
   474 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   480 ;;      Params:         0       0       0       0       0       0       0       0       0
   481 ;;      Locals:         0       0       0       0       0       0       0       0       0
   482 ;;      Temps:          2       0       0       0       0       0       0       0       0
   483 ;;      Totals:         2       0       0       0       0       0       0       0       0
   484 ;;Total ram usage:        2 bytes
   485 ;; Hardware stack levels required when called:    8
   486 ;; This function calls:
   487 ;;		_Lcd_Cmd
   488 ;;		_Lcd_Init
   489 ;;		_Lcd_Out
   490 ;;		_Lcd_Out2
   491 ;;		_adcGetValue
   492 ;;		_adcInit
   493 ;;		_sprintf
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           	psect	text0
   500  0010FE                     __ptext0:
   501                           	callstack 0
   502  0010FE                     _main:
   503                           	callstack 23
   504  0010FE                     
   505                           ;main.c: 25:     Lcd_Init();
   506  0010FE  EC77  F00A         	call	_Lcd_Init	;wreg free
   507                           
   508                           ;main.c: 26:     Lcd_Cmd(1);
   509  001102  0E01               	movlw	1
   510  001104  EC1A  F009         	call	_Lcd_Cmd
   511                           
   512                           ;main.c: 27:     Lcd_Cmd(12);
   513  001108  0E0C               	movlw	12
   514  00110A  EC1A  F009         	call	_Lcd_Cmd
   515  00110E                     
   516                           ;main.c: 28:      _delay((unsigned long)((100)*(12000000/4000.0)));
   517  00110E  0E02               	movlw	2
   518  001110  6E5F               	movwf	(??_main+1)^0,c
   519  001112  0E86               	movlw	134
   520  001114  6E5E               	movwf	??_main^0,c
   521  001116  0E99               	movlw	153
   522  001118                     u1197:
   523  001118  2EE8               	decfsz	wreg,f,c
   524  00111A  D7FE               	bra	u1197
   525  00111C  2E5E               	decfsz	??_main^0,f,c
   526  00111E  D7FC               	bra	u1197
   527  001120  2E5F               	decfsz	(??_main+1)^0,f,c
   528  001122  D7FA               	bra	u1197
   529  001124  F000               	nop	
   530  001126                     
   531                           ;main.c: 29:      Lcd_Out(1,1,(int8_t *)"Bienvenido :*");
   532  001126  0E01               	movlw	1
   533  001128  6E04               	movwf	Lcd_Out@x^0,c
   534  00112A  0E01               	movlw	low STR_1
   535  00112C  6E05               	movwf	Lcd_Out@buffer^0,c
   536  00112E  0E08               	movlw	high STR_1
   537  001130  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   538  001132  0E01               	movlw	1
   539  001134  ECD7  F00A         	call	_Lcd_Out
   540  001138                     
   541                           ;main.c: 30:     Lcd_Out(2,1,(int8_t *)"*Calculadora*");
   542  001138  0E01               	movlw	1
   543  00113A  6E04               	movwf	Lcd_Out@x^0,c
   544  00113C  0E0F               	movlw	low STR_2
   545  00113E  6E05               	movwf	Lcd_Out@buffer^0,c
   546  001140  0E08               	movlw	high STR_2
   547  001142  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   548  001144  0E02               	movlw	2
   549  001146  ECD7  F00A         	call	_Lcd_Out
   550  00114A                     
   551                           ;main.c: 31:     _delay((unsigned long)((1000)*(12000000/4000.0)));
   552  00114A  0E10               	movlw	16
   553  00114C  6E5F               	movwf	(??_main+1)^0,c
   554  00114E  0E39               	movlw	57
   555  001150  6E5E               	movwf	??_main^0,c
   556  001152  0E0E               	movlw	14
   557  001154                     u1207:
   558  001154  2EE8               	decfsz	wreg,f,c
   559  001156  D7FE               	bra	u1207
   560  001158  2E5E               	decfsz	??_main^0,f,c
   561  00115A  D7FC               	bra	u1207
   562  00115C  2E5F               	decfsz	(??_main+1)^0,f,c
   563  00115E  D7FA               	bra	u1207
   564                           
   565                           ;main.c: 32:     Lcd_Cmd(1);
   566  001160  0E01               	movlw	1
   567  001162  EC1A  F009         	call	_Lcd_Cmd
   568  001166                     
   569                           ;main.c: 33:     _delay((unsigned long)((100)*(12000000/4000.0)));
   570  001166  0E02               	movlw	2
   571  001168  6E5F               	movwf	(??_main+1)^0,c
   572  00116A  0E86               	movlw	134
   573  00116C  6E5E               	movwf	??_main^0,c
   574  00116E  0E99               	movlw	153
   575  001170                     u1217:
   576  001170  2EE8               	decfsz	wreg,f,c
   577  001172  D7FE               	bra	u1217
   578  001174  2E5E               	decfsz	??_main^0,f,c
   579  001176  D7FC               	bra	u1217
   580  001178  2E5F               	decfsz	(??_main+1)^0,f,c
   581  00117A  D7FA               	bra	u1217
   582  00117C  F000               	nop	
   583  00117E                     
   584                           ;main.c: 34:     adcInit(2);
   585  00117E  0E02               	movlw	2
   586  001180  ECD2  F00B         	call	_adcInit
   587  001184                     l1870:
   588                           
   589                           ;main.c: 36:     {;main.c: 37:         entero = adcGetValue(0);
   590  001184  0E00               	movlw	0
   591  001186  EC38  F00C         	call	_adcGetValue
   592  00118A  C001  F068         	movff	?_adcGetValue,_entero
   593  00118E  C002  F069         	movff	?_adcGetValue+1,_entero+1
   594  001192                     
   595                           ;main.c: 38:         sprintf((char *)buffer_lcd,"ADC1:%d",entero);
   596  001192  0E8A               	movlw	low _buffer_lcd
   597  001194  6E58               	movwf	sprintf@s^0,c
   598  001196  0E00               	movlw	high _buffer_lcd
   599  001198  6E59               	movwf	(sprintf@s+1)^0,c
   600  00119A  0E1D               	movlw	low STR_3
   601  00119C  6E5A               	movwf	sprintf@fmt^0,c
   602  00119E  0E08               	movlw	high STR_3
   603  0011A0  6E5B               	movwf	(sprintf@fmt+1)^0,c
   604  0011A2  C068  F05C         	movff	_entero,?_sprintf+4
   605  0011A6  C069  F05D         	movff	_entero+1,?_sprintf+5
   606  0011AA  ECA9  F00B         	call	_sprintf	;wreg free
   607  0011AE                     
   608                           ;main.c: 39:         Lcd_Out2(1,0,(int8_t*)buffer_lcd);
   609  0011AE  0E00               	movlw	0
   610  0011B0  6E04               	movwf	Lcd_Out2@x^0,c
   611  0011B2  0E8A               	movlw	low _buffer_lcd
   612  0011B4  6E05               	movwf	Lcd_Out2@buffer^0,c
   613  0011B6  0E00               	movlw	high _buffer_lcd
   614  0011B8  6E06               	movwf	(Lcd_Out2@buffer+1)^0,c
   615  0011BA  0E01               	movlw	1
   616  0011BC  EC29  F00B         	call	_Lcd_Out2
   617  0011C0                     
   618                           ;main.c: 40:         _delay((unsigned long)((100)*(12000000/4000.0)));
   619  0011C0  0E02               	movlw	2
   620  0011C2  6E5F               	movwf	(??_main+1)^0,c
   621  0011C4  0E86               	movlw	134
   622  0011C6  6E5E               	movwf	??_main^0,c
   623  0011C8  0E99               	movlw	153
   624  0011CA                     u1227:
   625  0011CA  2EE8               	decfsz	wreg,f,c
   626  0011CC  D7FE               	bra	u1227
   627  0011CE  2E5E               	decfsz	??_main^0,f,c
   628  0011D0  D7FC               	bra	u1227
   629  0011D2  2E5F               	decfsz	(??_main+1)^0,f,c
   630  0011D4  D7FA               	bra	u1227
   631  0011D6  F000               	nop	
   632  0011D8                     
   633                           ;main.c: 41:         entero = adcGetValue(1);
   634  0011D8  0E01               	movlw	1
   635  0011DA  EC38  F00C         	call	_adcGetValue
   636  0011DE  C001  F068         	movff	?_adcGetValue,_entero
   637  0011E2  C002  F069         	movff	?_adcGetValue+1,_entero+1
   638  0011E6                     
   639                           ;main.c: 42:         sprintf((char *)buffer_lcd,"ADC2:%d",entero);
   640  0011E6  0E8A               	movlw	low _buffer_lcd
   641  0011E8  6E58               	movwf	sprintf@s^0,c
   642  0011EA  0E00               	movlw	high _buffer_lcd
   643  0011EC  6E59               	movwf	(sprintf@s+1)^0,c
   644  0011EE  0E25               	movlw	low STR_4
   645  0011F0  6E5A               	movwf	sprintf@fmt^0,c
   646  0011F2  0E08               	movlw	high STR_4
   647  0011F4  6E5B               	movwf	(sprintf@fmt+1)^0,c
   648  0011F6  C068  F05C         	movff	_entero,?_sprintf+4
   649  0011FA  C069  F05D         	movff	_entero+1,?_sprintf+5
   650  0011FE  ECA9  F00B         	call	_sprintf	;wreg free
   651                           
   652                           ;main.c: 43:         Lcd_Out2(2,0,(int8_t*)buffer_lcd);
   653  001202  0E00               	movlw	0
   654  001204  6E04               	movwf	Lcd_Out2@x^0,c
   655  001206  0E8A               	movlw	low _buffer_lcd
   656  001208  6E05               	movwf	Lcd_Out2@buffer^0,c
   657  00120A  0E00               	movlw	high _buffer_lcd
   658  00120C  6E06               	movwf	(Lcd_Out2@buffer+1)^0,c
   659  00120E  0E02               	movlw	2
   660  001210  EC29  F00B         	call	_Lcd_Out2
   661  001214                     
   662                           ;main.c: 44:         _delay((unsigned long)((100)*(12000000/4000.0)));
   663  001214  0E02               	movlw	2
   664  001216  6E5F               	movwf	(??_main+1)^0,c
   665  001218  0E86               	movlw	134
   666  00121A  6E5E               	movwf	??_main^0,c
   667  00121C  0E99               	movlw	153
   668  00121E                     u1237:
   669  00121E  2EE8               	decfsz	wreg,f,c
   670  001220  D7FE               	bra	u1237
   671  001222  2E5E               	decfsz	??_main^0,f,c
   672  001224  D7FC               	bra	u1237
   673  001226  2E5F               	decfsz	(??_main+1)^0,f,c
   674  001228  D7FA               	bra	u1237
   675  00122A  F000               	nop	
   676  00122C  EFC2  F008         	goto	l1870
   677  001230  EF00  F000         	goto	start
   678  001234                     __end_of_main:
   679                           	callstack 0
   680                           
   681 ;; *************** function _sprintf *****************
   682 ;; Defined at:
   683 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_sprintf.c"
   684 ;; Parameters:    Size  Location     Type
   685 ;;  s               2   87[COMRAM] PTR unsigned char 
   686 ;;		 -> buffer_lcd(16), 
   687 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   688 ;;		 -> STR_4(8), STR_3(8), 
   689 ;; Auto vars:     Size  Location     Type
   690 ;;  f               6    4[BANK0 ] struct _IO_FILE
   691 ;;  ap              2    2[BANK0 ] PTR void [1]
   692 ;;		 -> ?_sprintf(2), 
   693 ;;  ret             2    0        int 
   694 ;; Return value:  Size  Location     Type
   695 ;;                  2   87[COMRAM] int 
   696 ;; Registers used:
   697 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   703 ;;      Params:         6       0       0       0       0       0       0       0       0
   704 ;;      Locals:         0      10       0       0       0       0       0       0       0
   705 ;;      Temps:          0       0       0       0       0       0       0       0       0
   706 ;;      Totals:         6      10       0       0       0       0       0       0       0
   707 ;;Total ram usage:       16 bytes
   708 ;; Hardware stack levels used:    1
   709 ;; Hardware stack levels required when called:    7
   710 ;; This function calls:
   711 ;;		_vfprintf
   712 ;; This function is called by:
   713 ;;		_main
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           	psect	text1
   718  001752                     __ptext1:
   719                           	callstack 0
   720  001752                     _sprintf:
   721                           	callstack 23
   722  001752  0E5C               	movlw	low (?_sprintf+4)
   723  001754  0100               	movlb	0	; () banked
   724  001756  6F9C               	movwf	sprintf@ap& (0+255),b
   725  001758  0E00               	movlw	high (?_sprintf+4)
   726  00175A  6F9D               	movwf	(sprintf@ap+1)& (0+255),b
   727  00175C  C058  F09E         	movff	sprintf@s,sprintf@f
   728  001760  C059  F09F         	movff	sprintf@s+1,sprintf@f+1
   729  001764                     
   730                           ; BSR set to: 0
   731  001764  0E00               	movlw	0
   732  001766  6FA1               	movwf	(sprintf@f+3)& (0+255),b
   733  001768  0E00               	movlw	0
   734  00176A  6FA0               	movwf	(sprintf@f+2)& (0+255),b
   735  00176C                     
   736                           ; BSR set to: 0
   737  00176C  0E00               	movlw	0
   738  00176E  6FA3               	movwf	(sprintf@f+5)& (0+255),b
   739  001770  0E00               	movlw	0
   740  001772  6FA2               	movwf	(sprintf@f+4)& (0+255),b
   741  001774                     
   742                           ; BSR set to: 0
   743  001774  0E9E               	movlw	low sprintf@f
   744  001776  6E50               	movwf	vfprintf@fp^0,c
   745  001778  0E00               	movlw	high sprintf@f
   746  00177A  6E51               	movwf	(vfprintf@fp+1)^0,c
   747  00177C  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
   748  001780  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   749  001784  0E9C               	movlw	low sprintf@ap
   750  001786  6E54               	movwf	vfprintf@ap^0,c
   751  001788  0E00               	movlw	high sprintf@ap
   752  00178A  6E55               	movwf	(vfprintf@ap+1)^0,c
   753  00178C  EC78  F00B         	call	_vfprintf	;wreg free
   754  001790  0100               	movlb	0	; () banked
   755  001792  51A0               	movf	(sprintf@f+2)& (0+255),w,b
   756  001794  2458               	addwf	sprintf@s^0,w,c
   757  001796  6ED9               	movwf	fsr2l,c
   758  001798  51A1               	movf	(sprintf@f+3)& (0+255),w,b
   759  00179A  2059               	addwfc	(sprintf@s+1)^0,w,c
   760  00179C  6EDA               	movwf	fsr2h,c
   761  00179E  0E00               	movlw	0
   762  0017A0  6EDF               	movwf	indf2,c
   763  0017A2                     
   764                           ; BSR set to: 0
   765  0017A2  0012               	return		;funcret
   766  0017A4                     __end_of_sprintf:
   767                           	callstack 0
   768                           
   769 ;; *************** function _vfprintf *****************
   770 ;; Defined at:
   771 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   774 ;;		 -> sprintf@f(6), 
   775 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   776 ;;		 -> STR_4(8), STR_3(8), 
   777 ;;  ap              2   83[COMRAM] PTR PTR void 
   778 ;;		 -> sprintf@ap(2), 
   779 ;; Auto vars:     Size  Location     Type
   780 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   781 ;;		 -> STR_4(8), STR_3(8), 
   782 ;; Return value:  Size  Location     Type
   783 ;;                  2   79[COMRAM] int 
   784 ;; Registers used:
   785 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   786 ;; Tracked objects:
   787 ;;		On entry : 0/0
   788 ;;		On exit  : 0/0
   789 ;;		Unchanged: 0/0
   790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   791 ;;      Params:         6       0       0       0       0       0       0       0       0
   792 ;;      Locals:         2       0       0       0       0       0       0       0       0
   793 ;;      Temps:          0       0       0       0       0       0       0       0       0
   794 ;;      Totals:         8       0       0       0       0       0       0       0       0
   795 ;;Total ram usage:        8 bytes
   796 ;; Hardware stack levels used:    1
   797 ;; Hardware stack levels required when called:    6
   798 ;; This function calls:
   799 ;;		_vfpfcnvrt
   800 ;; This function is called by:
   801 ;;		_sprintf
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           	psect	text2
   806  0016F0                     __ptext2:
   807                           	callstack 0
   808  0016F0                     _vfprintf:
   809                           	callstack 23
   810  0016F0                     
   811                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.31\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   812  0016F0  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   813  0016F4  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   814  0016F8                     
   815                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   816  0016F8  0E00               	movlw	0
   817  0016FA  0100               	movlb	0	; () banked
   818  0016FC  6F61               	movwf	(_nout+1)& (0+255),b
   819  0016FE  0E00               	movlw	0
   820  001700  6F60               	movwf	_nout& (0+255),b
   821                           
   822                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   823  001702  EF96  F00B         	goto	l1710
   824  001706                     l1708:
   825                           
   826                           ; BSR set to: 0
   827                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   828  001706  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   829  00170A  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   830  00170E  0E56               	movlw	low vfprintf@cfmt
   831  001710  6E42               	movwf	vfpfcnvrt@fmt^0,c
   832  001712  0E00               	movlw	high vfprintf@cfmt
   833  001714  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
   834  001716  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   835  00171A  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   836  00171E  EC88  F005         	call	_vfpfcnvrt	;wreg free
   837  001722  5040               	movf	?_vfpfcnvrt^0,w,c
   838  001724  0100               	movlb	0	; () banked
   839  001726  2760               	addwf	_nout& (0+255),f,b
   840  001728  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
   841  00172A  2361               	addwfc	(_nout+1)& (0+255),f,b
   842  00172C                     l1710:
   843                           
   844                           ; BSR set to: 0
   845                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   846  00172C  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   847  001730  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   848  001734                     	if	0	;tblptru may be non-zero
   849  001734                     	endif
   850  001734                     	if	0	;tblptru may be non-zero
   851  001734                     	endif
   852  001734  0008               	tblrd		*
   853  001736  50F5               	movf	tablat,w,c
   854  001738  0900               	iorlw	0
   855  00173A  A4D8               	btfss	status,2,c
   856  00173C  EFA2  F00B         	goto	u1131
   857  001740  EFA4  F00B         	goto	u1130
   858  001744                     u1131:
   859  001744  EF83  F00B         	goto	l1708
   860  001748                     u1130:
   861  001748                     
   862                           ; BSR set to: 0
   863                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   864  001748  C060  F050         	movff	_nout,?_vfprintf
   865  00174C  C061  F051         	movff	_nout+1,?_vfprintf+1
   866  001750                     
   867                           ; BSR set to: 0
   868  001750  0012               	return		;funcret
   869  001752                     __end_of_vfprintf:
   870                           	callstack 0
   871                           
   872 ;; *************** function _vfpfcnvrt *****************
   873 ;; Defined at:
   874 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
   875 ;; Parameters:    Size  Location     Type
   876 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   877 ;;		 -> sprintf@f(6), 
   878 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   879 ;;		 -> vfprintf@cfmt(2), 
   880 ;;  ap              2   67[COMRAM] PTR PTR void 
   881 ;;		 -> sprintf@ap(2), 
   882 ;; Auto vars:     Size  Location     Type
   883 ;;  ll              8   71[COMRAM] long long 
   884 ;;  llu             8    0        unsigned long long 
   885 ;;  f               4    0        unsigned long long 
   886 ;;  vp              3    0        PTR void 
   887 ;;  ct              3    0        unsigned char [3]
   888 ;;  cp              3    0        PTR unsigned char 
   889 ;;  i               2    0        int 
   890 ;;  done            2    0        int 
   891 ;;  c               1    0        unsigned char 
   892 ;; Return value:  Size  Location     Type
   893 ;;                  2   63[COMRAM] int 
   894 ;; Registers used:
   895 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   896 ;; Tracked objects:
   897 ;;		On entry : 0/0
   898 ;;		On exit  : 0/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   901 ;;      Params:         6       0       0       0       0       0       0       0       0
   902 ;;      Locals:         8       0       0       0       0       0       0       0       0
   903 ;;      Temps:          2       0       0       0       0       0       0       0       0
   904 ;;      Totals:        16       0       0       0       0       0       0       0       0
   905 ;;Total ram usage:       16 bytes
   906 ;; Hardware stack levels used:    1
   907 ;; Hardware stack levels required when called:    5
   908 ;; This function calls:
   909 ;;		_dtoa
   910 ;;		_fputc
   911 ;; This function is called by:
   912 ;;		_vfprintf
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           	psect	text3
   917  000B10                     __ptext3:
   918                           	callstack 0
   919  000B10                     _vfpfcnvrt:
   920                           	callstack 23
   921  000B10                     
   922                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.31\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.31\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.31\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          1\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   923  000B10  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   924  000B14  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   925  000B18  CFDE FFF6          	movff	postinc2,tblptrl
   926  000B1C  CFDD FFF7          	movff	postdec2,tblptrh
   927  000B20                     	if	0	;tblptru may be non-zero
   928  000B20                     	endif
   929  000B20                     	if	0	;tblptru may be non-zero
   930  000B20                     	endif
   931  000B20  0008               	tblrd		*
   932  000B22  50F5               	movf	tablat,w,c
   933  000B24  0A25               	xorlw	37
   934  000B26  A4D8               	btfss	status,2,c
   935  000B28  EF98  F005         	goto	u1001
   936  000B2C  EF9A  F005         	goto	u1000
   937  000B30                     u1001:
   938  000B30  EF46  F006         	goto	l1650
   939  000B34                     u1000:
   940  000B34                     
   941                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   942  000B34  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   943  000B38  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   944  000B3C  2ADE               	incf	postinc2,f,c
   945  000B3E  0E00               	movlw	0
   946  000B40  22DD               	addwfc	postdec2,f,c
   947  000B42                     
   948                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   949  000B42  0E00               	movlw	0
   950  000B44  0100               	movlb	0	; () banked
   951  000B46  6F63               	movwf	(_width+1)& (0+255),b
   952  000B48  0E00               	movlw	0
   953  000B4A  6F62               	movwf	_width& (0+255),b
   954  000B4C  C062  F066         	movff	_width,_flags
   955  000B50  C063  F067         	movff	_width+1,_flags+1
   956  000B54                     
   957                           ; BSR set to: 0
   958                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   959  000B54  6964               	setf	_prec& (0+255),b
   960  000B56  6965               	setf	(_prec+1)& (0+255),b
   961  000B58                     
   962                           ; BSR set to: 0
   963                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   964  000B58  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   965  000B5C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   966  000B60  CFDE FFF6          	movff	postinc2,tblptrl
   967  000B64  CFDD FFF7          	movff	postdec2,tblptrh
   968  000B68                     	if	0	;tblptru may be non-zero
   969  000B68                     	endif
   970  000B68                     	if	0	;tblptru may be non-zero
   971  000B68                     	endif
   972  000B68  0008               	tblrd		*
   973  000B6A  50F5               	movf	tablat,w,c
   974  000B6C  0A64               	xorlw	100
   975  000B6E  B4D8               	btfsc	status,2,c
   976  000B70  EFBC  F005         	goto	u1011
   977  000B74  EFBE  F005         	goto	u1010
   978  000B78                     u1011:
   979  000B78  EFD0  F005         	goto	l1628
   980  000B7C                     u1010:
   981  000B7C                     
   982                           ; BSR set to: 0
   983  000B7C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   984  000B80  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   985  000B84  CFDE FFF6          	movff	postinc2,tblptrl
   986  000B88  CFDD FFF7          	movff	postdec2,tblptrh
   987  000B8C                     	if	0	;tblptru may be non-zero
   988  000B8C                     	endif
   989  000B8C                     	if	0	;tblptru may be non-zero
   990  000B8C                     	endif
   991  000B8C  0008               	tblrd		*
   992  000B8E  50F5               	movf	tablat,w,c
   993  000B90  0A69               	xorlw	105
   994  000B92  A4D8               	btfss	status,2,c
   995  000B94  EFCE  F005         	goto	u1021
   996  000B98  EFD0  F005         	goto	u1020
   997  000B9C                     u1021:
   998  000B9C  EF10  F006         	goto	l1634
   999  000BA0                     u1020:
  1000  000BA0                     l1628:
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  1004  000BA0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1005  000BA4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1006  000BA8  2ADE               	incf	postinc2,f,c
  1007  000BAA  0E00               	movlw	0
  1008  000BAC  22DD               	addwfc	postdec2,f,c
  1009                           
  1010                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1011  000BAE  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1012  000BB2  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1013  000BB6  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1014  000BBA  0E02               	movlw	2
  1015  000BBC  26DE               	addwf	postinc2,f,c
  1016  000BBE  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1017  000BC2  0E00               	movlw	0
  1018  000BC4  22DD               	addwfc	postdec2,f,c
  1019  000BC6  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1020  000BCA  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1021  000BCE  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  1022  000BD2  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  1023  000BD6  0E00               	movlw	0
  1024  000BD8  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1025  000BDA  0EFF               	movlw	-1
  1026  000BDC  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
  1027  000BDE  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  1028  000BE0  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  1029  000BE2  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  1030  000BE4  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  1031  000BE6  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  1032  000BE8                     
  1033                           ; BSR set to: 0
  1034                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  1035  000BE8  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1036  000BEC  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1037  000BF0  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1038  000BF4  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1039  000BF8  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1040  000BFC  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1041  000C00  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1042  000C04  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1043  000C08  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1044  000C0C  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1045  000C10  EC17  F004         	call	_dtoa	;wreg free
  1046  000C14  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1047  000C18  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1048  000C1C  EF61  F006         	goto	l871
  1049  000C20                     l1634:
  1050                           
  1051                           ; BSR set to: 0
  1052                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1053  000C20  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1054  000C24  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1055  000C28  CFDE FFF6          	movff	postinc2,tblptrl
  1056  000C2C  CFDD FFF7          	movff	postdec2,tblptrh
  1057  000C30                     	if	0	;tblptru may be non-zero
  1058  000C30                     	endif
  1059  000C30                     	if	0	;tblptru may be non-zero
  1060  000C30                     	endif
  1061  000C30  0008               	tblrd		*
  1062  000C32  50F5               	movf	tablat,w,c
  1063  000C34  0A25               	xorlw	37
  1064  000C36  A4D8               	btfss	status,2,c
  1065  000C38  EF20  F006         	goto	u1031
  1066  000C3C  EF22  F006         	goto	u1030
  1067  000C40                     u1031:
  1068  000C40  EF39  F006         	goto	l1644
  1069  000C44                     u1030:
  1070  000C44                     
  1071                           ; BSR set to: 0
  1072                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1073  000C44  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1074  000C48  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1075  000C4C  2ADE               	incf	postinc2,f,c
  1076  000C4E  0E00               	movlw	0
  1077  000C50  22DD               	addwfc	postdec2,f,c
  1078  000C52                     
  1079                           ; BSR set to: 0
  1080                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1081  000C52  0E00               	movlw	0
  1082  000C54  6E02               	movwf	(fputc@c+1)^0,c
  1083  000C56  0E25               	movlw	37
  1084  000C58  6E01               	movwf	fputc@c^0,c
  1085  000C5A  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1086  000C5E  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1087  000C62  ECAF  F009         	call	_fputc	;wreg free
  1088  000C66                     l1640:
  1089                           
  1090                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1091  000C66  0E00               	movlw	0
  1092  000C68  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1093  000C6A  0E01               	movlw	1
  1094  000C6C  6E40               	movwf	?_vfpfcnvrt^0,c
  1095  000C6E  EF61  F006         	goto	l871
  1096  000C72                     l1644:
  1097                           
  1098                           ; BSR set to: 0
  1099                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1100  000C72  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1101  000C76  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1102  000C7A  2ADE               	incf	postinc2,f,c
  1103  000C7C  0E00               	movlw	0
  1104  000C7E  22DD               	addwfc	postdec2,f,c
  1105  000C80                     
  1106                           ; BSR set to: 0
  1107                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1108  000C80  0E00               	movlw	0
  1109  000C82  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1110  000C84  0E00               	movlw	0
  1111  000C86  6E40               	movwf	?_vfpfcnvrt^0,c
  1112  000C88  EF61  F006         	goto	l871
  1113  000C8C                     l1650:
  1114                           
  1115                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1116  000C8C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1117  000C90  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1118  000C94  CFDE FFF6          	movff	postinc2,tblptrl
  1119  000C98  CFDD FFF7          	movff	postdec2,tblptrh
  1120  000C9C                     	if	0	;tblptru may be non-zero
  1121  000C9C                     	endif
  1122  000C9C                     	if	0	;tblptru may be non-zero
  1123  000C9C                     	endif
  1124  000C9C  0008               	tblrd		*
  1125  000C9E  50F5               	movf	tablat,w,c
  1126  000CA0  6E01               	movwf	fputc@c^0,c
  1127  000CA2  6A02               	clrf	(fputc@c+1)^0,c
  1128  000CA4  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1129  000CA8  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1130  000CAC  ECAF  F009         	call	_fputc	;wreg free
  1131  000CB0                     
  1132                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1133  000CB0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1134  000CB4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1135  000CB8  2ADE               	incf	postinc2,f,c
  1136  000CBA  0E00               	movlw	0
  1137  000CBC  22DD               	addwfc	postdec2,f,c
  1138  000CBE  EF33  F006         	goto	l1640
  1139  000CC2                     l871:
  1140  000CC2  0012               	return		;funcret
  1141  000CC4                     __end_of_vfpfcnvrt:
  1142                           	callstack 0
  1143                           
  1144 ;; *************** function _dtoa *****************
  1145 ;; Defined at:
  1146 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1149 ;;		 -> sprintf@f(6), 
  1150 ;;  d               8   29[COMRAM] long long 
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;  n               8   53[COMRAM] long long 
  1153 ;;  i               2   61[COMRAM] int 
  1154 ;;  s               2   51[COMRAM] int 
  1155 ;;  w               2   49[COMRAM] int 
  1156 ;;  p               2   47[COMRAM] int 
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  2   27[COMRAM] int 
  1159 ;; Registers used:
  1160 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1166 ;;      Params:        10       0       0       0       0       0       0       0       0
  1167 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1168 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1169 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1170 ;;Total ram usage:       36 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    4
  1173 ;; This function calls:
  1174 ;;		___aodiv
  1175 ;;		___aomod
  1176 ;;		_abs
  1177 ;;		_pad
  1178 ;; This function is called by:
  1179 ;;		_vfpfcnvrt
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           	psect	text4
  1184  00082E                     __ptext4:
  1185                           	callstack 0
  1186  00082E                     _dtoa:
  1187                           	callstack 23
  1188  00082E                     
  1189                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  1190  00082E  C01E  F036         	movff	dtoa@d,dtoa@n
  1191  000832  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1192  000836  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1193  00083A  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1194  00083E  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1195  000842  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1196  000846  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1197  00084A  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1198  00084E                     
  1199                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  1200  00084E  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1201  000850  EF2C  F004         	goto	u851
  1202  000854  EF2F  F004         	goto	u850
  1203  000858                     u851:
  1204  000858  0E01               	movlw	1
  1205  00085A  EF30  F004         	goto	u860
  1206  00085E                     u850:
  1207  00085E  0E00               	movlw	0
  1208  000860                     u860:
  1209  000860  6E34               	movwf	dtoa@s^0,c
  1210  000862  6A35               	clrf	(dtoa@s+1)^0,c
  1211                           
  1212                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1213  000864  5034               	movf	dtoa@s^0,w,c
  1214  000866  1035               	iorwf	(dtoa@s+1)^0,w,c
  1215  000868  B4D8               	btfsc	status,2,c
  1216  00086A  EF39  F004         	goto	u871
  1217  00086E  EF3B  F004         	goto	u870
  1218  000872                     u871:
  1219  000872  EF4B  F004         	goto	l1560
  1220  000876                     u870:
  1221  000876                     
  1222                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1223  000876  1E3D               	comf	(dtoa@n+7)^0,f,c
  1224  000878  1E3C               	comf	(dtoa@n+6)^0,f,c
  1225  00087A  1E3B               	comf	(dtoa@n+5)^0,f,c
  1226  00087C  1E3A               	comf	(dtoa@n+4)^0,f,c
  1227  00087E  1E39               	comf	(dtoa@n+3)^0,f,c
  1228  000880  1E38               	comf	(dtoa@n+2)^0,f,c
  1229  000882  1E37               	comf	(dtoa@n+1)^0,f,c
  1230  000884  6C36               	negf	dtoa@n^0,c
  1231  000886  0E00               	movlw	0
  1232  000888  2237               	addwfc	(dtoa@n+1)^0,f,c
  1233  00088A  2238               	addwfc	(dtoa@n+2)^0,f,c
  1234  00088C  2239               	addwfc	(dtoa@n+3)^0,f,c
  1235  00088E  223A               	addwfc	(dtoa@n+4)^0,f,c
  1236  000890  223B               	addwfc	(dtoa@n+5)^0,f,c
  1237  000892  223C               	addwfc	(dtoa@n+6)^0,f,c
  1238  000894  223D               	addwfc	(dtoa@n+7)^0,f,c
  1239  000896                     l1560:
  1240                           
  1241                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1242  000896  0100               	movlb	0	; () banked
  1243  000898  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1244  00089A  EF51  F004         	goto	u881
  1245  00089E  EF53  F004         	goto	u880
  1246  0008A2                     u881:
  1247  0008A2  EF54  F004         	goto	l1564
  1248  0008A6                     u880:
  1249  0008A6                     
  1250                           ; BSR set to: 0
  1251                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1252  0008A6  9366               	bcf	_flags& (0+255),1,b
  1253  0008A8                     l1564:
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1257  0008A8  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1258  0008AA  EF61  F004         	goto	u890
  1259  0008AE  5165               	movf	(_prec+1)& (0+255),w,b
  1260  0008B0  E106               	bnz	u891
  1261  0008B2  0564               	decf	_prec& (0+255),w,b
  1262  0008B4  B0D8               	btfsc	status,0,c
  1263  0008B6  EF5F  F004         	goto	u891
  1264  0008BA  EF61  F004         	goto	u890
  1265  0008BE                     u891:
  1266  0008BE  EF67  F004         	goto	l844
  1267  0008C2                     u890:
  1268  0008C2                     
  1269                           ; BSR set to: 0
  1270  0008C2  0E00               	movlw	0
  1271  0008C4  6E31               	movwf	(dtoa@p+1)^0,c
  1272  0008C6  0E01               	movlw	1
  1273  0008C8  6E30               	movwf	dtoa@p^0,c
  1274  0008CA  EF6B  F004         	goto	l846
  1275  0008CE                     l844:
  1276                           
  1277                           ; BSR set to: 0
  1278  0008CE  C064  F030         	movff	_prec,dtoa@p
  1279  0008D2  C065  F031         	movff	_prec+1,dtoa@p+1
  1280  0008D6                     l846:
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1284  0008D6  C062  F032         	movff	_width,dtoa@w
  1285  0008DA  C063  F033         	movff	_width+1,dtoa@w+1
  1286  0008DE                     
  1287                           ; BSR set to: 0
  1288                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1289  0008DE  5034               	movf	dtoa@s^0,w,c
  1290  0008E0  1035               	iorwf	(dtoa@s+1)^0,w,c
  1291  0008E2  A4D8               	btfss	status,2,c
  1292  0008E4  EF76  F004         	goto	u901
  1293  0008E8  EF78  F004         	goto	u900
  1294  0008EC                     u901:
  1295  0008EC  EF7F  F004         	goto	l1572
  1296  0008F0                     u900:
  1297  0008F0                     
  1298                           ; BSR set to: 0
  1299  0008F0  A566               	btfss	_flags& (0+255),2,b
  1300  0008F2  EF7D  F004         	goto	u911
  1301  0008F6  EF7F  F004         	goto	u910
  1302  0008FA                     u911:
  1303  0008FA  EF82  F004         	goto	l1574
  1304  0008FE                     u910:
  1305  0008FE                     l1572:
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 306:         --w;
  1309  0008FE  0632               	decf	dtoa@w^0,f,c
  1310  000900  A0D8               	btfss	status,0,c
  1311  000902  0633               	decf	(dtoa@w+1)^0,f,c
  1312  000904                     l1574:
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1316  000904  0E00               	movlw	0
  1317  000906  6E3F               	movwf	(dtoa@i+1)^0,c
  1318  000908  0E1F               	movlw	31
  1319  00090A  6E3E               	movwf	dtoa@i^0,c
  1320  00090C                     
  1321                           ; BSR set to: 0
  1322                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1323  00090C  0E00               	movlw	0
  1324  00090E  6F89               	movwf	(_dbuf+31)& (0+255),b
  1325                           
  1326                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1327  000910  EF06  F005         	goto	l1588
  1328  000914                     l1578:
  1329                           
  1330                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 313:         --i;
  1331  000914  063E               	decf	dtoa@i^0,f,c
  1332  000916  A0D8               	btfss	status,0,c
  1333  000918  063F               	decf	(dtoa@i+1)^0,f,c
  1334  00091A                     
  1335                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1336  00091A  0E6A               	movlw	low _dbuf
  1337  00091C  243E               	addwf	dtoa@i^0,w,c
  1338  00091E  6ED9               	movwf	fsr2l,c
  1339  000920  0E00               	movlw	high _dbuf
  1340  000922  203F               	addwfc	(dtoa@i+1)^0,w,c
  1341  000924  6EDA               	movwf	fsr2h,c
  1342  000926  C036  F001         	movff	dtoa@n,___aomod@dividend
  1343  00092A  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1344  00092E  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1345  000932  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1346  000936  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1347  00093A  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1348  00093E  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1349  000942  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1350  000946  0E0A               	movlw	10
  1351  000948  6E09               	movwf	___aomod@divisor^0,c
  1352  00094A  0E00               	movlw	0
  1353  00094C  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1354  00094E  0E00               	movlw	0
  1355  000950  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1356  000952  0E00               	movlw	0
  1357  000954  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1358  000956  0E00               	movlw	0
  1359  000958  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1360  00095A  0E00               	movlw	0
  1361  00095C  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1362  00095E  0E00               	movlw	0
  1363  000960  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1364  000962  0E00               	movlw	0
  1365  000964  6E10               	movwf	(___aomod@divisor+7)^0,c
  1366  000966  EC26  F007         	call	___aomod	;wreg free
  1367  00096A  C001  F026         	movff	?___aomod,??_dtoa
  1368  00096E  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1369  000972  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1370  000976  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1371  00097A  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1372  00097E  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1373  000982  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1374  000986  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1375  00098A  C026  F013         	movff	??_dtoa,abs@a
  1376  00098E  C028  F014         	movff	??_dtoa+2,abs@a+1
  1377  000992  EC18  F00C         	call	_abs	;wreg free
  1378  000996  5013               	movf	?_abs^0,w,c
  1379  000998  0F30               	addlw	48
  1380  00099A  6EDF               	movwf	indf2,c
  1381  00099C                     
  1382                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 315:         --p;
  1383  00099C  0630               	decf	dtoa@p^0,f,c
  1384  00099E  A0D8               	btfss	status,0,c
  1385  0009A0  0631               	decf	(dtoa@p+1)^0,f,c
  1386  0009A2                     
  1387                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 316:         --w;
  1388  0009A2  0632               	decf	dtoa@w^0,f,c
  1389  0009A4  A0D8               	btfss	status,0,c
  1390  0009A6  0633               	decf	(dtoa@w+1)^0,f,c
  1391  0009A8                     
  1392                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1393  0009A8  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1394  0009AC  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1395  0009B0  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1396  0009B4  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1397  0009B8  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1398  0009BC  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1399  0009C0  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1400  0009C4  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1401  0009C8  0E0A               	movlw	10
  1402  0009CA  6E09               	movwf	___aodiv@divisor^0,c
  1403  0009CC  0E00               	movlw	0
  1404  0009CE  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1405  0009D0  0E00               	movlw	0
  1406  0009D2  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1407  0009D4  0E00               	movlw	0
  1408  0009D6  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1409  0009D8  0E00               	movlw	0
  1410  0009DA  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1411  0009DC  0E00               	movlw	0
  1412  0009DE  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1413  0009E0  0E00               	movlw	0
  1414  0009E2  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1415  0009E4  0E00               	movlw	0
  1416  0009E6  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1417  0009E8  EC62  F006         	call	___aodiv	;wreg free
  1418  0009EC  C001  F036         	movff	?___aodiv,dtoa@n
  1419  0009F0  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1420  0009F4  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1421  0009F8  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1422  0009FC  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1423  000A00  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1424  000A04  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1425  000A08  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1426  000A0C                     l1588:
  1427                           
  1428                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1429  000A0C  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1430  000A0E  EF11  F005         	goto	u921
  1431  000A12  503F               	movf	(dtoa@i+1)^0,w,c
  1432  000A14  E108               	bnz	u920
  1433  000A16  043E               	decf	dtoa@i^0,w,c
  1434  000A18  A0D8               	btfss	status,0,c
  1435  000A1A  EF11  F005         	goto	u921
  1436  000A1E  EF13  F005         	goto	u920
  1437  000A22                     u921:
  1438  000A22  EF44  F005         	goto	l1598
  1439  000A26                     u920:
  1440  000A26  5036               	movf	dtoa@n^0,w,c
  1441  000A28  1037               	iorwf	(dtoa@n+1)^0,w,c
  1442  000A2A  1038               	iorwf	(dtoa@n+2)^0,w,c
  1443  000A2C  1039               	iorwf	(dtoa@n+3)^0,w,c
  1444  000A2E  103A               	iorwf	(dtoa@n+4)^0,w,c
  1445  000A30  103B               	iorwf	(dtoa@n+5)^0,w,c
  1446  000A32  103C               	iorwf	(dtoa@n+6)^0,w,c
  1447  000A34  103D               	iorwf	(dtoa@n+7)^0,w,c
  1448  000A36  A4D8               	btfss	status,2,c
  1449  000A38  EF20  F005         	goto	u931
  1450  000A3C  EF22  F005         	goto	u930
  1451  000A40                     u931:
  1452  000A40  EF8A  F004         	goto	l1578
  1453  000A44                     u930:
  1454  000A44  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1455  000A46  EF2F  F005         	goto	u940
  1456  000A4A  5031               	movf	(dtoa@p+1)^0,w,c
  1457  000A4C  E106               	bnz	u941
  1458  000A4E  0430               	decf	dtoa@p^0,w,c
  1459  000A50  B0D8               	btfsc	status,0,c
  1460  000A52  EF2D  F005         	goto	u941
  1461  000A56  EF2F  F005         	goto	u940
  1462  000A5A                     u941:
  1463  000A5A  EF8A  F004         	goto	l1578
  1464  000A5E                     u940:
  1465  000A5E  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1466  000A60  EF3A  F005         	goto	u951
  1467  000A64  5033               	movf	(dtoa@w+1)^0,w,c
  1468  000A66  E108               	bnz	u950
  1469  000A68  0432               	decf	dtoa@w^0,w,c
  1470  000A6A  A0D8               	btfss	status,0,c
  1471  000A6C  EF3A  F005         	goto	u951
  1472  000A70  EF3C  F005         	goto	u950
  1473  000A74                     u951:
  1474  000A74  EF44  F005         	goto	l1598
  1475  000A78                     u950:
  1476  000A78  0100               	movlb	0	; () banked
  1477  000A7A  B366               	btfsc	_flags& (0+255),1,b
  1478  000A7C  EF42  F005         	goto	u961
  1479  000A80  EF44  F005         	goto	u960
  1480  000A84                     u961:
  1481  000A84  EF8A  F004         	goto	l1578
  1482  000A88                     u960:
  1483  000A88                     l1598:
  1484                           
  1485                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1486  000A88  5034               	movf	dtoa@s^0,w,c
  1487  000A8A  1035               	iorwf	(dtoa@s+1)^0,w,c
  1488  000A8C  A4D8               	btfss	status,2,c
  1489  000A8E  EF4B  F005         	goto	u971
  1490  000A92  EF4D  F005         	goto	u970
  1491  000A96                     u971:
  1492  000A96  EF55  F005         	goto	l1602
  1493  000A9A                     u970:
  1494  000A9A  0100               	movlb	0	; () banked
  1495  000A9C  A566               	btfss	_flags& (0+255),2,b
  1496  000A9E  EF53  F005         	goto	u981
  1497  000AA2  EF55  F005         	goto	u980
  1498  000AA6                     u981:
  1499  000AA6  EF73  F005         	goto	l1612
  1500  000AAA                     u980:
  1501  000AAA                     l1602:
  1502                           
  1503                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 322:         --i;
  1504  000AAA  063E               	decf	dtoa@i^0,f,c
  1505  000AAC  A0D8               	btfss	status,0,c
  1506  000AAE  063F               	decf	(dtoa@i+1)^0,f,c
  1507  000AB0                     
  1508                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1509  000AB0  5034               	movf	dtoa@s^0,w,c
  1510  000AB2  1035               	iorwf	(dtoa@s+1)^0,w,c
  1511  000AB4  A4D8               	btfss	status,2,c
  1512  000AB6  EF5F  F005         	goto	u991
  1513  000ABA  EF61  F005         	goto	u990
  1514  000ABE                     u991:
  1515  000ABE  EF67  F005         	goto	l1608
  1516  000AC2                     u990:
  1517  000AC2  0E00               	movlw	0
  1518  000AC4  6E2F               	movwf	(_dtoa$915+1)^0,c
  1519  000AC6  0E2B               	movlw	43
  1520  000AC8  6E2E               	movwf	_dtoa$915^0,c
  1521  000ACA  EF6B  F005         	goto	l1610
  1522  000ACE                     l1608:
  1523  000ACE  0E00               	movlw	0
  1524  000AD0  6E2F               	movwf	(_dtoa$915+1)^0,c
  1525  000AD2  0E2D               	movlw	45
  1526  000AD4  6E2E               	movwf	_dtoa$915^0,c
  1527  000AD6                     l1610:
  1528  000AD6  0E6A               	movlw	low _dbuf
  1529  000AD8  243E               	addwf	dtoa@i^0,w,c
  1530  000ADA  6ED9               	movwf	fsr2l,c
  1531  000ADC  0E00               	movlw	high _dbuf
  1532  000ADE  203F               	addwfc	(dtoa@i+1)^0,w,c
  1533  000AE0  6EDA               	movwf	fsr2h,c
  1534  000AE2  C02E  FFDF         	movff	_dtoa$915,indf2
  1535  000AE6                     l1612:
  1536                           
  1537                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1538  000AE6  C01C  F011         	movff	dtoa@fp,pad@fp
  1539  000AEA  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1540  000AEE  0E6A               	movlw	low _dbuf
  1541  000AF0  243E               	addwf	dtoa@i^0,w,c
  1542  000AF2  6E13               	movwf	pad@buf^0,c
  1543  000AF4  0E00               	movlw	high _dbuf
  1544  000AF6  203F               	addwfc	(dtoa@i+1)^0,w,c
  1545  000AF8  6E14               	movwf	(pad@buf+1)^0,c
  1546  000AFA  C032  F015         	movff	dtoa@w,pad@p
  1547  000AFE  C033  F016         	movff	dtoa@w+1,pad@p+1
  1548  000B02  EC14  F00A         	call	_pad	;wreg free
  1549  000B06  C011  F01C         	movff	?_pad,?_dtoa
  1550  000B0A  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1551  000B0E  0012               	return		;funcret
  1552  000B10                     __end_of_dtoa:
  1553                           	callstack 0
  1554                           
  1555 ;; *************** function _pad *****************
  1556 ;; Defined at:
  1557 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1560 ;;		 -> sprintf@f(6), 
  1561 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1562 ;;		 -> dbuf(32), 
  1563 ;;  p               2   20[COMRAM] int 
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  w               2   25[COMRAM] int 
  1566 ;;  i               2   23[COMRAM] int 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  2   16[COMRAM] int 
  1569 ;; Registers used:
  1570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1576 ;;      Params:         6       0       0       0       0       0       0       0       0
  1577 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1578 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1579 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1580 ;;Total ram usage:       11 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; Hardware stack levels required when called:    3
  1583 ;; This function calls:
  1584 ;;		_fputc
  1585 ;;		_fputs
  1586 ;;		_strlen
  1587 ;; This function is called by:
  1588 ;;		_dtoa
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           	psect	text5
  1593  001428                     __ptext5:
  1594                           	callstack 0
  1595  001428                     _pad:
  1596                           	callstack 23
  1597  001428                     
  1598                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1599  001428  0100               	movlb	0	; () banked
  1600  00142A  A166               	btfss	_flags& (0+255),0,b
  1601  00142C  EF1A  F00A         	goto	u801
  1602  001430  EF1C  F00A         	goto	u800
  1603  001434                     u801:
  1604  001434  EF26  F00A         	goto	l1532
  1605  001438                     u800:
  1606  001438                     
  1607                           ; BSR set to: 0
  1608                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1609  001438  C013  F00A         	movff	pad@buf,fputs@s
  1610  00143C  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1611  001440  C011  F00C         	movff	pad@fp,fputs@fp
  1612  001444  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1613  001448  ECF6  F00B         	call	_fputs	;wreg free
  1614  00144C                     l1532:
  1615                           
  1616                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1617  00144C  BE16               	btfsc	(pad@p+1)^0,7,c
  1618  00144E  EF2B  F00A         	goto	u811
  1619  001452  EF2D  F00A         	goto	u810
  1620  001456                     u811:
  1621  001456  EF33  F00A         	goto	l1536
  1622  00145A                     u810:
  1623  00145A  C015  F01A         	movff	pad@p,pad@w
  1624  00145E  C016  F01B         	movff	pad@p+1,pad@w+1
  1625  001462  EF37  F00A         	goto	l833
  1626  001466                     l1536:
  1627  001466  0E00               	movlw	0
  1628  001468  6E1B               	movwf	(pad@w+1)^0,c
  1629  00146A  0E00               	movlw	0
  1630  00146C  6E1A               	movwf	pad@w^0,c
  1631  00146E                     l833:
  1632                           
  1633                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1634  00146E  0E00               	movlw	0
  1635  001470  6E19               	movwf	(pad@i+1)^0,c
  1636  001472  0E00               	movlw	0
  1637  001474  6E18               	movwf	pad@i^0,c
  1638                           
  1639                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1640  001476  EF49  F00A         	goto	l1542
  1641  00147A                     l1538:
  1642                           
  1643                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1644  00147A  0E00               	movlw	0
  1645  00147C  6E02               	movwf	(fputc@c+1)^0,c
  1646  00147E  0E20               	movlw	32
  1647  001480  6E01               	movwf	fputc@c^0,c
  1648  001482  C011  F003         	movff	pad@fp,fputc@fp
  1649  001486  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1650  00148A  ECAF  F009         	call	_fputc	;wreg free
  1651  00148E                     
  1652                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1653  00148E  4A18               	infsnz	pad@i^0,f,c
  1654  001490  2A19               	incf	(pad@i+1)^0,f,c
  1655  001492                     l1542:
  1656                           
  1657                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1658  001492  501A               	movf	pad@w^0,w,c
  1659  001494  5C18               	subwf	pad@i^0,w,c
  1660  001496  5019               	movf	(pad@i+1)^0,w,c
  1661  001498  0A80               	xorlw	128
  1662  00149A  6E17               	movwf	??_pad^0,c
  1663  00149C  501B               	movf	(pad@w+1)^0,w,c
  1664  00149E  0A80               	xorlw	128
  1665  0014A0  5817               	subwfb	??_pad^0,w,c
  1666  0014A2  A0D8               	btfss	status,0,c
  1667  0014A4  EF56  F00A         	goto	u821
  1668  0014A8  EF58  F00A         	goto	u820
  1669  0014AC                     u821:
  1670  0014AC  EF3D  F00A         	goto	l1538
  1671  0014B0                     u820:
  1672  0014B0                     
  1673                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1674  0014B0  0100               	movlb	0	; () banked
  1675  0014B2  B166               	btfsc	_flags& (0+255),0,b
  1676  0014B4  EF5E  F00A         	goto	u831
  1677  0014B8  EF60  F00A         	goto	u830
  1678  0014BC                     u831:
  1679  0014BC  EF6A  F00A         	goto	l1546
  1680  0014C0                     u830:
  1681  0014C0                     
  1682                           ; BSR set to: 0
  1683                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1684  0014C0  C013  F00A         	movff	pad@buf,fputs@s
  1685  0014C4  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1686  0014C8  C011  F00C         	movff	pad@fp,fputs@fp
  1687  0014CC  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1688  0014D0  ECF6  F00B         	call	_fputs	;wreg free
  1689  0014D4                     l1546:
  1690                           
  1691                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1692  0014D4  C013  F001         	movff	pad@buf,strlen@s
  1693  0014D8  C014  F002         	movff	pad@buf+1,strlen@s+1
  1694  0014DC  EC56  F00C         	call	_strlen	;wreg free
  1695  0014E0  501A               	movf	pad@w^0,w,c
  1696  0014E2  2401               	addwf	?_strlen^0,w,c
  1697  0014E4  6E11               	movwf	?_pad^0,c
  1698  0014E6  501B               	movf	(pad@w+1)^0,w,c
  1699  0014E8  2002               	addwfc	(?_strlen+1)^0,w,c
  1700  0014EA  6E12               	movwf	(?_pad+1)^0,c
  1701  0014EC  0012               	return		;funcret
  1702  0014EE                     __end_of_pad:
  1703                           	callstack 0
  1704                           
  1705 ;; *************** function _strlen *****************
  1706 ;; Defined at:
  1707 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\strlen.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1710 ;;		 -> dbuf(32), 
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1713 ;;		 -> dbuf(32), 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  2    0[COMRAM] unsigned int 
  1716 ;; Registers used:
  1717 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1723 ;;      Params:         2       0       0       0       0       0       0       0       0
  1724 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1725 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1726 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1727 ;;Total ram usage:        4 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		_pad
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text6
  1737  0018AC                     __ptext6:
  1738                           	callstack 0
  1739  0018AC                     _strlen:
  1740                           	callstack 25
  1741  0018AC  C001  F003         	movff	strlen@s,strlen@a
  1742  0018B0  C002  F004         	movff	strlen@s+1,strlen@a+1
  1743  0018B4  EF5E  F00C         	goto	l1442
  1744  0018B8                     l1440:
  1745  0018B8  4A01               	infsnz	strlen@s^0,f,c
  1746  0018BA  2A02               	incf	(strlen@s+1)^0,f,c
  1747  0018BC                     l1442:
  1748  0018BC  C001  FFD9         	movff	strlen@s,fsr2l
  1749  0018C0  C002  FFDA         	movff	strlen@s+1,fsr2h
  1750  0018C4  50DF               	movf	indf2,w,c
  1751  0018C6  A4D8               	btfss	status,2,c
  1752  0018C8  EF68  F00C         	goto	u661
  1753  0018CC  EF6A  F00C         	goto	u660
  1754  0018D0                     u661:
  1755  0018D0  EF5C  F00C         	goto	l1440
  1756  0018D4                     u660:
  1757  0018D4  5003               	movf	strlen@a^0,w,c
  1758  0018D6  5C01               	subwf	strlen@s^0,w,c
  1759  0018D8  6E01               	movwf	?_strlen^0,c
  1760  0018DA  5004               	movf	(strlen@a+1)^0,w,c
  1761  0018DC  5802               	subwfb	(strlen@s+1)^0,w,c
  1762  0018DE  6E02               	movwf	(?_strlen+1)^0,c
  1763  0018E0  0012               	return		;funcret
  1764  0018E2                     __end_of_strlen:
  1765                           	callstack 0
  1766                           
  1767 ;; *************** function _fputs *****************
  1768 ;; Defined at:
  1769 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_fputs.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1772 ;;		 -> dbuf(32), 
  1773 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1774 ;;		 -> sprintf@f(6), 
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;  i               2   14[COMRAM] int 
  1777 ;;  c               1   13[COMRAM] unsigned char 
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  2    9[COMRAM] int 
  1780 ;; Registers used:
  1781 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1787 ;;      Params:         4       0       0       0       0       0       0       0       0
  1788 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1789 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1790 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1791 ;;Total ram usage:        7 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; Hardware stack levels required when called:    2
  1794 ;; This function calls:
  1795 ;;		_fputc
  1796 ;; This function is called by:
  1797 ;;		_pad
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text7
  1802  0017EC                     __ptext7:
  1803                           	callstack 0
  1804  0017EC                     _fputs:
  1805                           	callstack 23
  1806  0017EC  0E00               	movlw	0
  1807  0017EE  6E10               	movwf	(fputs@i+1)^0,c
  1808  0017F0  0E00               	movlw	0
  1809  0017F2  6E0F               	movwf	fputs@i^0,c
  1810  0017F4  EF07  F00C         	goto	l1436
  1811  0017F8                     l1432:
  1812  0017F8  C00E  F001         	movff	fputs@c,fputc@c
  1813  0017FC  6A02               	clrf	(fputc@c+1)^0,c
  1814  0017FE  C00C  F003         	movff	fputs@fp,fputc@fp
  1815  001802  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1816  001806  ECAF  F009         	call	_fputc	;wreg free
  1817  00180A  4A0F               	infsnz	fputs@i^0,f,c
  1818  00180C  2A10               	incf	(fputs@i+1)^0,f,c
  1819  00180E                     l1436:
  1820  00180E  500F               	movf	fputs@i^0,w,c
  1821  001810  240A               	addwf	fputs@s^0,w,c
  1822  001812  6ED9               	movwf	fsr2l,c
  1823  001814  5010               	movf	(fputs@i+1)^0,w,c
  1824  001816  200B               	addwfc	(fputs@s+1)^0,w,c
  1825  001818  6EDA               	movwf	fsr2h,c
  1826  00181A  50DF               	movf	indf2,w,c
  1827  00181C  6E0E               	movwf	fputs@c^0,c
  1828  00181E  500E               	movf	fputs@c^0,w,c
  1829  001820  A4D8               	btfss	status,2,c
  1830  001822  EF15  F00C         	goto	u651
  1831  001826  EF17  F00C         	goto	u650
  1832  00182A                     u651:
  1833  00182A  EFFC  F00B         	goto	l1432
  1834  00182E                     u650:
  1835  00182E  0012               	return		;funcret
  1836  001830                     __end_of_fputs:
  1837                           	callstack 0
  1838                           
  1839 ;; *************** function _fputc *****************
  1840 ;; Defined at:
  1841 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_fputc.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;  c               2    0[COMRAM] int 
  1844 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1845 ;;		 -> sprintf@f(6), 
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;		None
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  2    0[COMRAM] int 
  1850 ;; Registers used:
  1851 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1857 ;;      Params:         4       0       0       0       0       0       0       0       0
  1858 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1859 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1860 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1861 ;;Total ram usage:        9 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    1
  1864 ;; This function calls:
  1865 ;;		_putch
  1866 ;; This function is called by:
  1867 ;;		_pad
  1868 ;;		_vfpfcnvrt
  1869 ;;		_fputs
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           	psect	text8
  1874  00135E                     __ptext8:
  1875                           	callstack 0
  1876  00135E                     _fputc:
  1877                           	callstack 26
  1878  00135E  5003               	movf	fputc@fp^0,w,c
  1879  001360  1004               	iorwf	(fputc@fp+1)^0,w,c
  1880  001362  B4D8               	btfsc	status,2,c
  1881  001364  EFB6  F009         	goto	u611
  1882  001368  EFB8  F009         	goto	u610
  1883  00136C                     u611:
  1884  00136C  EFC1  F009         	goto	l1420
  1885  001370                     u610:
  1886  001370  5003               	movf	fputc@fp^0,w,c
  1887  001372  1004               	iorwf	(fputc@fp+1)^0,w,c
  1888  001374  A4D8               	btfss	status,2,c
  1889  001376  EFBF  F009         	goto	u621
  1890  00137A  EFC1  F009         	goto	u620
  1891  00137E                     u621:
  1892  00137E  EFC6  F009         	goto	l1422
  1893  001382                     u620:
  1894  001382                     l1420:
  1895  001382  5001               	movf	fputc@c^0,w,c
  1896  001384  EC7C  F00C         	call	_putch
  1897  001388  EF13  F00A         	goto	l897
  1898  00138C                     l1422:
  1899  00138C  EE20 F004          	lfsr	2,4
  1900  001390  5003               	movf	fputc@fp^0,w,c
  1901  001392  26D9               	addwf	fsr2l,f,c
  1902  001394  5004               	movf	(fputc@fp+1)^0,w,c
  1903  001396  22DA               	addwfc	fsr2h,f,c
  1904  001398  50DE               	movf	postinc2,w,c
  1905  00139A  10DE               	iorwf	postinc2,w,c
  1906  00139C  B4D8               	btfsc	status,2,c
  1907  00139E  EFD3  F009         	goto	u631
  1908  0013A2  EFD5  F009         	goto	u630
  1909  0013A6                     u631:
  1910  0013A6  EFF0  F009         	goto	l1426
  1911  0013AA                     u630:
  1912  0013AA  EE20 F004          	lfsr	2,4
  1913  0013AE  5003               	movf	fputc@fp^0,w,c
  1914  0013B0  26D9               	addwf	fsr2l,f,c
  1915  0013B2  5004               	movf	(fputc@fp+1)^0,w,c
  1916  0013B4  22DA               	addwfc	fsr2h,f,c
  1917  0013B6  EE10 F002          	lfsr	1,2
  1918  0013BA  5003               	movf	fputc@fp^0,w,c
  1919  0013BC  26E1               	addwf	fsr1l,f,c
  1920  0013BE  5004               	movf	(fputc@fp+1)^0,w,c
  1921  0013C0  22E2               	addwfc	fsr1h,f,c
  1922  0013C2  50DE               	movf	postinc2,w,c
  1923  0013C4  5CE6               	subwf	postinc1,w,c
  1924  0013C6  50E6               	movf	postinc1,w,c
  1925  0013C8  0A80               	xorlw	128
  1926  0013CA  6E09               	movwf	(??_fputc+4)^0,c
  1927  0013CC  50DE               	movf	postinc2,w,c
  1928  0013CE  0A80               	xorlw	128
  1929  0013D0  5809               	subwfb	(??_fputc+4)^0,w,c
  1930  0013D2  B0D8               	btfsc	status,0,c
  1931  0013D4  EFEE  F009         	goto	u641
  1932  0013D8  EFF0  F009         	goto	u640
  1933  0013DC                     u641:
  1934  0013DC  EF13  F00A         	goto	l897
  1935  0013E0                     u640:
  1936  0013E0                     l1426:
  1937  0013E0  EE20 F002          	lfsr	2,2
  1938  0013E4  5003               	movf	fputc@fp^0,w,c
  1939  0013E6  26D9               	addwf	fsr2l,f,c
  1940  0013E8  5004               	movf	(fputc@fp+1)^0,w,c
  1941  0013EA  22DA               	addwfc	fsr2h,f,c
  1942  0013EC  CFDE F005          	movff	postinc2,??_fputc
  1943  0013F0  CFDD F006          	movff	postdec2,??_fputc+1
  1944  0013F4  C003  FFD9         	movff	fputc@fp,fsr2l
  1945  0013F8  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1946  0013FC  CFDE F007          	movff	postinc2,??_fputc+2
  1947  001400  CFDD F008          	movff	postdec2,??_fputc+3
  1948  001404  5005               	movf	??_fputc^0,w,c
  1949  001406  2407               	addwf	(??_fputc+2)^0,w,c
  1950  001408  6ED9               	movwf	fsr2l,c
  1951  00140A  5006               	movf	(??_fputc+1)^0,w,c
  1952  00140C  2008               	addwfc	(??_fputc+3)^0,w,c
  1953  00140E  6EDA               	movwf	fsr2h,c
  1954  001410  C001  FFDF         	movff	fputc@c,indf2
  1955  001414  EE20 F002          	lfsr	2,2
  1956  001418  5003               	movf	fputc@fp^0,w,c
  1957  00141A  26D9               	addwf	fsr2l,f,c
  1958  00141C  5004               	movf	(fputc@fp+1)^0,w,c
  1959  00141E  22DA               	addwfc	fsr2h,f,c
  1960  001420  2ADE               	incf	postinc2,f,c
  1961  001422  0E00               	movlw	0
  1962  001424  22DD               	addwfc	postdec2,f,c
  1963  001426                     l897:
  1964  001426  0012               	return		;funcret
  1965  001428                     __end_of_fputc:
  1966                           	callstack 0
  1967                           
  1968 ;; *************** function _putch *****************
  1969 ;; Defined at:
  1970 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\putch.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;  c               1    wreg     unsigned char 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  c               1    0[COMRAM] unsigned char 
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  1    wreg      void 
  1977 ;; Registers used:
  1978 ;;		wreg
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1984 ;;      Params:         0       0       0       0       0       0       0       0       0
  1985 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1986 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1987 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1988 ;;Total ram usage:        0 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; This function calls:
  1991 ;;		Nothing
  1992 ;; This function is called by:
  1993 ;;		_fputc
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           	psect	text9
  1998  0018F8                     __ptext9:
  1999                           	callstack 0
  2000  0018F8                     _putch:
  2001                           	callstack 26
  2002  0018F8  0012               	return		;funcret
  2003  0018FA                     __end_of_putch:
  2004                           	callstack 0
  2005                           
  2006 ;; *************** function _abs *****************
  2007 ;; Defined at:
  2008 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\abs.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  a               2   18[COMRAM] int 
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;		None
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  2   18[COMRAM] int 
  2015 ;; Registers used:
  2016 ;;		wreg, status,2, status,0
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2022 ;;      Params:         2       0       0       0       0       0       0       0       0
  2023 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2024 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2025 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2026 ;;Total ram usage:        4 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_dtoa
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text10
  2036  001830                     __ptext10:
  2037                           	callstack 0
  2038  001830                     _abs:
  2039                           	callstack 26
  2040  001830  BE14               	btfsc	(abs@a+1)^0,7,c
  2041  001832  EF25  F00C         	goto	u840
  2042  001836  5014               	movf	(abs@a+1)^0,w,c
  2043  001838  E106               	bnz	u841
  2044  00183A  0413               	decf	abs@a^0,w,c
  2045  00183C  B0D8               	btfsc	status,0,c
  2046  00183E  EF23  F00C         	goto	u841
  2047  001842  EF25  F00C         	goto	u840
  2048  001846                     u841:
  2049  001846  EF33  F00C         	goto	l882
  2050  00184A                     u840:
  2051  00184A  C013  F015         	movff	abs@a,??_abs
  2052  00184E  C014  F016         	movff	abs@a+1,??_abs+1
  2053  001852  1E15               	comf	??_abs^0,f,c
  2054  001854  1E16               	comf	(??_abs+1)^0,f,c
  2055  001856  4A15               	infsnz	??_abs^0,f,c
  2056  001858  2A16               	incf	(??_abs+1)^0,f,c
  2057  00185A  C015  F013         	movff	??_abs,?_abs
  2058  00185E  C016  F014         	movff	??_abs+1,?_abs+1
  2059  001862  EF37  F00C         	goto	l885
  2060  001866                     l882:
  2061  001866  C013  F013         	movff	abs@a,?_abs
  2062  00186A  C014  F014         	movff	abs@a+1,?_abs+1
  2063  00186E                     l885:
  2064  00186E  0012               	return		;funcret
  2065  001870                     __end_of_abs:
  2066                           	callstack 0
  2067                           
  2068 ;; *************** function ___aomod *****************
  2069 ;; Defined at:
  2070 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\aomod.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;  dividend        8    0[COMRAM] long long 
  2073 ;;  divisor         8    8[COMRAM] long long 
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;  sign            1   17[COMRAM] unsigned char 
  2076 ;;  counter         1   16[COMRAM] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  8    0[COMRAM] long long 
  2079 ;; Registers used:
  2080 ;;		wreg, status,2, status,0
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2086 ;;      Params:        16       0       0       0       0       0       0       0       0
  2087 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2088 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2089 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2090 ;;Total ram usage:       18 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; This function calls:
  2093 ;;		Nothing
  2094 ;; This function is called by:
  2095 ;;		_dtoa
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text11
  2100  000E4C                     __ptext11:
  2101                           	callstack 0
  2102  000E4C                     ___aomod:
  2103                           	callstack 26
  2104  000E4C  0E00               	movlw	0
  2105  000E4E  6E12               	movwf	___aomod@sign^0,c
  2106  000E50  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2107  000E52  EF2F  F007         	goto	u740
  2108  000E56  EF2D  F007         	goto	u741
  2109  000E5A                     u741:
  2110  000E5A  EF41  F007         	goto	l1500
  2111  000E5E                     u740:
  2112  000E5E  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2113  000E60  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2114  000E62  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2115  000E64  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2116  000E66  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2117  000E68  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2118  000E6A  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2119  000E6C  6C01               	negf	___aomod@dividend^0,c
  2120  000E6E  0E00               	movlw	0
  2121  000E70  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2122  000E72  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2123  000E74  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2124  000E76  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2125  000E78  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2126  000E7A  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2127  000E7C  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2128  000E7E  0E01               	movlw	1
  2129  000E80  6E12               	movwf	___aomod@sign^0,c
  2130  000E82                     l1500:
  2131  000E82  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2132  000E84  EF48  F007         	goto	u750
  2133  000E88  EF46  F007         	goto	u751
  2134  000E8C                     u751:
  2135  000E8C  EF58  F007         	goto	l1504
  2136  000E90                     u750:
  2137  000E90  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2138  000E92  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2139  000E94  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2140  000E96  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2141  000E98  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2142  000E9A  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2143  000E9C  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2144  000E9E  6C09               	negf	___aomod@divisor^0,c
  2145  000EA0  0E00               	movlw	0
  2146  000EA2  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2147  000EA4  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2148  000EA6  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2149  000EA8  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2150  000EAA  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2151  000EAC  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2152  000EAE  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2153  000EB0                     l1504:
  2154  000EB0  5009               	movf	___aomod@divisor^0,w,c
  2155  000EB2  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2156  000EB4  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2157  000EB6  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2158  000EB8  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2159  000EBA  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2160  000EBC  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2161  000EBE  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2162  000EC0  B4D8               	btfsc	status,2,c
  2163  000EC2  EF65  F007         	goto	u761
  2164  000EC6  EF67  F007         	goto	u760
  2165  000ECA                     u761:
  2166  000ECA  EFAF  F007         	goto	l1520
  2167  000ECE                     u760:
  2168  000ECE  0E01               	movlw	1
  2169  000ED0  6E11               	movwf	___aomod@counter^0,c
  2170  000ED2  EF75  F007         	goto	l1510
  2171  000ED6                     l1508:
  2172  000ED6  90D8               	bcf	status,0,c
  2173  000ED8  3609               	rlcf	___aomod@divisor^0,f,c
  2174  000EDA  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2175  000EDC  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2176  000EDE  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2177  000EE0  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2178  000EE2  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2179  000EE4  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2180  000EE6  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2181  000EE8  2A11               	incf	___aomod@counter^0,f,c
  2182  000EEA                     l1510:
  2183  000EEA  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2184  000EEC  EF7A  F007         	goto	u771
  2185  000EF0  EF7C  F007         	goto	u770
  2186  000EF4                     u771:
  2187  000EF4  EF6B  F007         	goto	l1508
  2188  000EF8                     u770:
  2189  000EF8                     l1512:
  2190  000EF8  5009               	movf	___aomod@divisor^0,w,c
  2191  000EFA  5C01               	subwf	___aomod@dividend^0,w,c
  2192  000EFC  500A               	movf	(___aomod@divisor+1)^0,w,c
  2193  000EFE  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2194  000F00  500B               	movf	(___aomod@divisor+2)^0,w,c
  2195  000F02  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2196  000F04  500C               	movf	(___aomod@divisor+3)^0,w,c
  2197  000F06  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2198  000F08  500D               	movf	(___aomod@divisor+4)^0,w,c
  2199  000F0A  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2200  000F0C  500E               	movf	(___aomod@divisor+5)^0,w,c
  2201  000F0E  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2202  000F10  500F               	movf	(___aomod@divisor+6)^0,w,c
  2203  000F12  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2204  000F14  5010               	movf	(___aomod@divisor+7)^0,w,c
  2205  000F16  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2206  000F18  A0D8               	btfss	status,0,c
  2207  000F1A  EF91  F007         	goto	u781
  2208  000F1E  EF93  F007         	goto	u780
  2209  000F22                     u781:
  2210  000F22  EFA3  F007         	goto	l1516
  2211  000F26                     u780:
  2212  000F26  5009               	movf	___aomod@divisor^0,w,c
  2213  000F28  5E01               	subwf	___aomod@dividend^0,f,c
  2214  000F2A  500A               	movf	(___aomod@divisor+1)^0,w,c
  2215  000F2C  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2216  000F2E  500B               	movf	(___aomod@divisor+2)^0,w,c
  2217  000F30  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2218  000F32  500C               	movf	(___aomod@divisor+3)^0,w,c
  2219  000F34  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2220  000F36  500D               	movf	(___aomod@divisor+4)^0,w,c
  2221  000F38  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2222  000F3A  500E               	movf	(___aomod@divisor+5)^0,w,c
  2223  000F3C  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2224  000F3E  500F               	movf	(___aomod@divisor+6)^0,w,c
  2225  000F40  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2226  000F42  5010               	movf	(___aomod@divisor+7)^0,w,c
  2227  000F44  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2228  000F46                     l1516:
  2229  000F46  90D8               	bcf	status,0,c
  2230  000F48  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2231  000F4A  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2232  000F4C  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2233  000F4E  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2234  000F50  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2235  000F52  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2236  000F54  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2237  000F56  3209               	rrcf	___aomod@divisor^0,f,c
  2238  000F58  2E11               	decfsz	___aomod@counter^0,f,c
  2239  000F5A  EF7C  F007         	goto	l1512
  2240  000F5E                     l1520:
  2241  000F5E  5012               	movf	___aomod@sign^0,w,c
  2242  000F60  B4D8               	btfsc	status,2,c
  2243  000F62  EFB5  F007         	goto	u791
  2244  000F66  EFB7  F007         	goto	u790
  2245  000F6A                     u791:
  2246  000F6A  EFC7  F007         	goto	l1524
  2247  000F6E                     u790:
  2248  000F6E  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2249  000F70  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2250  000F72  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2251  000F74  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2252  000F76  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2253  000F78  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2254  000F7A  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2255  000F7C  6C01               	negf	___aomod@dividend^0,c
  2256  000F7E  0E00               	movlw	0
  2257  000F80  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2258  000F82  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2259  000F84  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2260  000F86  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2261  000F88  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2262  000F8A  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2263  000F8C  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2264  000F8E                     l1524:
  2265  000F8E  C001  F001         	movff	___aomod@dividend,?___aomod
  2266  000F92  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2267  000F96  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2268  000F9A  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2269  000F9E  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2270  000FA2  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2271  000FA6  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2272  000FAA  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2273  000FAE  0012               	return		;funcret
  2274  000FB0                     __end_of___aomod:
  2275                           	callstack 0
  2276                           
  2277 ;; *************** function ___aodiv *****************
  2278 ;; Defined at:
  2279 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\aodiv.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;  dividend        8    0[COMRAM] long long 
  2282 ;;  divisor         8    8[COMRAM] long long 
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;  quotient        8   18[COMRAM] long long 
  2285 ;;  sign            1   17[COMRAM] unsigned char 
  2286 ;;  counter         1   16[COMRAM] unsigned char 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  8    0[COMRAM] long long 
  2289 ;; Registers used:
  2290 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2296 ;;      Params:        16       0       0       0       0       0       0       0       0
  2297 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2298 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2299 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2300 ;;Total ram usage:       26 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; This function calls:
  2303 ;;		Nothing
  2304 ;; This function is called by:
  2305 ;;		_dtoa
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text12
  2310  000CC4                     __ptext12:
  2311                           	callstack 0
  2312  000CC4                     ___aodiv:
  2313                           	callstack 26
  2314  000CC4  0E00               	movlw	0
  2315  000CC6  6E12               	movwf	___aodiv@sign^0,c
  2316  000CC8  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2317  000CCA  EF6B  F006         	goto	u670
  2318  000CCE  EF69  F006         	goto	u671
  2319  000CD2                     u671:
  2320  000CD2  EF7D  F006         	goto	l1456
  2321  000CD6                     u670:
  2322  000CD6  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2323  000CD8  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2324  000CDA  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2325  000CDC  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2326  000CDE  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2327  000CE0  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2328  000CE2  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2329  000CE4  6C09               	negf	___aodiv@divisor^0,c
  2330  000CE6  0E00               	movlw	0
  2331  000CE8  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2332  000CEA  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2333  000CEC  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2334  000CEE  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2335  000CF0  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2336  000CF2  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2337  000CF4  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2338  000CF6  0E01               	movlw	1
  2339  000CF8  6E12               	movwf	___aodiv@sign^0,c
  2340  000CFA                     l1456:
  2341  000CFA  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2342  000CFC  EF84  F006         	goto	u680
  2343  000D00  EF82  F006         	goto	u681
  2344  000D04                     u681:
  2345  000D04  EF96  F006         	goto	l1462
  2346  000D08                     u680:
  2347  000D08  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2348  000D0A  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2349  000D0C  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2350  000D0E  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2351  000D10  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2352  000D12  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2353  000D14  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2354  000D16  6C01               	negf	___aodiv@dividend^0,c
  2355  000D18  0E00               	movlw	0
  2356  000D1A  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2357  000D1C  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2358  000D1E  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2359  000D20  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2360  000D22  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2361  000D24  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2362  000D26  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2363  000D28  0E01               	movlw	1
  2364  000D2A  1A12               	xorwf	___aodiv@sign^0,f,c
  2365  000D2C                     l1462:
  2366  000D2C  EE20  F013         	lfsr	2,___aodiv@quotient
  2367  000D30  0E07               	movlw	7
  2368  000D32                     u691:
  2369  000D32  6ADE               	clrf	postinc2,c
  2370  000D34  06E8               	decf	wreg,f,c
  2371  000D36  E2FD               	bc	u691
  2372  000D38  5009               	movf	___aodiv@divisor^0,w,c
  2373  000D3A  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2374  000D3C  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2375  000D3E  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2376  000D40  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2377  000D42  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2378  000D44  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2379  000D46  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2380  000D48  B4D8               	btfsc	status,2,c
  2381  000D4A  EFA9  F006         	goto	u701
  2382  000D4E  EFAB  F006         	goto	u700
  2383  000D52                     u701:
  2384  000D52  EFFD  F006         	goto	l1484
  2385  000D56                     u700:
  2386  000D56  0E01               	movlw	1
  2387  000D58  6E11               	movwf	___aodiv@counter^0,c
  2388  000D5A  EFB9  F006         	goto	l1470
  2389  000D5E                     l1468:
  2390  000D5E  90D8               	bcf	status,0,c
  2391  000D60  3609               	rlcf	___aodiv@divisor^0,f,c
  2392  000D62  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2393  000D64  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2394  000D66  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2395  000D68  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2396  000D6A  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2397  000D6C  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2398  000D6E  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2399  000D70  2A11               	incf	___aodiv@counter^0,f,c
  2400  000D72                     l1470:
  2401  000D72  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2402  000D74  EFBE  F006         	goto	u711
  2403  000D78  EFC0  F006         	goto	u710
  2404  000D7C                     u711:
  2405  000D7C  EFAF  F006         	goto	l1468
  2406  000D80                     u710:
  2407  000D80                     l1472:
  2408  000D80  90D8               	bcf	status,0,c
  2409  000D82  3613               	rlcf	___aodiv@quotient^0,f,c
  2410  000D84  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2411  000D86  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2412  000D88  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2413  000D8A  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2414  000D8C  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2415  000D8E  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2416  000D90  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2417  000D92  5009               	movf	___aodiv@divisor^0,w,c
  2418  000D94  5C01               	subwf	___aodiv@dividend^0,w,c
  2419  000D96  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2420  000D98  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2421  000D9A  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2422  000D9C  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2423  000D9E  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2424  000DA0  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2425  000DA2  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2426  000DA4  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2427  000DA6  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2428  000DA8  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2429  000DAA  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2430  000DAC  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2431  000DAE  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2432  000DB0  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2433  000DB2  A0D8               	btfss	status,0,c
  2434  000DB4  EFDE  F006         	goto	u721
  2435  000DB8  EFE0  F006         	goto	u720
  2436  000DBC                     u721:
  2437  000DBC  EFF1  F006         	goto	l1480
  2438  000DC0                     u720:
  2439  000DC0  5009               	movf	___aodiv@divisor^0,w,c
  2440  000DC2  5E01               	subwf	___aodiv@dividend^0,f,c
  2441  000DC4  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2442  000DC6  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2443  000DC8  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2444  000DCA  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2445  000DCC  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2446  000DCE  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2447  000DD0  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2448  000DD2  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2449  000DD4  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2450  000DD6  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2451  000DD8  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2452  000DDA  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2453  000DDC  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2454  000DDE  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2455  000DE0  8013               	bsf	___aodiv@quotient^0,0,c
  2456  000DE2                     l1480:
  2457  000DE2  90D8               	bcf	status,0,c
  2458  000DE4  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2459  000DE6  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2460  000DE8  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2461  000DEA  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2462  000DEC  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2463  000DEE  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2464  000DF0  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2465  000DF2  3209               	rrcf	___aodiv@divisor^0,f,c
  2466  000DF4  2E11               	decfsz	___aodiv@counter^0,f,c
  2467  000DF6  EFC0  F006         	goto	l1472
  2468  000DFA                     l1484:
  2469  000DFA  5012               	movf	___aodiv@sign^0,w,c
  2470  000DFC  B4D8               	btfsc	status,2,c
  2471  000DFE  EF03  F007         	goto	u731
  2472  000E02  EF05  F007         	goto	u730
  2473  000E06                     u731:
  2474  000E06  EF15  F007         	goto	l1488
  2475  000E0A                     u730:
  2476  000E0A  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2477  000E0C  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2478  000E0E  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2479  000E10  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2480  000E12  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2481  000E14  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2482  000E16  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2483  000E18  6C13               	negf	___aodiv@quotient^0,c
  2484  000E1A  0E00               	movlw	0
  2485  000E1C  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2486  000E1E  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2487  000E20  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2488  000E22  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2489  000E24  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2490  000E26  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2491  000E28  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2492  000E2A                     l1488:
  2493  000E2A  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2494  000E2E  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2495  000E32  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2496  000E36  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2497  000E3A  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2498  000E3E  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2499  000E42  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2500  000E46  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2501  000E4A  0012               	return		;funcret
  2502  000E4C                     __end_of___aodiv:
  2503                           	callstack 0
  2504                           
  2505 ;; *************** function _adcInit *****************
  2506 ;; Defined at:
  2507 ;;		line 11 in file "adc.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;  ADC_PINs        1    wreg     unsigned char 
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;  ADC_PINs        1    1[COMRAM] unsigned char 
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  1    wreg      void 
  2514 ;; Registers used:
  2515 ;;		wreg, status,2, status,0
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2521 ;;      Params:         0       0       0       0       0       0       0       0       0
  2522 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2523 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2524 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2525 ;;Total ram usage:        2 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; This function calls:
  2528 ;;		Nothing
  2529 ;; This function is called by:
  2530 ;;		_main
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           	psect	text13
  2535  0017A4                     __ptext13:
  2536                           	callstack 0
  2537  0017A4                     _adcInit:
  2538                           	callstack 30
  2539                           
  2540                           ;incstack = 0
  2541                           ;adcInit@ADC_PINs stored from wreg
  2542  0017A4  6E02               	movwf	adcInit@ADC_PINs^0,c
  2543  0017A6                     
  2544                           ;adc.c: 11: void adcInit(uint8_t ADC_PINs);adc.c: 12: {;adc.c: 14:     if(ADC_PINs == 0)
  2545  0017A6  5002               	movf	adcInit@ADC_PINs^0,w,c
  2546  0017A8  A4D8               	btfss	status,2,c
  2547  0017AA  EFD9  F00B         	goto	u1141
  2548  0017AE  EFDB  F00B         	goto	u1140
  2549  0017B2                     u1141:
  2550  0017B2  EFE1  F00B         	goto	l1716
  2551  0017B6                     u1140:
  2552  0017B6                     
  2553                           ;adc.c: 15:     {;adc.c: 16:         ADCON1bits.PCFG = 0b1110;
  2554  0017B6  50C1               	movf	193,w,c	;volatile
  2555  0017B8  0BF0               	andlw	-16
  2556  0017BA  090E               	iorlw	14
  2557  0017BC  6EC1               	movwf	193,c	;volatile
  2558                           
  2559                           ;adc.c: 17:     }
  2560  0017BE  EFE9  F00B         	goto	l1718
  2561  0017C2                     l1716:
  2562                           
  2563                           ;adc.c: 19:     {;adc.c: 20:         ADCON1bits.PCFG = 15 - ADC_PINs;
  2564  0017C2  5002               	movf	adcInit@ADC_PINs^0,w,c
  2565  0017C4  080F               	sublw	15
  2566  0017C6  6E01               	movwf	??_adcInit^0,c
  2567  0017C8  50C1               	movf	193,w,c	;volatile
  2568  0017CA  1801               	xorwf	??_adcInit^0,w,c
  2569  0017CC  0BF0               	andlw	-16
  2570  0017CE  1801               	xorwf	??_adcInit^0,w,c
  2571  0017D0  6EC1               	movwf	193,c	;volatile
  2572  0017D2                     l1718:
  2573                           
  2574                           ;adc.c: 26:     ADCON1bits.VCFG = 0b00;
  2575  0017D2  0ECF               	movlw	-49
  2576  0017D4  16C1               	andwf	193,f,c	;volatile
  2577  0017D6                     
  2578                           ;adc.c: 31:     ADCON2bits.ACQT = 0b010;
  2579  0017D6  50C0               	movf	192,w,c	;volatile
  2580  0017D8  0BC7               	andlw	-57
  2581  0017DA  0910               	iorlw	16
  2582  0017DC  6EC0               	movwf	192,c	;volatile
  2583  0017DE                     
  2584                           ;adc.c: 36:     ADCON2bits.ADCS = 3;
  2585  0017DE  50C0               	movf	192,w,c	;volatile
  2586  0017E0  0BF8               	andlw	-8
  2587  0017E2  0903               	iorlw	3
  2588  0017E4  6EC0               	movwf	192,c	;volatile
  2589  0017E6                     
  2590                           ;adc.c: 39:     ADCON2bits.ADFM = 1;
  2591  0017E6  8EC0               	bsf	192,7,c	;volatile
  2592  0017E8                     
  2593                           ;adc.c: 40:     ADCON0bits.ADON = 1;
  2594  0017E8  80C2               	bsf	194,0,c	;volatile
  2595  0017EA  0012               	return		;funcret
  2596  0017EC                     __end_of_adcInit:
  2597                           	callstack 0
  2598                           
  2599 ;; *************** function _adcGetValue *****************
  2600 ;; Defined at:
  2601 ;;		line 43 in file "adc.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;  PinADC          1    wreg     unsigned char 
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;  PinADC          1    3[COMRAM] unsigned char 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  2    0[COMRAM] unsigned short 
  2608 ;; Registers used:
  2609 ;;		wreg, status,2, status,0
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2615 ;;      Params:         2       0       0       0       0       0       0       0       0
  2616 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2617 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2618 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2619 ;;Total ram usage:        4 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; This function calls:
  2622 ;;		Nothing
  2623 ;; This function is called by:
  2624 ;;		_main
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text14
  2629  001870                     __ptext14:
  2630                           	callstack 0
  2631  001870                     _adcGetValue:
  2632                           	callstack 30
  2633                           
  2634                           ;incstack = 0
  2635                           ;adcGetValue@PinADC stored from wreg
  2636  001870  6E04               	movwf	adcGetValue@PinADC^0,c
  2637  001872                     
  2638                           ;adc.c: 43: uint16_t adcGetValue(uint8_t PinADC);adc.c: 44: {;adc.c: 45:     ADCON0bits.
      +                          CHS = PinADC;
  2639  001872  C004  F003         	movff	adcGetValue@PinADC,??_adcGetValue
  2640  001876  4603               	rlncf	??_adcGetValue^0,f,c
  2641  001878  4603               	rlncf	??_adcGetValue^0,f,c
  2642  00187A  50C2               	movf	194,w,c	;volatile
  2643  00187C  1803               	xorwf	??_adcGetValue^0,w,c
  2644  00187E  0BC3               	andlw	-61
  2645  001880  1803               	xorwf	??_adcGetValue^0,w,c
  2646  001882  6EC2               	movwf	194,c	;volatile
  2647  001884                     
  2648                           ;adc.c: 46:     _delay((unsigned long)((2)*(12000000/4000.0)));
  2649  001884  0E08               	movlw	8
  2650  001886  6E03               	movwf	??_adcGetValue^0,c
  2651  001888  0ECA               	movlw	202
  2652  00188A                     u1247:
  2653  00188A  2EE8               	decfsz	wreg,f,c
  2654  00188C  D7FE               	bra	u1247
  2655  00188E  2E03               	decfsz	??_adcGetValue^0,f,c
  2656  001890  D7FC               	bra	u1247
  2657  001892                     
  2658                           ;adc.c: 47:     GO_nDONE = 1;
  2659  001892  82C2               	bsf	4034,1,c	;volatile
  2660  001894                     l20:
  2661                           
  2662                           ;adc.c: 48:     while(ADCON0bits.GO_DONE)
  2663  001894  B2C2               	btfsc	194,1,c	;volatile
  2664  001896  EF4F  F00C         	goto	u1151
  2665  00189A  EF51  F00C         	goto	u1150
  2666  00189E                     u1151:
  2667  00189E  EF4A  F00C         	goto	l20
  2668  0018A2                     u1150:
  2669  0018A2                     
  2670                           ;adc.c: 51:     return ADRES;
  2671  0018A2  CFC3 F001          	movff	4035,?_adcGetValue	;volatile
  2672  0018A6  CFC4 F002          	movff	4036,?_adcGetValue+1	;volatile
  2673  0018AA  0012               	return		;funcret
  2674  0018AC                     __end_of_adcGetValue:
  2675                           	callstack 0
  2676                           
  2677 ;; *************** function _Lcd_Out2 *****************
  2678 ;; Defined at:
  2679 ;;		line 123 in file "flex_lcd.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  y               1    wreg     unsigned char 
  2682 ;;  x               1    3[COMRAM] unsigned char 
  2683 ;;  buffer          2    4[COMRAM] PTR char 
  2684 ;;		 -> buffer_lcd(16), 
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  y               1    8[COMRAM] unsigned char 
  2687 ;;  data            1    9[COMRAM] unsigned char 
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  1    wreg      void 
  2690 ;; Registers used:
  2691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2692 ;; Tracked objects:
  2693 ;;		On entry : 0/0
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2697 ;;      Params:         3       0       0       0       0       0       0       0       0
  2698 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2699 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2700 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2701 ;;Total ram usage:        7 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; Hardware stack levels required when called:    1
  2704 ;; This function calls:
  2705 ;;		_Lcd_Chr_CP
  2706 ;;		_Lcd_Cmd
  2707 ;; This function is called by:
  2708 ;;		_main
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           	psect	text15
  2713  001652                     __ptext15:
  2714                           	callstack 0
  2715  001652                     _Lcd_Out2:
  2716                           	callstack 29
  2717                           
  2718                           ;incstack = 0
  2719                           ;Lcd_Out2@y stored from wreg
  2720  001652  6E09               	movwf	Lcd_Out2@y^0,c
  2721  001654                     
  2722                           ;flex_lcd.c: 123: void Lcd_Out2(uint8_t y, uint8_t x, int8_t *buffer);flex_lcd.c: 124: {
      +                          ;flex_lcd.c: 125:     uint8_t data;;flex_lcd.c: 126:     switch (y)
  2723  001654  EF40  F00B         	goto	l1842
  2724  001658                     l1832:
  2725                           
  2726                           ;flex_lcd.c: 129:             data = 128 + x;
  2727  001658  5004               	movf	Lcd_Out2@x^0,w,c
  2728  00165A  0F80               	addlw	128
  2729  00165C  6E0A               	movwf	Lcd_Out2@data^0,c
  2730                           
  2731                           ;flex_lcd.c: 130:             break;
  2732  00165E  EF5D  F00B         	goto	l1844
  2733  001662                     l1834:
  2734                           
  2735                           ;flex_lcd.c: 132:             data = 192 + x;
  2736  001662  5004               	movf	Lcd_Out2@x^0,w,c
  2737  001664  0FC0               	addlw	192
  2738  001666  6E0A               	movwf	Lcd_Out2@data^0,c
  2739                           
  2740                           ;flex_lcd.c: 133:             break;
  2741  001668  EF5D  F00B         	goto	l1844
  2742  00166C                     l1836:
  2743                           
  2744                           ;flex_lcd.c: 135:             data = 148 + x;
  2745  00166C  5004               	movf	Lcd_Out2@x^0,w,c
  2746  00166E  0F94               	addlw	148
  2747  001670  6E0A               	movwf	Lcd_Out2@data^0,c
  2748                           
  2749                           ;flex_lcd.c: 136:             break;
  2750  001672  EF5D  F00B         	goto	l1844
  2751  001676                     l1838:
  2752                           
  2753                           ;flex_lcd.c: 138:             data = 212 + x;
  2754  001676  5004               	movf	Lcd_Out2@x^0,w,c
  2755  001678  0FD4               	addlw	212
  2756  00167A  6E0A               	movwf	Lcd_Out2@data^0,c
  2757                           
  2758                           ;flex_lcd.c: 139:             break;
  2759  00167C  EF5D  F00B         	goto	l1844
  2760  001680                     l1842:
  2761  001680  5009               	movf	Lcd_Out2@y^0,w,c
  2762  001682  6E07               	movwf	??_Lcd_Out2^0,c
  2763  001684  6A08               	clrf	(??_Lcd_Out2+1)^0,c
  2764                           
  2765                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2766                           ; Switch size 1, requested type "simple"
  2767                           ; Number of cases is 1, Range of values is 0 to 0
  2768                           ; switch strategies available:
  2769                           ; Name         Instructions Cycles
  2770                           ; simple_byte            4     3 (average)
  2771                           ;	Chosen strategy is simple_byte
  2772  001686  5008               	movf	(??_Lcd_Out2+1)^0,w,c
  2773  001688  0A00               	xorlw	0	; case 0
  2774  00168A  B4D8               	btfsc	status,2,c
  2775  00168C  EF4A  F00B         	goto	l1924
  2776  001690  EF5D  F00B         	goto	l1844
  2777  001694                     l1924:
  2778                           
  2779                           ; Switch size 1, requested type "simple"
  2780                           ; Number of cases is 4, Range of values is 1 to 4
  2781                           ; switch strategies available:
  2782                           ; Name         Instructions Cycles
  2783                           ; simple_byte           13     7 (average)
  2784                           ;	Chosen strategy is simple_byte
  2785  001694  5007               	movf	??_Lcd_Out2^0,w,c
  2786  001696  0A01               	xorlw	1	; case 1
  2787  001698  B4D8               	btfsc	status,2,c
  2788  00169A  EF2C  F00B         	goto	l1832
  2789  00169E  0A03               	xorlw	3	; case 2
  2790  0016A0  B4D8               	btfsc	status,2,c
  2791  0016A2  EF31  F00B         	goto	l1834
  2792  0016A6  0A01               	xorlw	1	; case 3
  2793  0016A8  B4D8               	btfsc	status,2,c
  2794  0016AA  EF36  F00B         	goto	l1836
  2795  0016AE  0A07               	xorlw	7	; case 4
  2796  0016B0  B4D8               	btfsc	status,2,c
  2797  0016B2  EF3B  F00B         	goto	l1838
  2798  0016B6  EF5D  F00B         	goto	l1844
  2799  0016BA                     l1844:
  2800                           
  2801                           ;flex_lcd.c: 143:     Lcd_Cmd(data);
  2802  0016BA  500A               	movf	Lcd_Out2@data^0,w,c
  2803  0016BC  EC1A  F009         	call	_Lcd_Cmd
  2804                           
  2805                           ;flex_lcd.c: 144:     while(*buffer)
  2806  0016C0  EF6B  F00B         	goto	l1850
  2807  0016C4                     l1846:
  2808                           
  2809                           ;flex_lcd.c: 145:     {;flex_lcd.c: 146:         Lcd_Chr_CP(*buffer);
  2810  0016C4  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  2811  0016C8  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  2812  0016CC  50DF               	movf	indf2,w,c
  2813  0016CE  ECD8  F007         	call	_Lcd_Chr_CP
  2814  0016D2                     
  2815                           ;flex_lcd.c: 147:         buffer++;
  2816  0016D2  4A05               	infsnz	Lcd_Out2@buffer^0,f,c
  2817  0016D4  2A06               	incf	(Lcd_Out2@buffer+1)^0,f,c
  2818  0016D6                     l1850:
  2819                           
  2820                           ;flex_lcd.c: 144:     while(*buffer)
  2821  0016D6  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  2822  0016DA  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  2823  0016DE  50DF               	movf	indf2,w,c
  2824  0016E0  A4D8               	btfss	status,2,c
  2825  0016E2  EF75  F00B         	goto	u1181
  2826  0016E6  EF77  F00B         	goto	u1180
  2827  0016EA                     u1181:
  2828  0016EA  EF62  F00B         	goto	l1846
  2829  0016EE                     u1180:
  2830  0016EE  0012               	return		;funcret
  2831  0016F0                     __end_of_Lcd_Out2:
  2832                           	callstack 0
  2833                           
  2834 ;; *************** function _Lcd_Out *****************
  2835 ;; Defined at:
  2836 ;;		line 95 in file "flex_lcd.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  y               1    wreg     unsigned char 
  2839 ;;  x               1    3[COMRAM] unsigned char 
  2840 ;;  buffer          2    4[COMRAM] PTR const char 
  2841 ;;		 -> STR_2(14), STR_1(14), 
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;  y               1    8[COMRAM] unsigned char 
  2844 ;;  data            1    9[COMRAM] unsigned char 
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  1    wreg      void 
  2847 ;; Registers used:
  2848 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2854 ;;      Params:         3       0       0       0       0       0       0       0       0
  2855 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2856 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2857 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2858 ;;Total ram usage:        7 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    1
  2861 ;; This function calls:
  2862 ;;		_Lcd_Chr_CP
  2863 ;;		_Lcd_Cmd
  2864 ;; This function is called by:
  2865 ;;		_main
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text16
  2870  0015AE                     __ptext16:
  2871                           	callstack 0
  2872  0015AE                     _Lcd_Out:
  2873                           	callstack 29
  2874                           
  2875                           ;incstack = 0
  2876                           ;Lcd_Out@y stored from wreg
  2877  0015AE  6E09               	movwf	Lcd_Out@y^0,c
  2878  0015B0                     
  2879                           ;flex_lcd.c: 95: void Lcd_Out(uint8_t y, uint8_t x, const int8_t *buffer);flex_lcd.c: 96
      +                          : {;flex_lcd.c: 97:     uint8_t data;;flex_lcd.c: 98:     switch (y)
  2880  0015B0  EFEE  F00A         	goto	l1804
  2881  0015B4                     l1794:
  2882                           
  2883                           ;flex_lcd.c: 101:             data = 128 + x;
  2884  0015B4  5004               	movf	Lcd_Out@x^0,w,c
  2885  0015B6  0F80               	addlw	128
  2886  0015B8  6E0A               	movwf	Lcd_Out@data^0,c
  2887                           
  2888                           ;flex_lcd.c: 102:             break;
  2889  0015BA  EF0B  F00B         	goto	l1806
  2890  0015BE                     l1796:
  2891                           
  2892                           ;flex_lcd.c: 104:             data = 192 + x;
  2893  0015BE  5004               	movf	Lcd_Out@x^0,w,c
  2894  0015C0  0FC0               	addlw	192
  2895  0015C2  6E0A               	movwf	Lcd_Out@data^0,c
  2896                           
  2897                           ;flex_lcd.c: 105:             break;
  2898  0015C4  EF0B  F00B         	goto	l1806
  2899  0015C8                     l1798:
  2900                           
  2901                           ;flex_lcd.c: 107:             data = 148 + x;
  2902  0015C8  5004               	movf	Lcd_Out@x^0,w,c
  2903  0015CA  0F94               	addlw	148
  2904  0015CC  6E0A               	movwf	Lcd_Out@data^0,c
  2905                           
  2906                           ;flex_lcd.c: 108:             break;
  2907  0015CE  EF0B  F00B         	goto	l1806
  2908  0015D2                     l1800:
  2909                           
  2910                           ;flex_lcd.c: 110:             data = 212 + x;
  2911  0015D2  5004               	movf	Lcd_Out@x^0,w,c
  2912  0015D4  0FD4               	addlw	212
  2913  0015D6  6E0A               	movwf	Lcd_Out@data^0,c
  2914                           
  2915                           ;flex_lcd.c: 111:             break;
  2916  0015D8  EF0B  F00B         	goto	l1806
  2917  0015DC                     l1804:
  2918  0015DC  5009               	movf	Lcd_Out@y^0,w,c
  2919  0015DE  6E07               	movwf	??_Lcd_Out^0,c
  2920  0015E0  6A08               	clrf	(??_Lcd_Out+1)^0,c
  2921                           
  2922                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2923                           ; Switch size 1, requested type "simple"
  2924                           ; Number of cases is 1, Range of values is 0 to 0
  2925                           ; switch strategies available:
  2926                           ; Name         Instructions Cycles
  2927                           ; simple_byte            4     3 (average)
  2928                           ;	Chosen strategy is simple_byte
  2929  0015E2  5008               	movf	(??_Lcd_Out+1)^0,w,c
  2930  0015E4  0A00               	xorlw	0	; case 0
  2931  0015E6  B4D8               	btfsc	status,2,c
  2932  0015E8  EFF8  F00A         	goto	l1926
  2933  0015EC  EF0B  F00B         	goto	l1806
  2934  0015F0                     l1926:
  2935                           
  2936                           ; Switch size 1, requested type "simple"
  2937                           ; Number of cases is 4, Range of values is 1 to 4
  2938                           ; switch strategies available:
  2939                           ; Name         Instructions Cycles
  2940                           ; simple_byte           13     7 (average)
  2941                           ;	Chosen strategy is simple_byte
  2942  0015F0  5007               	movf	??_Lcd_Out^0,w,c
  2943  0015F2  0A01               	xorlw	1	; case 1
  2944  0015F4  B4D8               	btfsc	status,2,c
  2945  0015F6  EFDA  F00A         	goto	l1794
  2946  0015FA  0A03               	xorlw	3	; case 2
  2947  0015FC  B4D8               	btfsc	status,2,c
  2948  0015FE  EFDF  F00A         	goto	l1796
  2949  001602  0A01               	xorlw	1	; case 3
  2950  001604  B4D8               	btfsc	status,2,c
  2951  001606  EFE4  F00A         	goto	l1798
  2952  00160A  0A07               	xorlw	7	; case 4
  2953  00160C  B4D8               	btfsc	status,2,c
  2954  00160E  EFE9  F00A         	goto	l1800
  2955  001612  EF0B  F00B         	goto	l1806
  2956  001616                     l1806:
  2957                           
  2958                           ;flex_lcd.c: 115:     Lcd_Cmd(data);
  2959  001616  500A               	movf	Lcd_Out@data^0,w,c
  2960  001618  EC1A  F009         	call	_Lcd_Cmd
  2961                           
  2962                           ;flex_lcd.c: 116:     while(*buffer)
  2963  00161C  EF1A  F00B         	goto	l1812
  2964  001620                     l1808:
  2965                           
  2966                           ;flex_lcd.c: 117:     {;flex_lcd.c: 118:         Lcd_Chr_CP(*buffer);
  2967  001620  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  2968  001624  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  2969  001628                     	if	0	;tblptru may be non-zero
  2970  001628                     	endif
  2971  001628                     	if	0	;tblptru may be non-zero
  2972  001628                     	endif
  2973  001628  0008               	tblrd		*
  2974  00162A  50F5               	movf	tablat,w,c
  2975  00162C  ECD8  F007         	call	_Lcd_Chr_CP
  2976  001630                     
  2977                           ;flex_lcd.c: 119:         buffer++;
  2978  001630  4A05               	infsnz	Lcd_Out@buffer^0,f,c
  2979  001632  2A06               	incf	(Lcd_Out@buffer+1)^0,f,c
  2980  001634                     l1812:
  2981                           
  2982                           ;flex_lcd.c: 116:     while(*buffer)
  2983  001634  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  2984  001638  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  2985  00163C                     	if	0	;tblptru may be non-zero
  2986  00163C                     	endif
  2987  00163C                     	if	0	;tblptru may be non-zero
  2988  00163C                     	endif
  2989  00163C  0008               	tblrd		*
  2990  00163E  50F5               	movf	tablat,w,c
  2991  001640  0900               	iorlw	0
  2992  001642  A4D8               	btfss	status,2,c
  2993  001644  EF26  F00B         	goto	u1171
  2994  001648  EF28  F00B         	goto	u1170
  2995  00164C                     u1171:
  2996  00164C  EF10  F00B         	goto	l1808
  2997  001650                     u1170:
  2998  001650  0012               	return		;funcret
  2999  001652                     __end_of_Lcd_Out:
  3000                           	callstack 0
  3001                           
  3002 ;; *************** function _Lcd_Chr_CP *****************
  3003 ;; Defined at:
  3004 ;;		line 151 in file "flex_lcd.c"
  3005 ;; Parameters:    Size  Location     Type
  3006 ;;  data            1    wreg     char 
  3007 ;; Auto vars:     Size  Location     Type
  3008 ;;  data            1    2[COMRAM] char 
  3009 ;; Return value:  Size  Location     Type
  3010 ;;                  1    wreg      void 
  3011 ;; Registers used:
  3012 ;;		wreg, status,2, status,0
  3013 ;; Tracked objects:
  3014 ;;		On entry : 0/0
  3015 ;;		On exit  : 0/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3018 ;;      Params:         0       0       0       0       0       0       0       0       0
  3019 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3020 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3021 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3022 ;;Total ram usage:        3 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; This function calls:
  3025 ;;		Nothing
  3026 ;; This function is called by:
  3027 ;;		_Lcd_Out
  3028 ;;		_Lcd_Out2
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           	psect	text17
  3033  000FB0                     __ptext17:
  3034                           	callstack 0
  3035  000FB0                     _Lcd_Chr_CP:
  3036                           	callstack 29
  3037                           
  3038                           ;incstack = 0
  3039                           ;Lcd_Chr_CP@data stored from wreg
  3040  000FB0  6E03               	movwf	Lcd_Chr_CP@data^0,c
  3041  000FB2                     
  3042                           ;flex_lcd.c: 151: void Lcd_Chr_CP(int8_t data);flex_lcd.c: 152: {;flex_lcd.c: 153:     L
      +                          ATDbits.LD3 = 0;
  3043  000FB2  968C               	bcf	140,3,c	;volatile
  3044                           
  3045                           ;flex_lcd.c: 154:     LATDbits.LD2 = 1;
  3046  000FB4  848C               	bsf	140,2,c	;volatile
  3047  000FB6                     
  3048                           ;flex_lcd.c: 155:     LATDbits.LD7 = (data & 0b10000000)>>7;
  3049  000FB6  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3050  000FBA  0E07               	movlw	7
  3051  000FBC  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3052  000FBE                     u1075:
  3053  000FBE  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3054  000FC0  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3055  000FC2  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3056  000FC4  EFDF  F007         	goto	u1075
  3057  000FC8  0E01               	movlw	1
  3058  000FCA  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3059  000FCC  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3060  000FCE  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3061  000FD0  508C               	movf	140,w,c	;volatile
  3062  000FD2  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3063  000FD4  0B7F               	andlw	-129
  3064  000FD6  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3065  000FD8  6E8C               	movwf	140,c	;volatile
  3066                           
  3067                           ;flex_lcd.c: 156:     LATDbits.LD6 = (data & 0b01000000)>>6;
  3068  000FDA  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3069  000FDE  0E06               	movlw	6
  3070  000FE0  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3071  000FE2                     u1085:
  3072  000FE2  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3073  000FE4  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3074  000FE6  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3075  000FE8  EFF1  F007         	goto	u1085
  3076  000FEC  0E01               	movlw	1
  3077  000FEE  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3078  000FF0  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3079  000FF2  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3080  000FF4  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3081  000FF6  508C               	movf	140,w,c	;volatile
  3082  000FF8  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3083  000FFA  0BBF               	andlw	-65
  3084  000FFC  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3085  000FFE  6E8C               	movwf	140,c	;volatile
  3086                           
  3087                           ;flex_lcd.c: 157:     LATDbits.LD5 = (data & 0b00100000)>>5;
  3088  001000  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3089  001004  0E05               	movlw	5
  3090  001006  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3091  001008                     u1095:
  3092  001008  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3093  00100A  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3094  00100C  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3095  00100E  EF04  F008         	goto	u1095
  3096  001012  0E01               	movlw	1
  3097  001014  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3098  001016  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3099  001018  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3100  00101A  508C               	movf	140,w,c	;volatile
  3101  00101C  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3102  00101E  0BDF               	andlw	-33
  3103  001020  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3104  001022  6E8C               	movwf	140,c	;volatile
  3105                           
  3106                           ;flex_lcd.c: 158:     LATDbits.LD4 = (data & 0b00010000)>>4;
  3107  001024  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3108  001028  0E04               	movlw	4
  3109  00102A  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3110  00102C                     u1105:
  3111  00102C  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3112  00102E  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3113  001030  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3114  001032  EF16  F008         	goto	u1105
  3115  001036  0E01               	movlw	1
  3116  001038  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3117  00103A  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3118  00103C  508C               	movf	140,w,c	;volatile
  3119  00103E  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3120  001040  0BEF               	andlw	-17
  3121  001042  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3122  001044  6E8C               	movwf	140,c	;volatile
  3123  001046                     
  3124                           ;flex_lcd.c: 159:     _delay(10);
  3125  001046  0E03               	movlw	3
  3126  001048                     u1257:
  3127  001048  2EE8               	decfsz	wreg,f,c
  3128  00104A  D7FE               	bra	u1257
  3129  00104C  F000               	nop	
  3130  00104E                     
  3131                           ;flex_lcd.c: 160:     LATDbits.LD3 = 1;
  3132  00104E  868C               	bsf	140,3,c	;volatile
  3133  001050                     
  3134                           ;flex_lcd.c: 161:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3135  001050  0E05               	movlw	5
  3136  001052                     u1267:
  3137  001052  2EE8               	decfsz	wreg,f,c
  3138  001054  D7FE               	bra	u1267
  3139  001056                     
  3140                           ;flex_lcd.c: 162:     LATDbits.LD3 = 0;
  3141  001056  968C               	bcf	140,3,c	;volatile
  3142                           
  3143                           ;flex_lcd.c: 163:     LATDbits.LD7 = (data & 0b00001000)>>3;
  3144  001058  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3145  00105C  0E03               	movlw	3
  3146  00105E  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3147  001060                     u1115:
  3148  001060  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3149  001062  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3150  001064  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3151  001066  EF30  F008         	goto	u1115
  3152  00106A  0E01               	movlw	1
  3153  00106C  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3154  00106E  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3155  001070  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3156  001072  508C               	movf	140,w,c	;volatile
  3157  001074  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3158  001076  0B7F               	andlw	-129
  3159  001078  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3160  00107A  6E8C               	movwf	140,c	;volatile
  3161                           
  3162                           ;flex_lcd.c: 164:     LATDbits.LD6 = (data & 0b00000100)>>2;
  3163  00107C  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3164  001080  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3165  001082  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3166  001084  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3167  001086  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3168  001088  0E01               	movlw	1
  3169  00108A  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3170  00108C  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3171  00108E  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3172  001090  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3173  001092  508C               	movf	140,w,c	;volatile
  3174  001094  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3175  001096  0BBF               	andlw	-65
  3176  001098  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3177  00109A  6E8C               	movwf	140,c	;volatile
  3178                           
  3179                           ;flex_lcd.c: 165:     LATDbits.LD5 = (data & 0b00000010)>>1;
  3180  00109C  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3181  0010A0  0E01               	movlw	1
  3182  0010A2  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3183  0010A4                     u1125:
  3184  0010A4  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3185  0010A6  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3186  0010A8  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3187  0010AA  EF52  F008         	goto	u1125
  3188  0010AE  0E01               	movlw	1
  3189  0010B0  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3190  0010B2  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3191  0010B4  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3192  0010B6  508C               	movf	140,w,c	;volatile
  3193  0010B8  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3194  0010BA  0BDF               	andlw	-33
  3195  0010BC  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3196  0010BE  6E8C               	movwf	140,c	;volatile
  3197                           
  3198                           ;flex_lcd.c: 166:     LATDbits.LD4 = (data & 0b00000001);
  3199  0010C0  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3200  0010C4  0E01               	movlw	1
  3201  0010C6  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3202  0010C8  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3203  0010CA  508C               	movf	140,w,c	;volatile
  3204  0010CC  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3205  0010CE  0BEF               	andlw	-17
  3206  0010D0  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3207  0010D2  6E8C               	movwf	140,c	;volatile
  3208  0010D4                     
  3209                           ;flex_lcd.c: 167:     _delay(10);
  3210  0010D4  0E03               	movlw	3
  3211  0010D6                     u1277:
  3212  0010D6  2EE8               	decfsz	wreg,f,c
  3213  0010D8  D7FE               	bra	u1277
  3214  0010DA  F000               	nop	
  3215  0010DC                     
  3216                           ;flex_lcd.c: 168:     LATDbits.LD3 = 1;
  3217  0010DC  868C               	bsf	140,3,c	;volatile
  3218  0010DE                     
  3219                           ;flex_lcd.c: 169:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3220  0010DE  0E05               	movlw	5
  3221  0010E0                     u1287:
  3222  0010E0  2EE8               	decfsz	wreg,f,c
  3223  0010E2  D7FE               	bra	u1287
  3224  0010E4                     
  3225                           ;flex_lcd.c: 170:     LATDbits.LD3 = 0;
  3226  0010E4  968C               	bcf	140,3,c	;volatile
  3227  0010E6                     
  3228                           ;flex_lcd.c: 171:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3229  0010E6  0E05               	movlw	5
  3230  0010E8                     u1297:
  3231  0010E8  2EE8               	decfsz	wreg,f,c
  3232  0010EA  D7FE               	bra	u1297
  3233  0010EC                     
  3234                           ;flex_lcd.c: 172:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  3235  0010EC  0E16               	movlw	22
  3236  0010EE  6E01               	movwf	??_Lcd_Chr_CP^0,c
  3237  0010F0  0E6C               	movlw	108
  3238  0010F2                     u1307:
  3239  0010F2  2EE8               	decfsz	wreg,f,c
  3240  0010F4  D7FE               	bra	u1307
  3241  0010F6  2E01               	decfsz	??_Lcd_Chr_CP^0,f,c
  3242  0010F8  D7FC               	bra	u1307
  3243  0010FA  D000               	nop2	
  3244  0010FC  0012               	return		;funcret
  3245  0010FE                     __end_of_Lcd_Chr_CP:
  3246                           	callstack 0
  3247                           
  3248 ;; *************** function _Lcd_Init *****************
  3249 ;; Defined at:
  3250 ;;		line 31 in file "flex_lcd.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;		None
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  i               1    4[COMRAM] unsigned char 
  3255 ;;  data            1    0        unsigned char 
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      void 
  3258 ;; Registers used:
  3259 ;;		wreg, status,2, status,0, cstack
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3265 ;;      Params:         0       0       0       0       0       0       0       0       0
  3266 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3267 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3268 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3269 ;;Total ram usage:        3 bytes
  3270 ;; Hardware stack levels used:    1
  3271 ;; Hardware stack levels required when called:    1
  3272 ;; This function calls:
  3273 ;;		_Lcd_Cmd
  3274 ;; This function is called by:
  3275 ;;		_main
  3276 ;; This function uses a non-reentrant model
  3277 ;;
  3278                           
  3279                           	psect	text18
  3280  0014EE                     __ptext18:
  3281                           	callstack 0
  3282  0014EE                     _Lcd_Init:
  3283                           	callstack 29
  3284  0014EE                     
  3285                           ;flex_lcd.c: 33:     TRISDbits.TRISD7 = 0;
  3286  0014EE  9E95               	bcf	149,7,c	;volatile
  3287                           
  3288                           ;flex_lcd.c: 34:     TRISDbits.TRISD6 = 0;
  3289  0014F0  9C95               	bcf	149,6,c	;volatile
  3290                           
  3291                           ;flex_lcd.c: 35:     TRISDbits.TRISD5 = 0;
  3292  0014F2  9A95               	bcf	149,5,c	;volatile
  3293                           
  3294                           ;flex_lcd.c: 36:     TRISDbits.TRISD4 = 0;
  3295  0014F4  9895               	bcf	149,4,c	;volatile
  3296                           
  3297                           ;flex_lcd.c: 37:     TRISDbits.TRISD3 = 0;
  3298  0014F6  9695               	bcf	149,3,c	;volatile
  3299                           
  3300                           ;flex_lcd.c: 38:     TRISDbits.TRISD2 = 0;
  3301  0014F8  9495               	bcf	149,2,c	;volatile
  3302  0014FA                     
  3303                           ;flex_lcd.c: 39:     _delay((unsigned long)((34)*(12000000/4000.0)));
  3304  0014FA  0E85               	movlw	133
  3305  0014FC  6E04               	movwf	??_Lcd_Init^0,c
  3306  0014FE  0E76               	movlw	118
  3307  001500                     u1317:
  3308  001500  2EE8               	decfsz	wreg,f,c
  3309  001502  D7FE               	bra	u1317
  3310  001504  2E04               	decfsz	??_Lcd_Init^0,f,c
  3311  001506  D7FC               	bra	u1317
  3312  001508  D000               	nop2	
  3313  00150A                     
  3314                           ;flex_lcd.c: 40:     for (uint8_t i = 0; i < 4; i++) {
  3315  00150A  0E00               	movlw	0
  3316  00150C  6E05               	movwf	Lcd_Init@i^0,c
  3317  00150E                     l91:
  3318                           
  3319                           ;flex_lcd.c: 41:         LATDbits.LD7 = 0;
  3320  00150E  9E8C               	bcf	140,7,c	;volatile
  3321                           
  3322                           ;flex_lcd.c: 42:         LATDbits.LD6 = 0;
  3323  001510  9C8C               	bcf	140,6,c	;volatile
  3324                           
  3325                           ;flex_lcd.c: 43:         LATDbits.LD5 = 1;
  3326  001512  8A8C               	bsf	140,5,c	;volatile
  3327                           
  3328                           ;flex_lcd.c: 44:         LATDbits.LD4 = 1;
  3329  001514  888C               	bsf	140,4,c	;volatile
  3330                           
  3331                           ;flex_lcd.c: 45:         LATDbits.LD3 = 0;
  3332  001516  968C               	bcf	140,3,c	;volatile
  3333                           
  3334                           ;flex_lcd.c: 46:         LATDbits.LD2 = 0;
  3335  001518  948C               	bcf	140,2,c	;volatile
  3336                           
  3337                           ;flex_lcd.c: 47:         LATDbits.LD7 = 0;
  3338  00151A  9E8C               	bcf	140,7,c	;volatile
  3339                           
  3340                           ;flex_lcd.c: 48:         LATDbits.LD6 = 0;
  3341  00151C  9C8C               	bcf	140,6,c	;volatile
  3342                           
  3343                           ;flex_lcd.c: 49:         LATDbits.LD5 = 1;
  3344  00151E  8A8C               	bsf	140,5,c	;volatile
  3345                           
  3346                           ;flex_lcd.c: 50:         LATDbits.LD4 = 1;
  3347  001520  888C               	bsf	140,4,c	;volatile
  3348                           
  3349                           ;flex_lcd.c: 51:         LATDbits.LD3 = 1;
  3350  001522  868C               	bsf	140,3,c	;volatile
  3351                           
  3352                           ;flex_lcd.c: 52:         LATDbits.LD2 = 0;
  3353  001524  948C               	bcf	140,2,c	;volatile
  3354  001526                     
  3355                           ;flex_lcd.c: 53:         _delay((unsigned long)((5)*(12000000/4000000.0)));
  3356  001526  0E05               	movlw	5
  3357  001528                     u1327:
  3358  001528  2EE8               	decfsz	wreg,f,c
  3359  00152A  D7FE               	bra	u1327
  3360  00152C                     
  3361                           ;flex_lcd.c: 54:         LATDbits.LD7 = 0;
  3362  00152C  9E8C               	bcf	140,7,c	;volatile
  3363  00152E                     
  3364                           ;flex_lcd.c: 55:         LATDbits.LD6 = 0;
  3365  00152E  9C8C               	bcf	140,6,c	;volatile
  3366  001530                     
  3367                           ;flex_lcd.c: 56:         LATDbits.LD5 = 1;
  3368  001530  8A8C               	bsf	140,5,c	;volatile
  3369  001532                     
  3370                           ;flex_lcd.c: 57:         LATDbits.LD4 = 1;
  3371  001532  888C               	bsf	140,4,c	;volatile
  3372  001534                     
  3373                           ;flex_lcd.c: 58:         LATDbits.LD3 = 0;
  3374  001534  968C               	bcf	140,3,c	;volatile
  3375  001536                     
  3376                           ;flex_lcd.c: 59:         LATDbits.LD2 = 0;
  3377  001536  948C               	bcf	140,2,c	;volatile
  3378                           
  3379                           ;flex_lcd.c: 60:         _delay((unsigned long)((5500)*(12000000/4000000.0)));
  3380  001538  0E16               	movlw	22
  3381  00153A  6E04               	movwf	??_Lcd_Init^0,c
  3382  00153C  0E6C               	movlw	108
  3383  00153E                     u1337:
  3384  00153E  2EE8               	decfsz	wreg,f,c
  3385  001540  D7FE               	bra	u1337
  3386  001542  2E04               	decfsz	??_Lcd_Init^0,f,c
  3387  001544  D7FC               	bra	u1337
  3388  001546  D000               	nop2	
  3389  001548                     
  3390                           ;flex_lcd.c: 61:     }
  3391  001548  2A05               	incf	Lcd_Init@i^0,f,c
  3392  00154A  0E03               	movlw	3
  3393  00154C  6405               	cpfsgt	Lcd_Init@i^0,c
  3394  00154E  EFAB  F00A         	goto	u1161
  3395  001552  EFAD  F00A         	goto	u1160
  3396  001556                     u1161:
  3397  001556  EF87  F00A         	goto	l91
  3398  00155A                     u1160:
  3399  00155A                     
  3400                           ;flex_lcd.c: 62:     LATDbits.LD7 = 0;
  3401  00155A  9E8C               	bcf	140,7,c	;volatile
  3402                           
  3403                           ;flex_lcd.c: 63:     LATDbits.LD6 = 0;
  3404  00155C  9C8C               	bcf	140,6,c	;volatile
  3405                           
  3406                           ;flex_lcd.c: 64:     LATDbits.LD5 = 1;
  3407  00155E  8A8C               	bsf	140,5,c	;volatile
  3408                           
  3409                           ;flex_lcd.c: 65:     LATDbits.LD4 = 0;
  3410  001560  988C               	bcf	140,4,c	;volatile
  3411                           
  3412                           ;flex_lcd.c: 66:     LATDbits.LD3 = 0;
  3413  001562  968C               	bcf	140,3,c	;volatile
  3414                           
  3415                           ;flex_lcd.c: 67:     LATDbits.LD2 = 0;
  3416  001564  948C               	bcf	140,2,c	;volatile
  3417                           
  3418                           ;flex_lcd.c: 68:     LATDbits.LD7 = 0;
  3419  001566  9E8C               	bcf	140,7,c	;volatile
  3420                           
  3421                           ;flex_lcd.c: 69:     LATDbits.LD6 = 0;
  3422  001568  9C8C               	bcf	140,6,c	;volatile
  3423                           
  3424                           ;flex_lcd.c: 70:     LATDbits.LD5 = 1;
  3425  00156A  8A8C               	bsf	140,5,c	;volatile
  3426                           
  3427                           ;flex_lcd.c: 71:     LATDbits.LD4 = 0;
  3428  00156C  988C               	bcf	140,4,c	;volatile
  3429                           
  3430                           ;flex_lcd.c: 72:     LATDbits.LD3 = 1;
  3431  00156E  868C               	bsf	140,3,c	;volatile
  3432                           
  3433                           ;flex_lcd.c: 73:     LATDbits.LD2 = 0;
  3434  001570  948C               	bcf	140,2,c	;volatile
  3435  001572                     
  3436                           ;flex_lcd.c: 74:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3437  001572  0E05               	movlw	5
  3438  001574                     u1347:
  3439  001574  2EE8               	decfsz	wreg,f,c
  3440  001576  D7FE               	bra	u1347
  3441  001578                     
  3442                           ;flex_lcd.c: 75:     LATDbits.LD7 = 0;
  3443  001578  9E8C               	bcf	140,7,c	;volatile
  3444  00157A                     
  3445                           ;flex_lcd.c: 76:     LATDbits.LD6 = 0;
  3446  00157A  9C8C               	bcf	140,6,c	;volatile
  3447  00157C                     
  3448                           ;flex_lcd.c: 77:     LATDbits.LD5 = 1;
  3449  00157C  8A8C               	bsf	140,5,c	;volatile
  3450  00157E                     
  3451                           ;flex_lcd.c: 78:     LATDbits.LD4 = 0;
  3452  00157E  988C               	bcf	140,4,c	;volatile
  3453  001580                     
  3454                           ;flex_lcd.c: 79:     LATDbits.LD3 = 0;
  3455  001580  968C               	bcf	140,3,c	;volatile
  3456  001582                     
  3457                           ;flex_lcd.c: 80:     LATDbits.LD2 = 0;
  3458  001582  948C               	bcf	140,2,c	;volatile
  3459                           
  3460                           ;flex_lcd.c: 81:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  3461  001584  0E16               	movlw	22
  3462  001586  6E04               	movwf	??_Lcd_Init^0,c
  3463  001588  0E6C               	movlw	108
  3464  00158A                     u1357:
  3465  00158A  2EE8               	decfsz	wreg,f,c
  3466  00158C  D7FE               	bra	u1357
  3467  00158E  2E04               	decfsz	??_Lcd_Init^0,f,c
  3468  001590  D7FC               	bra	u1357
  3469  001592  D000               	nop2	
  3470  001594                     
  3471                           ;flex_lcd.c: 85:     Lcd_Cmd(data);
  3472  001594  0E28               	movlw	40
  3473  001596  EC1A  F009         	call	_Lcd_Cmd
  3474  00159A                     
  3475                           ;flex_lcd.c: 87:     Lcd_Cmd(data);
  3476  00159A  0E10               	movlw	16
  3477  00159C  EC1A  F009         	call	_Lcd_Cmd
  3478  0015A0                     
  3479                           ;flex_lcd.c: 89:     Lcd_Cmd(data);
  3480  0015A0  0E01               	movlw	1
  3481  0015A2  EC1A  F009         	call	_Lcd_Cmd
  3482  0015A6                     
  3483                           ;flex_lcd.c: 91:     Lcd_Cmd(data);
  3484  0015A6  0E0F               	movlw	15
  3485  0015A8  EC1A  F009         	call	_Lcd_Cmd
  3486  0015AC  0012               	return		;funcret
  3487  0015AE                     __end_of_Lcd_Init:
  3488                           	callstack 0
  3489                           
  3490 ;; *************** function _Lcd_Cmd *****************
  3491 ;; Defined at:
  3492 ;;		line 175 in file "flex_lcd.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;  data            1    wreg     unsigned char 
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;  data            1    2[COMRAM] unsigned char 
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  1    wreg      void 
  3499 ;; Registers used:
  3500 ;;		wreg, status,2, status,0
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3506 ;;      Params:         0       0       0       0       0       0       0       0       0
  3507 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3508 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3509 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3510 ;;Total ram usage:        3 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; This function calls:
  3513 ;;		Nothing
  3514 ;; This function is called by:
  3515 ;;		_main
  3516 ;;		_Lcd_Init
  3517 ;;		_Lcd_Out
  3518 ;;		_Lcd_Out2
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           	psect	text19
  3523  001234                     __ptext19:
  3524                           	callstack 0
  3525  001234                     _Lcd_Cmd:
  3526                           	callstack 29
  3527                           
  3528                           ;incstack = 0
  3529                           ;Lcd_Cmd@data stored from wreg
  3530  001234  6E03               	movwf	Lcd_Cmd@data^0,c
  3531  001236                     
  3532                           ;flex_lcd.c: 175: void Lcd_Cmd(uint8_t data);flex_lcd.c: 176: {;flex_lcd.c: 177:     LAT
      +                          Dbits.LD3 = 0; LATDbits.LD2 = 0;
  3533  001236  968C               	bcf	140,3,c	;volatile
  3534  001238  948C               	bcf	140,2,c	;volatile
  3535  00123A                     
  3536                           ;flex_lcd.c: 178:     LATDbits.LD7 = (data & 0b10000000)>>7;
  3537  00123A  6A01               	clrf	??_Lcd_Cmd^0,c
  3538  00123C  AE03               	btfss	Lcd_Cmd@data^0,7,c
  3539  00123E  D001               	bra	u1045
  3540  001240  2A01               	incf	??_Lcd_Cmd^0,f,c
  3541  001242                     u1045:
  3542  001242  0E01               	movlw	1
  3543  001244  1601               	andwf	??_Lcd_Cmd^0,f,c
  3544  001246  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3545  001248  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3546  00124A  508C               	movf	140,w,c	;volatile
  3547  00124C  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3548  00124E  0B7F               	andlw	-129
  3549  001250  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3550  001252  6E8C               	movwf	140,c	;volatile
  3551                           
  3552                           ;flex_lcd.c: 179:     LATDbits.LD6 = (data & 0b01000000)>>6;
  3553  001254  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3554  001258  0E06               	movlw	6
  3555  00125A  6E02               	movwf	(??_Lcd_Cmd+1)^0,c
  3556  00125C                     u1055:
  3557  00125C  90D8               	bcf	status,0,c
  3558  00125E  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3559  001260  2E02               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  3560  001262  EF2E  F009         	goto	u1055
  3561  001266  0E01               	movlw	1
  3562  001268  1601               	andwf	??_Lcd_Cmd^0,f,c
  3563  00126A  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3564  00126C  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3565  00126E  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3566  001270  508C               	movf	140,w,c	;volatile
  3567  001272  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3568  001274  0BBF               	andlw	-65
  3569  001276  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3570  001278  6E8C               	movwf	140,c	;volatile
  3571                           
  3572                           ;flex_lcd.c: 180:     LATDbits.LD5 = (data & 0b00100000)>>5;
  3573  00127A  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3574  00127E  0E05               	movlw	5
  3575  001280  6E02               	movwf	(??_Lcd_Cmd+1)^0,c
  3576  001282                     u1065:
  3577  001282  90D8               	bcf	status,0,c
  3578  001284  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3579  001286  2E02               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  3580  001288  EF41  F009         	goto	u1065
  3581  00128C  0E01               	movlw	1
  3582  00128E  1601               	andwf	??_Lcd_Cmd^0,f,c
  3583  001290  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3584  001292  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3585  001294  508C               	movf	140,w,c	;volatile
  3586  001296  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3587  001298  0BDF               	andlw	-33
  3588  00129A  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3589  00129C  6E8C               	movwf	140,c	;volatile
  3590                           
  3591                           ;flex_lcd.c: 181:     LATDbits.LD4 = (data & 0b00010000)>>4;
  3592  00129E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3593  0012A2  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3594  0012A4  0E0F               	movlw	15
  3595  0012A6  1601               	andwf	??_Lcd_Cmd^0,f,c
  3596  0012A8  0E01               	movlw	1
  3597  0012AA  1601               	andwf	??_Lcd_Cmd^0,f,c
  3598  0012AC  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3599  0012AE  508C               	movf	140,w,c	;volatile
  3600  0012B0  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3601  0012B2  0BEF               	andlw	-17
  3602  0012B4  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3603  0012B6  6E8C               	movwf	140,c	;volatile
  3604  0012B8                     
  3605                           ;flex_lcd.c: 182:     _delay(10);
  3606  0012B8  0E03               	movlw	3
  3607  0012BA                     u1367:
  3608  0012BA  2EE8               	decfsz	wreg,f,c
  3609  0012BC  D7FE               	bra	u1367
  3610  0012BE  F000               	nop	
  3611  0012C0                     
  3612                           ;flex_lcd.c: 183:     LATDbits.LD3 = 1;
  3613  0012C0  868C               	bsf	140,3,c	;volatile
  3614  0012C2                     
  3615                           ;flex_lcd.c: 184:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3616  0012C2  0E05               	movlw	5
  3617  0012C4                     u1377:
  3618  0012C4  2EE8               	decfsz	wreg,f,c
  3619  0012C6  D7FE               	bra	u1377
  3620  0012C8                     
  3621                           ;flex_lcd.c: 185:     LATDbits.LD3 = 0;
  3622  0012C8  968C               	bcf	140,3,c	;volatile
  3623                           
  3624                           ;flex_lcd.c: 186:     LATDbits.LD7 = (data & 0b00001000)>>3;
  3625  0012CA  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3626  0012CE  90D8               	bcf	status,0,c
  3627  0012D0  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3628  0012D2  90D8               	bcf	status,0,c
  3629  0012D4  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3630  0012D6  90D8               	bcf	status,0,c
  3631  0012D8  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3632  0012DA  0E01               	movlw	1
  3633  0012DC  1601               	andwf	??_Lcd_Cmd^0,f,c
  3634  0012DE  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3635  0012E0  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3636  0012E2  508C               	movf	140,w,c	;volatile
  3637  0012E4  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3638  0012E6  0B7F               	andlw	-129
  3639  0012E8  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3640  0012EA  6E8C               	movwf	140,c	;volatile
  3641                           
  3642                           ;flex_lcd.c: 187:     LATDbits.LD6 = (data & 0b00000100)>>2;
  3643  0012EC  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3644  0012F0  90D8               	bcf	status,0,c
  3645  0012F2  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3646  0012F4  90D8               	bcf	status,0,c
  3647  0012F6  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3648  0012F8  0E01               	movlw	1
  3649  0012FA  1601               	andwf	??_Lcd_Cmd^0,f,c
  3650  0012FC  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3651  0012FE  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3652  001300  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3653  001302  508C               	movf	140,w,c	;volatile
  3654  001304  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3655  001306  0BBF               	andlw	-65
  3656  001308  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3657  00130A  6E8C               	movwf	140,c	;volatile
  3658                           
  3659                           ;flex_lcd.c: 188:     LATDbits.LD5 = (data & 0b00000010)>>1;
  3660  00130C  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3661  001310  90D8               	bcf	status,0,c
  3662  001312  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3663  001314  0E01               	movlw	1
  3664  001316  1601               	andwf	??_Lcd_Cmd^0,f,c
  3665  001318  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3666  00131A  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3667  00131C  508C               	movf	140,w,c	;volatile
  3668  00131E  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3669  001320  0BDF               	andlw	-33
  3670  001322  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3671  001324  6E8C               	movwf	140,c	;volatile
  3672                           
  3673                           ;flex_lcd.c: 189:     LATDbits.LD4 = (data & 0b00000001);
  3674  001326  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3675  00132A  0E01               	movlw	1
  3676  00132C  1601               	andwf	??_Lcd_Cmd^0,f,c
  3677  00132E  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3678  001330  508C               	movf	140,w,c	;volatile
  3679  001332  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3680  001334  0BEF               	andlw	-17
  3681  001336  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3682  001338  6E8C               	movwf	140,c	;volatile
  3683  00133A                     
  3684                           ;flex_lcd.c: 190:     _delay(10);
  3685  00133A  0E03               	movlw	3
  3686  00133C                     u1387:
  3687  00133C  2EE8               	decfsz	wreg,f,c
  3688  00133E  D7FE               	bra	u1387
  3689  001340  F000               	nop	
  3690  001342                     
  3691                           ;flex_lcd.c: 191:     LATDbits.LD3 = 1;
  3692  001342  868C               	bsf	140,3,c	;volatile
  3693  001344                     
  3694                           ;flex_lcd.c: 192:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3695  001344  0E05               	movlw	5
  3696  001346                     u1397:
  3697  001346  2EE8               	decfsz	wreg,f,c
  3698  001348  D7FE               	bra	u1397
  3699  00134A                     
  3700                           ;flex_lcd.c: 193:     LATDbits.LD3 = 0;
  3701  00134A  968C               	bcf	140,3,c	;volatile
  3702  00134C                     
  3703                           ;flex_lcd.c: 194:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  3704  00134C  0E16               	movlw	22
  3705  00134E  6E01               	movwf	??_Lcd_Cmd^0,c
  3706  001350  0E6C               	movlw	108
  3707  001352                     u1407:
  3708  001352  2EE8               	decfsz	wreg,f,c
  3709  001354  D7FE               	bra	u1407
  3710  001356  2E01               	decfsz	??_Lcd_Cmd^0,f,c
  3711  001358  D7FC               	bra	u1407
  3712  00135A  D000               	nop2	
  3713  00135C  0012               	return		;funcret
  3714  00135E                     __end_of_Lcd_Cmd:
  3715                           	callstack 0
  3716                           
  3717                           	psect	rparam
  3718  0000                     
  3719                           	psect	idloc
  3720                           
  3721                           ;Config register IDLOC0 @ 0x200000
  3722                           ;	unspecified, using default values
  3723  200000                     	org	2097152
  3724  200000  FF                 	db	255
  3725                           
  3726                           ;Config register IDLOC1 @ 0x200001
  3727                           ;	unspecified, using default values
  3728  200001                     	org	2097153
  3729  200001  FF                 	db	255
  3730                           
  3731                           ;Config register IDLOC2 @ 0x200002
  3732                           ;	unspecified, using default values
  3733  200002                     	org	2097154
  3734  200002  FF                 	db	255
  3735                           
  3736                           ;Config register IDLOC3 @ 0x200003
  3737                           ;	unspecified, using default values
  3738  200003                     	org	2097155
  3739  200003  FF                 	db	255
  3740                           
  3741                           ;Config register IDLOC4 @ 0x200004
  3742                           ;	unspecified, using default values
  3743  200004                     	org	2097156
  3744  200004  FF                 	db	255
  3745                           
  3746                           ;Config register IDLOC5 @ 0x200005
  3747                           ;	unspecified, using default values
  3748  200005                     	org	2097157
  3749  200005  FF                 	db	255
  3750                           
  3751                           ;Config register IDLOC6 @ 0x200006
  3752                           ;	unspecified, using default values
  3753  200006                     	org	2097158
  3754  200006  FF                 	db	255
  3755                           
  3756                           ;Config register IDLOC7 @ 0x200007
  3757                           ;	unspecified, using default values
  3758  200007                     	org	2097159
  3759  200007  FF                 	db	255
  3760                           
  3761                           	psect	config
  3762                           
  3763                           ;Config register CONFIG1L @ 0x300000
  3764                           ;	PLL Prescaler Selection bits
  3765                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  3766                           ;	System Clock Postscaler Selection bits
  3767                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  3768                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3769                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  3770  300000                     	org	3145728
  3771  300000  00                 	db	0
  3772                           
  3773                           ;Config register CONFIG1H @ 0x300001
  3774                           ;	Oscillator Selection bits
  3775                           ;	FOSC = HS, HS oscillator (HS)
  3776                           ;	Fail-Safe Clock Monitor Enable bit
  3777                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3778                           ;	Internal/External Oscillator Switchover bit
  3779                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3780  300001                     	org	3145729
  3781  300001  0C                 	db	12
  3782                           
  3783                           ;Config register CONFIG2L @ 0x300002
  3784                           ;	Power-up Timer Enable bit
  3785                           ;	PWRT = OFF, PWRT disabled
  3786                           ;	Brown-out Reset Enable bits
  3787                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3788                           ;	Brown-out Reset Voltage bits
  3789                           ;	BORV = 3, Minimum setting 2.05V
  3790                           ;	USB Voltage Regulator Enable bit
  3791                           ;	VREGEN = OFF, USB voltage regulator disabled
  3792  300002                     	org	3145730
  3793  300002  19                 	db	25
  3794                           
  3795                           ;Config register CONFIG2H @ 0x300003
  3796                           ;	Watchdog Timer Enable bit
  3797                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3798                           ;	Watchdog Timer Postscale Select bits
  3799                           ;	WDTPS = 32768, 1:32768
  3800  300003                     	org	3145731
  3801  300003  1E                 	db	30
  3802                           
  3803                           ; Padding undefined space
  3804  300004                     	org	3145732
  3805  300004  FF                 	db	255
  3806                           
  3807                           ;Config register CONFIG3H @ 0x300005
  3808                           ;	CCP2 MUX bit
  3809                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  3810                           ;	PORTB A/D Enable bit
  3811                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3812                           ;	Low-Power Timer 1 Oscillator Enable bit
  3813                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3814                           ;	MCLR Pin Enable bit
  3815                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3816  300005                     	org	3145733
  3817  300005  81                 	db	129
  3818                           
  3819                           ;Config register CONFIG4L @ 0x300006
  3820                           ;	Stack Full/Underflow Reset Enable bit
  3821                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3822                           ;	Single-Supply ICSP Enable bit
  3823                           ;	LVP = OFF, Single-Supply ICSP disabled
  3824                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3825                           ;	ICPRT = OFF, ICPORT disabled
  3826                           ;	Extended Instruction Set Enable bit
  3827                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3828                           ;	Background Debugger Enable bit
  3829                           ;	DEBUG = 0x1, unprogrammed default
  3830  300006                     	org	3145734
  3831  300006  81                 	db	129
  3832                           
  3833                           ; Padding undefined space
  3834  300007                     	org	3145735
  3835  300007  FF                 	db	255
  3836                           
  3837                           ;Config register CONFIG5L @ 0x300008
  3838                           ;	Code Protection bit
  3839                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  3840                           ;	Code Protection bit
  3841                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  3842                           ;	Code Protection bit
  3843                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  3844                           ;	Code Protection bit
  3845                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  3846  300008                     	org	3145736
  3847  300008  0F                 	db	15
  3848                           
  3849                           ;Config register CONFIG5H @ 0x300009
  3850                           ;	Boot Block Code Protection bit
  3851                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  3852                           ;	Data EEPROM Code Protection bit
  3853                           ;	CPD = OFF, Data EEPROM is not code-protected
  3854  300009                     	org	3145737
  3855  300009  C0                 	db	192
  3856                           
  3857                           ;Config register CONFIG6L @ 0x30000A
  3858                           ;	Write Protection bit
  3859                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  3860                           ;	Write Protection bit
  3861                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  3862                           ;	Write Protection bit
  3863                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  3864                           ;	Write Protection bit
  3865                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  3866  30000A                     	org	3145738
  3867  30000A  0F                 	db	15
  3868                           
  3869                           ;Config register CONFIG6H @ 0x30000B
  3870                           ;	Configuration Register Write Protection bit
  3871                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3872                           ;	Boot Block Write Protection bit
  3873                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  3874                           ;	Data EEPROM Write Protection bit
  3875                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3876  30000B                     	org	3145739
  3877  30000B  E0                 	db	224
  3878                           
  3879                           ;Config register CONFIG7L @ 0x30000C
  3880                           ;	Table Read Protection bit
  3881                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3882                           ;	Table Read Protection bit
  3883                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3884                           ;	Table Read Protection bit
  3885                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3886                           ;	Table Read Protection bit
  3887                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3888  30000C                     	org	3145740
  3889  30000C  0F                 	db	15
  3890                           
  3891                           ;Config register CONFIG7H @ 0x30000D
  3892                           ;	Boot Block Table Read Protection bit
  3893                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  3894  30000D                     	org	3145741
  3895  30000D  40                 	db	64
  3896                           tosu	equ	0xFFF
  3897                           tosh	equ	0xFFE
  3898                           tosl	equ	0xFFD
  3899                           stkptr	equ	0xFFC
  3900                           pclatu	equ	0xFFB
  3901                           pclath	equ	0xFFA
  3902                           pcl	equ	0xFF9
  3903                           tblptru	equ	0xFF8
  3904                           tblptrh	equ	0xFF7
  3905                           tblptrl	equ	0xFF6
  3906                           tablat	equ	0xFF5
  3907                           prodh	equ	0xFF4
  3908                           prodl	equ	0xFF3
  3909                           indf0	equ	0xFEF
  3910                           postinc0	equ	0xFEE
  3911                           postdec0	equ	0xFED
  3912                           preinc0	equ	0xFEC
  3913                           plusw0	equ	0xFEB
  3914                           fsr0h	equ	0xFEA
  3915                           fsr0l	equ	0xFE9
  3916                           wreg	equ	0xFE8
  3917                           indf1	equ	0xFE7
  3918                           postinc1	equ	0xFE6
  3919                           postdec1	equ	0xFE5
  3920                           preinc1	equ	0xFE4
  3921                           plusw1	equ	0xFE3
  3922                           fsr1h	equ	0xFE2
  3923                           fsr1l	equ	0xFE1
  3924                           bsr	equ	0xFE0
  3925                           indf2	equ	0xFDF
  3926                           postinc2	equ	0xFDE
  3927                           postdec2	equ	0xFDD
  3928                           preinc2	equ	0xFDC
  3929                           plusw2	equ	0xFDB
  3930                           fsr2h	equ	0xFDA
  3931                           fsr2l	equ	0xFD9
  3932                           status	equ	0xFD8

Data Sizes:
    Strings     44
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     10      68
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[8]), STR_3(CODE[8]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[8]), STR_3(CODE[8]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[8]), STR_3(CODE[8]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S842_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    Lcd_Out2@buffer	PTR char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    Lcd_Out@buffer	PTR const char  size(2) Largest target is 14
		 -> STR_2(CODE[14]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8839
                                             93 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                           _Lcd_Out2
                        _adcGetValue
                            _adcInit
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6608
                                             87 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              2     2      0      44
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _adcGetValue                                          4     2      2      22
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             7     4      3     837
                                              3 COMRAM     7     4      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              7     4      3     837
                                              3 COMRAM     7     4      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             3     3      0     315
                                              3 COMRAM     3     3      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   _adcGetValue
   _adcInit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A      44       5       42.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A3      20        0.0%
DATA                 0      0      A3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed May 26 23:29:36 2021

                     l20 1894                       l22 18A2                       l23 18AA  
                     l17 17EA                       l91 150E                       l92 155A  
                     l93 15AC                      l122 10FC                      l106 1650  
                    l125 135C                      l119 16EE                      l242 0E4A  
                    l255 0FAE                      l806 17A2                      l905 182E  
                    l833 146E                      l914 18E0                      l908 18F8  
                    l836 14B0                      l844 08CE                      l838 14EC  
                    l846 08D6                      l871 0CC2                      l864 0B0E  
                    l882 1866                      l885 186E                      l877 1748  
                    l878 1750                      l897 1426          adcInit@ADC_PINs 0002  
                    u610 1370                      u611 136C                      u700 0D56  
                    u620 1382                      u701 0D52                      u621 137E  
                    u710 0D80                      u630 13AA                      u711 0D7C  
                    u631 13A6                      u720 0DC0                      u640 13E0  
                    u800 1438                      u721 0DBC                      u641 13DC  
                    u801 1434                      u730 0E0A                      u650 182E  
                    u810 145A                      u731 0E06                      u651 182A  
                    u811 1456                      u740 0E5E                      u660 18D4  
                    u820 14B0                      u900 08F0                      u741 0E5A  
                    u661 18D0                      u821 14AC                      u901 08EC  
                    u670 0CD6                      u750 0E90                      u830 14C0  
                    u910 08FE                      u671 0CD2                      u751 0E8C  
                    u831 14BC                      u911 08FA                      u680 0D08  
                    u760 0ECE                      u840 184A                      u920 0A26  
                    u681 0D04                      u761 0ECA                      u841 1846  
                    u921 0A22                      u770 0EF8                      u930 0A44  
                    u850 085E                      u691 0D32                      u771 0EF4  
                    u931 0A40                      u851 0858                      u780 0F26  
                    u940 0A5E                      u860 0860                      u781 0F22  
                    u941 0A5A                      u790 0F6E                      u950 0A78  
                    u870 0876                      u791 0F6A                      u951 0A74  
                    u871 0872                      u960 0A88                      u880 08A6  
                    u961 0A84                      u881 08A2                      u970 0A9A  
                    u890 08C2                      u971 0A96                      u891 08BE  
                    u980 0AAA                      u981 0AA6                      u990 0AC2  
                    u991 0ABE                      _abs 1830                      _pad 1428  
                    wreg 000FE8                     ?_abs 0013                     l1500 0E82  
                   l1420 1382                     l1510 0EEA                     l1502 0E90  
                   l1422 138C                     l1430 17EC                     l1512 0EF8  
                   l1520 0F5E                     l1504 0EB0                     l1424 13AA  
                   l1416 135E                     l1432 17F8                     l1440 18B8  
                   l1600 0A9A                     l1450 0CC8                     l1522 0F6E  
                   l1514 0F26                     l1506 0ECE                     l1426 13E0  
                   l1418 1370                     l1434 180A                     l1442 18BC  
                   l1530 1438                     l1610 0AD6                     l1602 0AAA  
                   l1700 10E6                     l1460 0D28                     l1452 0CD6  
                   l1524 0F8E                     l1516 0F46                     l1508 0ED6  
                   l1436 180E                     l1444 18D4                     l1540 148E  
                   l1532 144C                     l1604 0AB0                     l1612 0AE6  
                   l1620 0B42                     l1702 10EC                     l1470 0D72  
                   l1462 0D2C                     l1454 0CF6                     l1518 0F58  
                   l1550 1830                     l1438 18AC                     l1542 1492  
                   l1534 145A                     l1606 0AC2                     l1630 0BE8  
                   l1622 0B54                     l1710 172C                     l1800 15D2  
                   l1720 17D6                     l1712 17A6                     l1480 0DE2  
                   l1472 0D80                     l1464 0D38                     l1456 0CFA  
                   l1448 0CC4                     l1552 184A                     l1544 14C0  
                   l1536 1466                     l1528 1428                     l1608 0ACE  
                   l1560 0896                     l1640 0C66                     l1624 0B58  
                   l1616 0B10                     l1704 16F0                     l1810 1630  
                   l1730 1884                     l1722 17DE                     l1714 17B6  
                   l1482 0DF4                     l1474 0D92                     l1466 0D56  
                   l1458 0D08                     l1546 14D4                     l1538 147A  
                   l1570 08F0                     l1562 08A6                     l1554 082E  
                   l1634 0C20                     l1626 0B7C                     l1618 0B34  
                   l1650 0C8C                     l1706 16F8                     l1660 123A  
                   l1812 1634                     l1804 15DC                     l1732 1892  
                   l1724 17E6                     l1716 17C2                     l1476 0DC0  
                   l1468 0D5E                     l1484 0DFA                     l1492 0E4C  
                   l1580 091A                     l1572 08FE                     l1564 08A8  
                   l1556 084E                     l1652 0CB0                     l1636 0C44  
                   l1644 0C72                     l1628 0BA0                     l1708 1706  
                   l1820 1764                     l1670 133A                     l1662 12B8  
                   l1750 1530                     l1734 14EE                     l1806 1616  
                   l1830 1654                     l1726 17E8                     l1718 17D2  
                   l1486 0E0A                     l1478 0DE0                     l1494 0E50  
                   l1590 0A26                     l1582 099C                     l1574 0904  
                   l1566 08C2                     l1558 0876                     l1646 0C80  
                   l1638 0C52                     l1822 176C                     l1672 1342  
                   l1664 12C0                     l1760 1572                     l1752 1532  
                   l1744 1526                     l1736 14FA                     l1680 0FB2  
                   l1808 1620                     l1832 1658                     l1728 1872  
                   l1488 0E2A                     l1496 0E5E                     l1592 0A44  
                   l1584 09A2                     l1576 090C                     l1568 08DE  
                   l1824 1774                     l1674 1344                     l1666 12C2  
                   l1658 1236                     l1770 1580                     l1762 1578  
                   l1754 1534                     l1746 152C                     l1738 150A  
                   l1690 1056                     l1682 0FB6                     l1850 16D6  
                   l1834 1662                     l1842 1680                     l1498 0E7E  
                   l1594 0A5E                     l1586 09A8                     l1578 0914  
                   l1826 1790                     l1818 1752                     l1676 134A  
                   l1668 12C8                     l1780 159A                     l1772 1582  
                   l1764 157A                     l1756 1536                     l1748 152E  
                   l1692 10D4                     l1684 1046                     l1924 1694  
                   l1836 166C                     l1844 16BA                     l1596 0A78  
                   l1588 0A0C                     l1860 1126                     l1678 134C  
                   l1790 15A6                     l1782 159A                     l1774 1594  
                   l1766 157C                     l1758 1548                     l1694 10DC  
                   l1686 104E                     l1926 15F0                     l1846 16C4  
                   l1838 1676                     l1598 0A88                     l1870 1184  
                   l1862 1138                     l1784 15A0                     l1776 1594  
                   l1768 157E                     l1696 10DE                     l1688 1050  
                   l1792 15B0                     l1848 16D2                     l1880 11E6  
                   l1872 1192                     l1864 114A                     l1856 10FE  
                   l1786 15A0                     l1778 1594                     l1698 10E4  
                   l1794 15B4                     l1882 1214                     l1874 11AE  
                   l1866 1166                     l1858 110E                     l1788 15A6  
                   l1796 15BE                     l1876 11C0                     l1868 117E  
                   l1798 15C8                     l1878 11D8                     ?_pad 0011  
                   STR_1 0801                     STR_2 080F                     STR_3 081D  
                   STR_4 0825                     u1000 0B34                     u1001 0B30  
                   u1010 0B7C                     u1011 0B78                     u1020 0BA0  
                   u1021 0B9C                     u1030 0C44                     u1031 0C40  
                   u1105 102C                     u1130 1748                     u1115 1060  
                   u1131 1744                     u1140 17B6                     u1045 1242  
                   u1125 10A4                     u1141 17B2                     u1150 18A2  
                   u1055 125C                     u1151 189E                     u1207 1154  
                   u1160 155A                     u1065 1282                     u1161 1556  
                   u1217 1170                     u1170 1650                     u1307 10F2  
                   u1075 0FBE                     u1171 164C                     u1227 11CA  
                   u1180 16EE                     u1317 1500                     u1085 0FE2  
                   u1181 16EA                     u1237 121E                     u1407 1352  
                   u1327 1528                     u1095 1008                     u1247 188A  
                   u1337 153E                     u1257 1048                     u1347 1574  
                   u1267 1052                     u1357 158A                     u1277 10D6  
                   u1197 1118                     u1367 12BA                     u1287 10E0  
                   u1377 12C4                     u1297 10E8                     u1387 133C  
                   u1397 1346                     abs@a 0013                     _dbuf 006A  
                   _main 10FE                     _dtoa 082E                     _prec 0064  
                   _nout 0060                     pad@i 0018                     pad@p 0015  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   start 0000          __end_of_Lcd_Cmd 135E          __end_of_Lcd_Out 1652  
           ___param_bank 000000               _Lcd_Chr_CP 0FB0                    ??_abs 0015  
                  ??_pad 0017           Lcd_Out2@buffer 0005          __end_of___aodiv 0E4C  
                  ?_main 0001                    ?_dtoa 001C          __end_of___aomod 0FB0  
        __end_of_adcInit 17EC                    _ADRES 000FC3             vfpfcnvrt@fmt 0042  
                  _PORTB 000F81                    _flags 0066                    _fputc 135E  
                  _fputs 17EC                    pad@fp 0011                    _width 0062  
                  _putch 18F8                    dtoa@d 001E                    dtoa@i 003E  
                  dtoa@n 0036                    dtoa@p 0030                    dtoa@s 0034  
                  dtoa@w 0032                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 17A4         __end_of_Lcd_Init 15AE         __end_of_Lcd_Out2 16F0  
        __initialization 18E2             __end_of_main 1234             __end_of_dtoa 0B10  
                 ??_main 005E                   ??_dtoa 0026            __activetblptr 000002  
                 ?_fputc 0001                   ?_fputs 000A                   ?_putch 0001  
              ??_Lcd_Cmd 0001                ??_Lcd_Out 0007             vfprintf@cfmt 0056  
            ?_Lcd_Chr_CP 0001                ??___aodiv 0011                ??___aomod 0011  
              ??_adcInit 0001                   _entero 0068                   clear_0 18E8  
                 pad@buf 0013                   dtoa@fp 001C                   _strlen 18AC  
                 fputc@c 0001                   fputs@c 000E                   fputs@i 000F  
                 fputs@s 000A             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8        adcGetValue@PinADC 0004  
                 putch@c 0001         __end_of_vfprintf 1752                ??_sprintf 005E  
             __accesstop 0060  __end_of__initialization 18EE            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_fputc 1428            __end_of_fputs 1830  
          __end_of_putch 18FA            ??_adcGetValue 0003                ?_Lcd_Init 0001  
              ?_Lcd_Out2 0004                  ??_fputc 0005                  ??_fputs 000E  
    __size_of_Lcd_Chr_CP 014E                  ??_putch 0001               __pbssBANK0 0060  
                ?_strlen 0001               _buffer_lcd 008A       __size_of_vfpfcnvrt 01B4  
             ??_Lcd_Init 0004               ??_Lcd_Out2 0007      __end_of_adcGetValue 18AC  
                _Lcd_Cmd 1234                  _Lcd_Out 15AE                  __Hparam 0000  
                __Lparam 0000                  ___aodiv 0CC4                  ___aomod 0E4C  
                _adcInit 17A4                ?_vfprintf 0050             __psmallconst 0800  
                __pcinit 18E2                  __ramtop 0800                  __ptext0 10FE  
                __ptext1 1752                  __ptext2 16F0                  __ptext3 0B10  
                __ptext4 082E                  __ptext5 1428                  __ptext6 18AC  
                __ptext7 17EC                  __ptext8 135E                  __ptext9 18F8  
        __size_of_strlen 0036             __size_of_abs 0040             __size_of_pad 00C6  
                _sprintf 1752     end_of_initialization 18EE                  fputc@fp 0003  
          __Lmediumconst 0000                  fputs@fp 000C        __end_of_vfpfcnvrt 0CC4  
              Lcd_Init@i 0005             ??_Lcd_Chr_CP 0001                Lcd_Out2@x 0004  
              Lcd_Out2@y 0009                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 0056  
                strlen@a 0003                  strlen@s 0001                _PORTBbits 000F81  
            _adcGetValue 1870                _TRISDbits 000F95       __end_of_Lcd_Chr_CP 10FE  
            vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040              vfpfcnvrt@ll 0048  
         __end_of_strlen 18E2      start_initialization 18E2              __end_of_abs 1870  
            __end_of_pad 14EE            Lcd_Out@buffer 0005        __size_of_Lcd_Init 00C0  
      __size_of_Lcd_Out2 009E              vfprintf@fmt 0052                 ??_strlen 0003  
          __pcstackBANK0 009A         ___aodiv@dividend 0001                 ?_Lcd_Cmd 0001  
               ?_Lcd_Out 0004                 ?___aodiv 0001                 ?___aomod 0001  
               ?_adcInit 0001         ___aodiv@quotient 0013        __size_of_vfprintf 0062  
            __smallconst 0800                 ?_sprintf 0058           __size_of_fputc 00CA  
         __size_of_fputs 0044           __size_of_putch 0002                 _LATDbits 000F8C  
               _GO_nDONE 007E11                 Lcd_Out@x 0004                 Lcd_Out@y 0009  
              _vfpfcnvrt 0B10               _ADCON0bits 000FC2               _ADCON1bits 000FC1  
             _ADCON2bits 000FC0             ?_adcGetValue 0001             Lcd_Out2@data 000A  
               _Lcd_Init 14EE                 _Lcd_Out2 1652         __size_of_Lcd_Cmd 012A  
       __size_of_Lcd_Out 00A4                 __Hrparam 0000               vfprintf@ap 0054  
               __Lrparam 0000               vfprintf@fp 0050         __size_of___aodiv 0188  
       __size_of___aomod 0164         __size_of_adcInit 0048               ?_vfpfcnvrt 0040  
        ___aodiv@divisor 0009          ___aodiv@counter 0011               sprintf@fmt 005A  
         Lcd_Chr_CP@data 0003                 _dtoa$915 002E                 __ptext10 1830  
               __ptext11 0E4C                 __ptext12 0CC4                 __ptext13 17A4  
               __ptext14 1870                 __ptext15 1652                 __ptext16 15AE  
               __ptext17 0FB0                 __ptext18 14EE                 __ptext19 1234  
       __size_of_sprintf 0052              Lcd_Cmd@data 0003            __size_of_main 0136  
          __size_of_dtoa 02E2                 _vfprintf 16F0         ___aomod@dividend 0001  
            Lcd_Out@data 000A                sprintf@ap 009C          ___aomod@divisor 0009  
            ??_vfpfcnvrt 0046          ___aomod@counter 0011                 sprintf@f 009E  
               sprintf@s 0058     __size_of_adcGetValue 003C             ___aodiv@sign 0012  
           ___aomod@sign 0012  
