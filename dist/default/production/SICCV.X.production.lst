

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu May 27 13:54:06 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4550 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     _ADRES	set	4035
    70  0000                     _LATDbits	set	3980
    71  0000                     _TRISDbits	set	3989
    72  0000                     _PORTBbits	set	3969
    73  0000                     _PORTB	set	3969
    74  0000                     _ADCON0bits	set	4034
    75  0000                     _ADCON2bits	set	4032
    76  0000                     _ADCON1bits	set	4033
    77  0000                     _GO_nDONE	set	32273
    78                           
    79                           	psect	smallconst
    80  000800                     __psmallconst:
    81                           	callstack 0
    82  000800  00                 	db	0
    83  000801                     STR_1:
    84  000801  42                 	db	66	;'B'
    85  000802  69                 	db	105	;'i'
    86  000803  65                 	db	101	;'e'
    87  000804  6E                 	db	110	;'n'
    88  000805  76                 	db	118	;'v'
    89  000806  65                 	db	101	;'e'
    90  000807  6E                 	db	110	;'n'
    91  000808  69                 	db	105	;'i'
    92  000809  64                 	db	100	;'d'
    93  00080A  6F                 	db	111	;'o'
    94  00080B  73                 	db	115	;'s'
    95  00080C  00                 	db	0
    96  00080D                     STR_2:
    97  00080D  41                 	db	65	;'A'
    98  00080E  44                 	db	68	;'D'
    99  00080F  43                 	db	67	;'C'
   100  000810  31                 	db	49	;'1'
   101  000811  3A                 	db	58	;':'
   102  000812  25                 	db	37
   103  000813  64                 	db	100	;'d'
   104  000814  00                 	db	0
   105  000815                     STR_3:
   106  000815  41                 	db	65	;'A'
   107  000816  44                 	db	68	;'D'
   108  000817  43                 	db	67	;'C'
   109  000818  32                 	db	50	;'2'
   110  000819  3A                 	db	58	;':'
   111  00081A  25                 	db	37
   112  00081B  64                 	db	100	;'d'
   113  00081C  00                 	db	0
   114  00081D  00                 	db	0	; dummy byte at the end
   115  0000                     
   116                           ; #config settings
   117                           
   118                           	psect	cinit
   119  0018C2                     __pcinit:
   120                           	callstack 0
   121  0018C2                     start_initialization:
   122                           	callstack 0
   123  0018C2                     __initialization:
   124                           	callstack 0
   125                           
   126                           ; Clear objects allocated to BANK0 (58 bytes)
   127  0018C2  EE00  F060         	lfsr	0,__pbssBANK0
   128  0018C6  0E3A               	movlw	58
   129  0018C8                     clear_0:
   130  0018C8  6AEE               	clrf	postinc0,c
   131  0018CA  06E8               	decf	wreg,f,c
   132  0018CC  E1FD               	bnz	clear_0
   133  0018CE                     end_of_initialization:
   134                           	callstack 0
   135  0018CE                     __end_of__initialization:
   136                           	callstack 0
   137  0018CE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   138  0018D0  6EF8               	movwf	tblptru,c
   139  0018D2  0100               	movlb	0
   140  0018D4  EF0C  F009         	goto	_main	;jump to C main() function
   141                           
   142                           	psect	bssBANK0
   143  000060                     __pbssBANK0:
   144                           	callstack 0
   145  000060                     _nout:
   146                           	callstack 0
   147  000060                     	ds	2
   148  000062                     _width:
   149                           	callstack 0
   150  000062                     	ds	2
   151  000064                     _prec:
   152                           	callstack 0
   153  000064                     	ds	2
   154  000066                     _flags:
   155                           	callstack 0
   156  000066                     	ds	2
   157  000068                     _entero:
   158                           	callstack 0
   159  000068                     	ds	2
   160  00006A                     _dbuf:
   161                           	callstack 0
   162  00006A                     	ds	32
   163  00008A                     _buffer_lcd:
   164                           	callstack 0
   165  00008A                     	ds	16
   166                           
   167                           	psect	cstackBANK0
   168  00009A                     __pcstackBANK0:
   169                           	callstack 0
   170  00009A                     	ds	2
   171  00009C                     sprintf@ap:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0x2
   175  00009C                     	ds	2
   176  00009E                     sprintf@f:
   177                           	callstack 0
   178                           
   179                           ; 6 bytes @ 0x4
   180  00009E                     	ds	6
   181                           
   182                           	psect	cstackCOMRAM
   183  000001                     __pcstackCOMRAM:
   184                           	callstack 0
   185  000001                     ??_Lcd_Cmd:
   186  000001                     ??_Lcd_Chr_CP:
   187  000001                     ??_adcInit:
   188  000001                     ?_strlen:
   189                           	callstack 0
   190  000001                     ?_adcGetValue:
   191                           	callstack 0
   192  000001                     ?___aodiv:
   193                           	callstack 0
   194  000001                     ?___aomod:
   195                           	callstack 0
   196  000001                     fputc@c:
   197                           	callstack 0
   198  000001                     strlen@s:
   199                           	callstack 0
   200  000001                     ___aodiv@dividend:
   201                           	callstack 0
   202  000001                     ___aomod@dividend:
   203                           	callstack 0
   204                           
   205                           ; 8 bytes @ 0x0
   206  000001                     	ds	1
   207  000002                     adcInit@ADC_PINs:
   208                           	callstack 0
   209                           
   210                           ; 1 bytes @ 0x1
   211  000002                     	ds	1
   212  000003                     ??_adcGetValue:
   213  000003                     Lcd_Chr_CP@data:
   214                           	callstack 0
   215  000003                     Lcd_Cmd@data:
   216                           	callstack 0
   217  000003                     fputc@fp:
   218                           	callstack 0
   219  000003                     strlen@a:
   220                           	callstack 0
   221                           
   222                           ; 2 bytes @ 0x2
   223  000003                     	ds	1
   224  000004                     ??_Lcd_Init:
   225  000004                     adcGetValue@PinADC:
   226                           	callstack 0
   227  000004                     Lcd_Out@x:
   228                           	callstack 0
   229  000004                     Lcd_Out2@x:
   230                           	callstack 0
   231                           
   232                           ; 1 bytes @ 0x3
   233  000004                     	ds	1
   234  000005                     ??_fputc:
   235  000005                     Lcd_Init@i:
   236                           	callstack 0
   237  000005                     Lcd_Out@buffer:
   238                           	callstack 0
   239  000005                     Lcd_Out2@buffer:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0x4
   243  000005                     	ds	2
   244  000007                     ??_Lcd_Out:
   245  000007                     ??_Lcd_Out2:
   246                           
   247                           ; 1 bytes @ 0x6
   248  000007                     	ds	2
   249  000009                     Lcd_Out@y:
   250                           	callstack 0
   251  000009                     Lcd_Out2@y:
   252                           	callstack 0
   253  000009                     ___aodiv@divisor:
   254                           	callstack 0
   255  000009                     ___aomod@divisor:
   256                           	callstack 0
   257                           
   258                           ; 8 bytes @ 0x8
   259  000009                     	ds	1
   260  00000A                     Lcd_Out@data:
   261                           	callstack 0
   262  00000A                     Lcd_Out2@data:
   263                           	callstack 0
   264  00000A                     fputs@s:
   265                           	callstack 0
   266                           
   267                           ; 2 bytes @ 0x9
   268  00000A                     	ds	2
   269  00000C                     fputs@fp:
   270                           	callstack 0
   271                           
   272                           ; 2 bytes @ 0xB
   273  00000C                     	ds	2
   274  00000E                     fputs@c:
   275                           	callstack 0
   276                           
   277                           ; 1 bytes @ 0xD
   278  00000E                     	ds	1
   279  00000F                     fputs@i:
   280                           	callstack 0
   281                           
   282                           ; 2 bytes @ 0xE
   283  00000F                     	ds	2
   284  000011                     ?_pad:
   285                           	callstack 0
   286  000011                     ___aodiv@counter:
   287                           	callstack 0
   288  000011                     ___aomod@counter:
   289                           	callstack 0
   290  000011                     pad@fp:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x10
   294  000011                     	ds	1
   295  000012                     ___aodiv@sign:
   296                           	callstack 0
   297  000012                     ___aomod@sign:
   298                           	callstack 0
   299                           
   300                           ; 1 bytes @ 0x11
   301  000012                     	ds	1
   302  000013                     ?_abs:
   303                           	callstack 0
   304  000013                     pad@buf:
   305                           	callstack 0
   306  000013                     abs@a:
   307                           	callstack 0
   308  000013                     ___aodiv@quotient:
   309                           	callstack 0
   310                           
   311                           ; 8 bytes @ 0x12
   312  000013                     	ds	2
   313  000015                     ??_abs:
   314  000015                     pad@p:
   315                           	callstack 0
   316                           
   317                           ; 2 bytes @ 0x14
   318  000015                     	ds	2
   319  000017                     ??_pad:
   320                           
   321                           ; 1 bytes @ 0x16
   322  000017                     	ds	1
   323  000018                     pad@i:
   324                           	callstack 0
   325                           
   326                           ; 2 bytes @ 0x17
   327  000018                     	ds	2
   328  00001A                     pad@w:
   329                           	callstack 0
   330                           
   331                           ; 2 bytes @ 0x19
   332  00001A                     	ds	2
   333  00001C                     ?_dtoa:
   334                           	callstack 0
   335  00001C                     dtoa@fp:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x1B
   339  00001C                     	ds	2
   340  00001E                     dtoa@d:
   341                           	callstack 0
   342                           
   343                           ; 8 bytes @ 0x1D
   344  00001E                     	ds	8
   345  000026                     ??_dtoa:
   346                           
   347                           ; 1 bytes @ 0x25
   348  000026                     	ds	8
   349  00002E                     _dtoa$914:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0x2D
   353  00002E                     	ds	2
   354  000030                     dtoa@p:
   355                           	callstack 0
   356                           
   357                           ; 2 bytes @ 0x2F
   358  000030                     	ds	2
   359  000032                     dtoa@w:
   360                           	callstack 0
   361                           
   362                           ; 2 bytes @ 0x31
   363  000032                     	ds	2
   364  000034                     dtoa@s:
   365                           	callstack 0
   366                           
   367                           ; 2 bytes @ 0x33
   368  000034                     	ds	2
   369  000036                     dtoa@n:
   370                           	callstack 0
   371                           
   372                           ; 8 bytes @ 0x35
   373  000036                     	ds	8
   374  00003E                     dtoa@i:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0x3D
   378  00003E                     	ds	2
   379  000040                     ?_vfpfcnvrt:
   380                           	callstack 0
   381  000040                     vfpfcnvrt@fp:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0x3F
   385  000040                     	ds	2
   386  000042                     vfpfcnvrt@fmt:
   387                           	callstack 0
   388                           
   389                           ; 2 bytes @ 0x41
   390  000042                     	ds	2
   391  000044                     vfpfcnvrt@ap:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x43
   395  000044                     	ds	2
   396  000046                     ??_vfpfcnvrt:
   397                           
   398                           ; 1 bytes @ 0x45
   399  000046                     	ds	2
   400  000048                     vfpfcnvrt@ll:
   401                           	callstack 0
   402                           
   403                           ; 8 bytes @ 0x47
   404  000048                     	ds	8
   405  000050                     ?_vfprintf:
   406                           	callstack 0
   407  000050                     vfprintf@fp:
   408                           	callstack 0
   409                           
   410                           ; 2 bytes @ 0x4F
   411  000050                     	ds	2
   412  000052                     vfprintf@fmt:
   413                           	callstack 0
   414                           
   415                           ; 2 bytes @ 0x51
   416  000052                     	ds	2
   417  000054                     vfprintf@ap:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0x53
   421  000054                     	ds	2
   422  000056                     vfprintf@cfmt:
   423                           	callstack 0
   424                           
   425                           ; 2 bytes @ 0x55
   426  000056                     	ds	2
   427  000058                     ?_sprintf:
   428                           	callstack 0
   429  000058                     sprintf@s:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x57
   433  000058                     	ds	2
   434  00005A                     sprintf@fmt:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x59
   438  00005A                     	ds	4
   439  00005E                     ??_main:
   440                           
   441                           ; 1 bytes @ 0x5D
   442  00005E                     	ds	2
   443                           
   444 ;;
   445 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   446 ;;
   447 ;; *************** function _main *****************
   448 ;; Defined at:
   449 ;;		line 17 in file "main.c"
   450 ;; Parameters:    Size  Location     Type
   451 ;;		None
   452 ;; Auto vars:     Size  Location     Type
   453 ;;		None
   454 ;; Return value:  Size  Location     Type
   455 ;;                  1    wreg      void 
   456 ;; Registers used:
   457 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   458 ;; Tracked objects:
   459 ;;		On entry : 0/0
   460 ;;		On exit  : 0/0
   461 ;;		Unchanged: 0/0
   462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   463 ;;      Params:         0       0       0       0       0       0       0       0       0
   464 ;;      Locals:         0       0       0       0       0       0       0       0       0
   465 ;;      Temps:          2       0       0       0       0       0       0       0       0
   466 ;;      Totals:         2       0       0       0       0       0       0       0       0
   467 ;;Total ram usage:        2 bytes
   468 ;; Hardware stack levels required when called:    8
   469 ;; This function calls:
   470 ;;		_Lcd_Cmd
   471 ;;		_Lcd_Init
   472 ;;		_Lcd_Out
   473 ;;		_Lcd_Out2
   474 ;;		_adcGetValue
   475 ;;		_adcInit
   476 ;;		_sprintf
   477 ;; This function is called by:
   478 ;;		Startup code after reset
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482                           	psect	text0
   483  001218                     __ptext0:
   484                           	callstack 0
   485  001218                     _main:
   486                           	callstack 23
   487  001218  F000               	nop		;# 
   488  00121A                     
   489                           ;main.c: 20:     Lcd_Init();
   490  00121A  EC67  F00A         	call	_Lcd_Init	;wreg free
   491                           
   492                           ;main.c: 21:     Lcd_Cmd(1);
   493  00121E  0E01               	movlw	1
   494  001220  EC77  F008         	call	_Lcd_Cmd
   495                           
   496                           ;main.c: 22:     Lcd_Cmd(12);
   497  001224  0E0C               	movlw	12
   498  001226  EC77  F008         	call	_Lcd_Cmd
   499  00122A                     
   500                           ;main.c: 23:      _delay((unsigned long)((100)*(12000000/4000.0)));
   501  00122A  0E02               	movlw	2
   502  00122C  6E5F               	movwf	(??_main+1)^0,c
   503  00122E  0E86               	movlw	134
   504  001230  6E5E               	movwf	??_main^0,c
   505  001232  0E99               	movlw	153
   506  001234                     u1197:
   507  001234  2EE8               	decfsz	wreg,f,c
   508  001236  D7FE               	bra	u1197
   509  001238  2E5E               	decfsz	??_main^0,f,c
   510  00123A  D7FC               	bra	u1197
   511  00123C  2E5F               	decfsz	(??_main+1)^0,f,c
   512  00123E  D7FA               	bra	u1197
   513  001240  F000               	nop	
   514  001242                     
   515                           ;main.c: 24:     Lcd_Out(1,0, (const int8_t*)"Bienvenidos");
   516  001242  0E00               	movlw	0
   517  001244  6E04               	movwf	Lcd_Out@x^0,c
   518  001246  0E01               	movlw	low STR_1
   519  001248  6E05               	movwf	Lcd_Out@buffer^0,c
   520  00124A  0E08               	movlw	high STR_1
   521  00124C  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   522  00124E  0E01               	movlw	1
   523  001250  ECC7  F00A         	call	_Lcd_Out
   524  001254                     
   525                           ;main.c: 25:     _delay((unsigned long)((1000)*(12000000/4000.0)));
   526  001254  0E10               	movlw	16
   527  001256  6E5F               	movwf	(??_main+1)^0,c
   528  001258  0E39               	movlw	57
   529  00125A  6E5E               	movwf	??_main^0,c
   530  00125C  0E0E               	movlw	14
   531  00125E                     u1207:
   532  00125E  2EE8               	decfsz	wreg,f,c
   533  001260  D7FE               	bra	u1207
   534  001262  2E5E               	decfsz	??_main^0,f,c
   535  001264  D7FC               	bra	u1207
   536  001266  2E5F               	decfsz	(??_main+1)^0,f,c
   537  001268  D7FA               	bra	u1207
   538  00126A                     
   539                           ;main.c: 26:     (Lcd_Cmd(1),_delay((unsigned long)((100)*(12000000/4000.0))));
   540  00126A  0E01               	movlw	1
   541  00126C  EC77  F008         	call	_Lcd_Cmd
   542  001270  0E02               	movlw	2
   543  001272  6E5F               	movwf	(??_main+1)^0,c
   544  001274  0E86               	movlw	134
   545  001276  6E5E               	movwf	??_main^0,c
   546  001278  0E99               	movlw	153
   547  00127A                     u1217:
   548  00127A  2EE8               	decfsz	wreg,f,c
   549  00127C  D7FE               	bra	u1217
   550  00127E  2E5E               	decfsz	??_main^0,f,c
   551  001280  D7FC               	bra	u1217
   552  001282  2E5F               	decfsz	(??_main+1)^0,f,c
   553  001284  D7FA               	bra	u1217
   554  001286  F000               	nop	
   555  001288                     
   556                           ;main.c: 27:     adcInit(2);
   557  001288  0E02               	movlw	2
   558  00128A  ECC2  F00B         	call	_adcInit
   559  00128E                     l1876:
   560                           
   561                           ;main.c: 29:     {;main.c: 30:         entero = adcGetValue(0);
   562  00128E  0E00               	movlw	0
   563  001290  EC28  F00C         	call	_adcGetValue
   564  001294  C001  F068         	movff	?_adcGetValue,_entero
   565  001298  C002  F069         	movff	?_adcGetValue+1,_entero+1
   566  00129C                     
   567                           ;main.c: 31:         sprintf((char *)buffer_lcd,"ADC1:%d",entero);
   568  00129C  0E8A               	movlw	low _buffer_lcd
   569  00129E  6E58               	movwf	sprintf@s^0,c
   570  0012A0  0E00               	movlw	high _buffer_lcd
   571  0012A2  6E59               	movwf	(sprintf@s+1)^0,c
   572  0012A4  0E0D               	movlw	low STR_2
   573  0012A6  6E5A               	movwf	sprintf@fmt^0,c
   574  0012A8  0E08               	movlw	high STR_2
   575  0012AA  6E5B               	movwf	(sprintf@fmt+1)^0,c
   576  0012AC  C068  F05C         	movff	_entero,?_sprintf+4
   577  0012B0  C069  F05D         	movff	_entero+1,?_sprintf+5
   578  0012B4  EC99  F00B         	call	_sprintf	;wreg free
   579  0012B8                     
   580                           ;main.c: 32:         Lcd_Out2(1,0,(int8_t*)buffer_lcd);
   581  0012B8  0E00               	movlw	0
   582  0012BA  6E04               	movwf	Lcd_Out2@x^0,c
   583  0012BC  0E8A               	movlw	low _buffer_lcd
   584  0012BE  6E05               	movwf	Lcd_Out2@buffer^0,c
   585  0012C0  0E00               	movlw	high _buffer_lcd
   586  0012C2  6E06               	movwf	(Lcd_Out2@buffer+1)^0,c
   587  0012C4  0E01               	movlw	1
   588  0012C6  EC19  F00B         	call	_Lcd_Out2
   589  0012CA                     
   590                           ;main.c: 33:         _delay((unsigned long)((100)*(12000000/4000.0)));
   591  0012CA  0E02               	movlw	2
   592  0012CC  6E5F               	movwf	(??_main+1)^0,c
   593  0012CE  0E86               	movlw	134
   594  0012D0  6E5E               	movwf	??_main^0,c
   595  0012D2  0E99               	movlw	153
   596  0012D4                     u1227:
   597  0012D4  2EE8               	decfsz	wreg,f,c
   598  0012D6  D7FE               	bra	u1227
   599  0012D8  2E5E               	decfsz	??_main^0,f,c
   600  0012DA  D7FC               	bra	u1227
   601  0012DC  2E5F               	decfsz	(??_main+1)^0,f,c
   602  0012DE  D7FA               	bra	u1227
   603  0012E0  F000               	nop	
   604  0012E2                     
   605                           ;main.c: 34:         entero = adcGetValue(1);
   606  0012E2  0E01               	movlw	1
   607  0012E4  EC28  F00C         	call	_adcGetValue
   608  0012E8  C001  F068         	movff	?_adcGetValue,_entero
   609  0012EC  C002  F069         	movff	?_adcGetValue+1,_entero+1
   610  0012F0                     
   611                           ;main.c: 35:         sprintf((char *)buffer_lcd,"ADC2:%d",entero);
   612  0012F0  0E8A               	movlw	low _buffer_lcd
   613  0012F2  6E58               	movwf	sprintf@s^0,c
   614  0012F4  0E00               	movlw	high _buffer_lcd
   615  0012F6  6E59               	movwf	(sprintf@s+1)^0,c
   616  0012F8  0E15               	movlw	low STR_3
   617  0012FA  6E5A               	movwf	sprintf@fmt^0,c
   618  0012FC  0E08               	movlw	high STR_3
   619  0012FE  6E5B               	movwf	(sprintf@fmt+1)^0,c
   620  001300  C068  F05C         	movff	_entero,?_sprintf+4
   621  001304  C069  F05D         	movff	_entero+1,?_sprintf+5
   622  001308  EC99  F00B         	call	_sprintf	;wreg free
   623  00130C                     
   624                           ;main.c: 36:         Lcd_Out2(2,0,(int8_t*)buffer_lcd);
   625  00130C  0E00               	movlw	0
   626  00130E  6E04               	movwf	Lcd_Out2@x^0,c
   627  001310  0E8A               	movlw	low _buffer_lcd
   628  001312  6E05               	movwf	Lcd_Out2@buffer^0,c
   629  001314  0E00               	movlw	high _buffer_lcd
   630  001316  6E06               	movwf	(Lcd_Out2@buffer+1)^0,c
   631  001318  0E02               	movlw	2
   632  00131A  EC19  F00B         	call	_Lcd_Out2
   633  00131E                     
   634                           ;main.c: 37:         _delay((unsigned long)((100)*(12000000/4000.0)));
   635  00131E  0E02               	movlw	2
   636  001320  6E5F               	movwf	(??_main+1)^0,c
   637  001322  0E86               	movlw	134
   638  001324  6E5E               	movwf	??_main^0,c
   639  001326  0E99               	movlw	153
   640  001328                     u1237:
   641  001328  2EE8               	decfsz	wreg,f,c
   642  00132A  D7FE               	bra	u1237
   643  00132C  2E5E               	decfsz	??_main^0,f,c
   644  00132E  D7FC               	bra	u1237
   645  001330  2E5F               	decfsz	(??_main+1)^0,f,c
   646  001332  D7FA               	bra	u1237
   647  001334  F000               	nop	
   648  001336  EF47  F009         	goto	l1876
   649  00133A  EF00  F000         	goto	start
   650  00133E                     __end_of_main:
   651                           	callstack 0
   652                           
   653 ;; *************** function _sprintf *****************
   654 ;; Defined at:
   655 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_sprintf.c"
   656 ;; Parameters:    Size  Location     Type
   657 ;;  s               2   87[COMRAM] PTR unsigned char 
   658 ;;		 -> buffer_lcd(16), 
   659 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   660 ;;		 -> STR_3(8), STR_2(8), 
   661 ;; Auto vars:     Size  Location     Type
   662 ;;  f               6    4[BANK0 ] struct _IO_FILE
   663 ;;  ap              2    2[BANK0 ] PTR void [1]
   664 ;;		 -> ?_sprintf(2), 
   665 ;;  ret             2    0        int 
   666 ;; Return value:  Size  Location     Type
   667 ;;                  2   87[COMRAM] int 
   668 ;; Registers used:
   669 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   670 ;; Tracked objects:
   671 ;;		On entry : 0/0
   672 ;;		On exit  : 0/0
   673 ;;		Unchanged: 0/0
   674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   675 ;;      Params:         6       0       0       0       0       0       0       0       0
   676 ;;      Locals:         0      10       0       0       0       0       0       0       0
   677 ;;      Temps:          0       0       0       0       0       0       0       0       0
   678 ;;      Totals:         6      10       0       0       0       0       0       0       0
   679 ;;Total ram usage:       16 bytes
   680 ;; Hardware stack levels used:    1
   681 ;; Hardware stack levels required when called:    7
   682 ;; This function calls:
   683 ;;		_vfprintf
   684 ;; This function is called by:
   685 ;;		_main
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           	psect	text1
   690  001732                     __ptext1:
   691                           	callstack 0
   692  001732                     _sprintf:
   693                           	callstack 23
   694  001732  0E5C               	movlw	low (?_sprintf+4)
   695  001734  0100               	movlb	0	; () banked
   696  001736  6F9C               	movwf	sprintf@ap& (0+255),b
   697  001738  0E00               	movlw	high (?_sprintf+4)
   698  00173A  6F9D               	movwf	(sprintf@ap+1)& (0+255),b
   699  00173C  C058  F09E         	movff	sprintf@s,sprintf@f
   700  001740  C059  F09F         	movff	sprintf@s+1,sprintf@f+1
   701  001744                     
   702                           ; BSR set to: 0
   703  001744  0E00               	movlw	0
   704  001746  6FA1               	movwf	(sprintf@f+3)& (0+255),b
   705  001748  0E00               	movlw	0
   706  00174A  6FA0               	movwf	(sprintf@f+2)& (0+255),b
   707  00174C                     
   708                           ; BSR set to: 0
   709  00174C  0E00               	movlw	0
   710  00174E  6FA3               	movwf	(sprintf@f+5)& (0+255),b
   711  001750  0E00               	movlw	0
   712  001752  6FA2               	movwf	(sprintf@f+4)& (0+255),b
   713  001754                     
   714                           ; BSR set to: 0
   715  001754  0E9E               	movlw	low sprintf@f
   716  001756  6E50               	movwf	vfprintf@fp^0,c
   717  001758  0E00               	movlw	high sprintf@f
   718  00175A  6E51               	movwf	(vfprintf@fp+1)^0,c
   719  00175C  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
   720  001760  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   721  001764  0E9C               	movlw	low sprintf@ap
   722  001766  6E54               	movwf	vfprintf@ap^0,c
   723  001768  0E00               	movlw	high sprintf@ap
   724  00176A  6E55               	movwf	(vfprintf@ap+1)^0,c
   725  00176C  EC68  F00B         	call	_vfprintf	;wreg free
   726  001770  0100               	movlb	0	; () banked
   727  001772  51A0               	movf	(sprintf@f+2)& (0+255),w,b
   728  001774  2458               	addwf	sprintf@s^0,w,c
   729  001776  6ED9               	movwf	fsr2l,c
   730  001778  51A1               	movf	(sprintf@f+3)& (0+255),w,b
   731  00177A  2059               	addwfc	(sprintf@s+1)^0,w,c
   732  00177C  6EDA               	movwf	fsr2h,c
   733  00177E  0E00               	movlw	0
   734  001780  6EDF               	movwf	indf2,c
   735  001782                     
   736                           ; BSR set to: 0
   737  001782  0012               	return		;funcret
   738  001784                     __end_of_sprintf:
   739                           	callstack 0
   740                           
   741 ;; *************** function _vfprintf *****************
   742 ;; Defined at:
   743 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   746 ;;		 -> sprintf@f(6), 
   747 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   748 ;;		 -> STR_3(8), STR_2(8), 
   749 ;;  ap              2   83[COMRAM] PTR PTR void 
   750 ;;		 -> sprintf@ap(2), 
   751 ;; Auto vars:     Size  Location     Type
   752 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   753 ;;		 -> STR_3(8), STR_2(8), 
   754 ;; Return value:  Size  Location     Type
   755 ;;                  2   79[COMRAM] int 
   756 ;; Registers used:
   757 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   763 ;;      Params:         6       0       0       0       0       0       0       0       0
   764 ;;      Locals:         2       0       0       0       0       0       0       0       0
   765 ;;      Temps:          0       0       0       0       0       0       0       0       0
   766 ;;      Totals:         8       0       0       0       0       0       0       0       0
   767 ;;Total ram usage:        8 bytes
   768 ;; Hardware stack levels used:    1
   769 ;; Hardware stack levels required when called:    6
   770 ;; This function calls:
   771 ;;		_vfpfcnvrt
   772 ;; This function is called by:
   773 ;;		_sprintf
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text2
   778  0016D0                     __ptext2:
   779                           	callstack 0
   780  0016D0                     _vfprintf:
   781                           	callstack 23
   782  0016D0                     
   783                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.31\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   784  0016D0  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   785  0016D4  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   786  0016D8                     
   787                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   788  0016D8  0E00               	movlw	0
   789  0016DA  0100               	movlb	0	; () banked
   790  0016DC  6F61               	movwf	(_nout+1)& (0+255),b
   791  0016DE  0E00               	movlw	0
   792  0016E0  6F60               	movwf	_nout& (0+255),b
   793                           
   794                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   795  0016E2  EF86  F00B         	goto	l1714
   796  0016E6                     l1712:
   797                           
   798                           ; BSR set to: 0
   799                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   800  0016E6  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   801  0016EA  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   802  0016EE  0E56               	movlw	low vfprintf@cfmt
   803  0016F0  6E42               	movwf	vfpfcnvrt@fmt^0,c
   804  0016F2  0E00               	movlw	high vfprintf@cfmt
   805  0016F4  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
   806  0016F6  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   807  0016FA  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   808  0016FE  EC80  F005         	call	_vfpfcnvrt	;wreg free
   809  001702  5040               	movf	?_vfpfcnvrt^0,w,c
   810  001704  0100               	movlb	0	; () banked
   811  001706  2760               	addwf	_nout& (0+255),f,b
   812  001708  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
   813  00170A  2361               	addwfc	(_nout+1)& (0+255),f,b
   814  00170C                     l1714:
   815                           
   816                           ; BSR set to: 0
   817                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   818  00170C  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   819  001710  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   820  001714                     	if	0	;tblptru may be non-zero
   821  001714                     	endif
   822  001714                     	if	0	;tblptru may be non-zero
   823  001714                     	endif
   824  001714  0008               	tblrd		*
   825  001716  50F5               	movf	tablat,w,c
   826  001718  0900               	iorlw	0
   827  00171A  A4D8               	btfss	status,2,c
   828  00171C  EF92  F00B         	goto	u1131
   829  001720  EF94  F00B         	goto	u1130
   830  001724                     u1131:
   831  001724  EF73  F00B         	goto	l1712
   832  001728                     u1130:
   833  001728                     
   834                           ; BSR set to: 0
   835                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   836  001728  C060  F050         	movff	_nout,?_vfprintf
   837  00172C  C061  F051         	movff	_nout+1,?_vfprintf+1
   838  001730                     
   839                           ; BSR set to: 0
   840  001730  0012               	return		;funcret
   841  001732                     __end_of_vfprintf:
   842                           	callstack 0
   843                           
   844 ;; *************** function _vfpfcnvrt *****************
   845 ;; Defined at:
   846 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   849 ;;		 -> sprintf@f(6), 
   850 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   851 ;;		 -> vfprintf@cfmt(2), 
   852 ;;  ap              2   67[COMRAM] PTR PTR void 
   853 ;;		 -> sprintf@ap(2), 
   854 ;; Auto vars:     Size  Location     Type
   855 ;;  ll              8   71[COMRAM] long long 
   856 ;;  llu             8    0        unsigned long long 
   857 ;;  f               4    0        unsigned long long 
   858 ;;  vp              3    0        PTR void 
   859 ;;  ct              3    0        unsigned char [3]
   860 ;;  cp              3    0        PTR unsigned char 
   861 ;;  i               2    0        int 
   862 ;;  done            2    0        int 
   863 ;;  c               1    0        unsigned char 
   864 ;; Return value:  Size  Location     Type
   865 ;;                  2   63[COMRAM] int 
   866 ;; Registers used:
   867 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   873 ;;      Params:         6       0       0       0       0       0       0       0       0
   874 ;;      Locals:         8       0       0       0       0       0       0       0       0
   875 ;;      Temps:          2       0       0       0       0       0       0       0       0
   876 ;;      Totals:        16       0       0       0       0       0       0       0       0
   877 ;;Total ram usage:       16 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; Hardware stack levels required when called:    5
   880 ;; This function calls:
   881 ;;		_dtoa
   882 ;;		_fputc
   883 ;; This function is called by:
   884 ;;		_vfprintf
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           	psect	text3
   889  000B00                     __ptext3:
   890                           	callstack 0
   891  000B00                     _vfpfcnvrt:
   892                           	callstack 23
   893  000B00                     
   894                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.31\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.31\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.31\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          1\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   895  000B00  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   896  000B04  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   897  000B08  CFDE FFF6          	movff	postinc2,tblptrl
   898  000B0C  CFDD FFF7          	movff	postdec2,tblptrh
   899  000B10                     	if	0	;tblptru may be non-zero
   900  000B10                     	endif
   901  000B10                     	if	0	;tblptru may be non-zero
   902  000B10                     	endif
   903  000B10  0008               	tblrd		*
   904  000B12  50F5               	movf	tablat,w,c
   905  000B14  0A25               	xorlw	37
   906  000B16  A4D8               	btfss	status,2,c
   907  000B18  EF90  F005         	goto	u1001
   908  000B1C  EF92  F005         	goto	u1000
   909  000B20                     u1001:
   910  000B20  EF3E  F006         	goto	l1654
   911  000B24                     u1000:
   912  000B24                     
   913                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   914  000B24  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   915  000B28  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   916  000B2C  2ADE               	incf	postinc2,f,c
   917  000B2E  0E00               	movlw	0
   918  000B30  22DD               	addwfc	postdec2,f,c
   919  000B32                     
   920                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   921  000B32  0E00               	movlw	0
   922  000B34  0100               	movlb	0	; () banked
   923  000B36  6F63               	movwf	(_width+1)& (0+255),b
   924  000B38  0E00               	movlw	0
   925  000B3A  6F62               	movwf	_width& (0+255),b
   926  000B3C  C062  F066         	movff	_width,_flags
   927  000B40  C063  F067         	movff	_width+1,_flags+1
   928  000B44                     
   929                           ; BSR set to: 0
   930                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   931  000B44  6964               	setf	_prec& (0+255),b
   932  000B46  6965               	setf	(_prec+1)& (0+255),b
   933  000B48                     
   934                           ; BSR set to: 0
   935                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   936  000B48  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   937  000B4C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   938  000B50  CFDE FFF6          	movff	postinc2,tblptrl
   939  000B54  CFDD FFF7          	movff	postdec2,tblptrh
   940  000B58                     	if	0	;tblptru may be non-zero
   941  000B58                     	endif
   942  000B58                     	if	0	;tblptru may be non-zero
   943  000B58                     	endif
   944  000B58  0008               	tblrd		*
   945  000B5A  50F5               	movf	tablat,w,c
   946  000B5C  0A64               	xorlw	100
   947  000B5E  B4D8               	btfsc	status,2,c
   948  000B60  EFB4  F005         	goto	u1011
   949  000B64  EFB6  F005         	goto	u1010
   950  000B68                     u1011:
   951  000B68  EFC8  F005         	goto	l1632
   952  000B6C                     u1010:
   953  000B6C                     
   954                           ; BSR set to: 0
   955  000B6C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   956  000B70  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   957  000B74  CFDE FFF6          	movff	postinc2,tblptrl
   958  000B78  CFDD FFF7          	movff	postdec2,tblptrh
   959  000B7C                     	if	0	;tblptru may be non-zero
   960  000B7C                     	endif
   961  000B7C                     	if	0	;tblptru may be non-zero
   962  000B7C                     	endif
   963  000B7C  0008               	tblrd		*
   964  000B7E  50F5               	movf	tablat,w,c
   965  000B80  0A69               	xorlw	105
   966  000B82  A4D8               	btfss	status,2,c
   967  000B84  EFC6  F005         	goto	u1021
   968  000B88  EFC8  F005         	goto	u1020
   969  000B8C                     u1021:
   970  000B8C  EF08  F006         	goto	l1638
   971  000B90                     u1020:
   972  000B90                     l1632:
   973                           
   974                           ; BSR set to: 0
   975                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
   976  000B90  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   977  000B94  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   978  000B98  2ADE               	incf	postinc2,f,c
   979  000B9A  0E00               	movlw	0
   980  000B9C  22DD               	addwfc	postdec2,f,c
   981                           
   982                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
   983  000B9E  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   984  000BA2  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   985  000BA6  CFDF F046          	movff	indf2,??_vfpfcnvrt
   986  000BAA  0E02               	movlw	2
   987  000BAC  26DE               	addwf	postinc2,f,c
   988  000BAE  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
   989  000BB2  0E00               	movlw	0
   990  000BB4  22DD               	addwfc	postdec2,f,c
   991  000BB6  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
   992  000BBA  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   993  000BBE  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
   994  000BC2  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
   995  000BC6  0E00               	movlw	0
   996  000BC8  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
   997  000BCA  0EFF               	movlw	-1
   998  000BCC  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
   999  000BCE  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  1000  000BD0  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  1001  000BD2  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  1002  000BD4  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  1003  000BD6  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  1004  000BD8                     
  1005                           ; BSR set to: 0
  1006                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  1007  000BD8  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1008  000BDC  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1009  000BE0  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1010  000BE4  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1011  000BE8  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1012  000BEC  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1013  000BF0  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1014  000BF4  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1015  000BF8  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1016  000BFC  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1017  000C00  EC0F  F004         	call	_dtoa	;wreg free
  1018  000C04  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1019  000C08  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1020  000C0C  EF59  F006         	goto	l871
  1021  000C10                     l1638:
  1022                           
  1023                           ; BSR set to: 0
  1024                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1025  000C10  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1026  000C14  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1027  000C18  CFDE FFF6          	movff	postinc2,tblptrl
  1028  000C1C  CFDD FFF7          	movff	postdec2,tblptrh
  1029  000C20                     	if	0	;tblptru may be non-zero
  1030  000C20                     	endif
  1031  000C20                     	if	0	;tblptru may be non-zero
  1032  000C20                     	endif
  1033  000C20  0008               	tblrd		*
  1034  000C22  50F5               	movf	tablat,w,c
  1035  000C24  0A25               	xorlw	37
  1036  000C26  A4D8               	btfss	status,2,c
  1037  000C28  EF18  F006         	goto	u1031
  1038  000C2C  EF1A  F006         	goto	u1030
  1039  000C30                     u1031:
  1040  000C30  EF31  F006         	goto	l1648
  1041  000C34                     u1030:
  1042  000C34                     
  1043                           ; BSR set to: 0
  1044                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1045  000C34  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1046  000C38  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1047  000C3C  2ADE               	incf	postinc2,f,c
  1048  000C3E  0E00               	movlw	0
  1049  000C40  22DD               	addwfc	postdec2,f,c
  1050  000C42                     
  1051                           ; BSR set to: 0
  1052                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1053  000C42  0E00               	movlw	0
  1054  000C44  6E02               	movwf	(fputc@c+1)^0,c
  1055  000C46  0E25               	movlw	37
  1056  000C48  6E01               	movwf	fputc@c^0,c
  1057  000C4A  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1058  000C4E  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1059  000C52  EC9F  F009         	call	_fputc	;wreg free
  1060  000C56                     l1644:
  1061                           
  1062                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1063  000C56  0E00               	movlw	0
  1064  000C58  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1065  000C5A  0E01               	movlw	1
  1066  000C5C  6E40               	movwf	?_vfpfcnvrt^0,c
  1067  000C5E  EF59  F006         	goto	l871
  1068  000C62                     l1648:
  1069                           
  1070                           ; BSR set to: 0
  1071                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1072  000C62  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1073  000C66  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1074  000C6A  2ADE               	incf	postinc2,f,c
  1075  000C6C  0E00               	movlw	0
  1076  000C6E  22DD               	addwfc	postdec2,f,c
  1077  000C70                     
  1078                           ; BSR set to: 0
  1079                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1080  000C70  0E00               	movlw	0
  1081  000C72  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1082  000C74  0E00               	movlw	0
  1083  000C76  6E40               	movwf	?_vfpfcnvrt^0,c
  1084  000C78  EF59  F006         	goto	l871
  1085  000C7C                     l1654:
  1086                           
  1087                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1088  000C7C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1089  000C80  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1090  000C84  CFDE FFF6          	movff	postinc2,tblptrl
  1091  000C88  CFDD FFF7          	movff	postdec2,tblptrh
  1092  000C8C                     	if	0	;tblptru may be non-zero
  1093  000C8C                     	endif
  1094  000C8C                     	if	0	;tblptru may be non-zero
  1095  000C8C                     	endif
  1096  000C8C  0008               	tblrd		*
  1097  000C8E  50F5               	movf	tablat,w,c
  1098  000C90  6E01               	movwf	fputc@c^0,c
  1099  000C92  6A02               	clrf	(fputc@c+1)^0,c
  1100  000C94  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1101  000C98  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1102  000C9C  EC9F  F009         	call	_fputc	;wreg free
  1103  000CA0                     
  1104                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1105  000CA0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1106  000CA4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1107  000CA8  2ADE               	incf	postinc2,f,c
  1108  000CAA  0E00               	movlw	0
  1109  000CAC  22DD               	addwfc	postdec2,f,c
  1110  000CAE  EF2B  F006         	goto	l1644
  1111  000CB2                     l871:
  1112  000CB2  0012               	return		;funcret
  1113  000CB4                     __end_of_vfpfcnvrt:
  1114                           	callstack 0
  1115                           
  1116 ;; *************** function _dtoa *****************
  1117 ;; Defined at:
  1118 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1121 ;;		 -> sprintf@f(6), 
  1122 ;;  d               8   29[COMRAM] long long 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  n               8   53[COMRAM] long long 
  1125 ;;  i               2   61[COMRAM] int 
  1126 ;;  s               2   51[COMRAM] int 
  1127 ;;  w               2   49[COMRAM] int 
  1128 ;;  p               2   47[COMRAM] int 
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  2   27[COMRAM] int 
  1131 ;; Registers used:
  1132 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1138 ;;      Params:        10       0       0       0       0       0       0       0       0
  1139 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1140 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1141 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1142 ;;Total ram usage:       36 bytes
  1143 ;; Hardware stack levels used:    1
  1144 ;; Hardware stack levels required when called:    4
  1145 ;; This function calls:
  1146 ;;		___aodiv
  1147 ;;		___aomod
  1148 ;;		_abs
  1149 ;;		_pad
  1150 ;; This function is called by:
  1151 ;;		_vfpfcnvrt
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           	psect	text4
  1156  00081E                     __ptext4:
  1157                           	callstack 0
  1158  00081E                     _dtoa:
  1159                           	callstack 23
  1160  00081E                     
  1161                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  1162  00081E  C01E  F036         	movff	dtoa@d,dtoa@n
  1163  000822  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1164  000826  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1165  00082A  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1166  00082E  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1167  000832  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1168  000836  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1169  00083A  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1170  00083E                     
  1171                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  1172  00083E  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1173  000840  EF24  F004         	goto	u851
  1174  000844  EF27  F004         	goto	u850
  1175  000848                     u851:
  1176  000848  0E01               	movlw	1
  1177  00084A  EF28  F004         	goto	u860
  1178  00084E                     u850:
  1179  00084E  0E00               	movlw	0
  1180  000850                     u860:
  1181  000850  6E34               	movwf	dtoa@s^0,c
  1182  000852  6A35               	clrf	(dtoa@s+1)^0,c
  1183                           
  1184                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1185  000854  5034               	movf	dtoa@s^0,w,c
  1186  000856  1035               	iorwf	(dtoa@s+1)^0,w,c
  1187  000858  B4D8               	btfsc	status,2,c
  1188  00085A  EF31  F004         	goto	u871
  1189  00085E  EF33  F004         	goto	u870
  1190  000862                     u871:
  1191  000862  EF43  F004         	goto	l1564
  1192  000866                     u870:
  1193  000866                     
  1194                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1195  000866  1E3D               	comf	(dtoa@n+7)^0,f,c
  1196  000868  1E3C               	comf	(dtoa@n+6)^0,f,c
  1197  00086A  1E3B               	comf	(dtoa@n+5)^0,f,c
  1198  00086C  1E3A               	comf	(dtoa@n+4)^0,f,c
  1199  00086E  1E39               	comf	(dtoa@n+3)^0,f,c
  1200  000870  1E38               	comf	(dtoa@n+2)^0,f,c
  1201  000872  1E37               	comf	(dtoa@n+1)^0,f,c
  1202  000874  6C36               	negf	dtoa@n^0,c
  1203  000876  0E00               	movlw	0
  1204  000878  2237               	addwfc	(dtoa@n+1)^0,f,c
  1205  00087A  2238               	addwfc	(dtoa@n+2)^0,f,c
  1206  00087C  2239               	addwfc	(dtoa@n+3)^0,f,c
  1207  00087E  223A               	addwfc	(dtoa@n+4)^0,f,c
  1208  000880  223B               	addwfc	(dtoa@n+5)^0,f,c
  1209  000882  223C               	addwfc	(dtoa@n+6)^0,f,c
  1210  000884  223D               	addwfc	(dtoa@n+7)^0,f,c
  1211  000886                     l1564:
  1212                           
  1213                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1214  000886  0100               	movlb	0	; () banked
  1215  000888  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1216  00088A  EF49  F004         	goto	u881
  1217  00088E  EF4B  F004         	goto	u880
  1218  000892                     u881:
  1219  000892  EF4C  F004         	goto	l1568
  1220  000896                     u880:
  1221  000896                     
  1222                           ; BSR set to: 0
  1223                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1224  000896  9366               	bcf	_flags& (0+255),1,b
  1225  000898                     l1568:
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1229  000898  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1230  00089A  EF59  F004         	goto	u890
  1231  00089E  5165               	movf	(_prec+1)& (0+255),w,b
  1232  0008A0  E106               	bnz	u891
  1233  0008A2  0564               	decf	_prec& (0+255),w,b
  1234  0008A4  B0D8               	btfsc	status,0,c
  1235  0008A6  EF57  F004         	goto	u891
  1236  0008AA  EF59  F004         	goto	u890
  1237  0008AE                     u891:
  1238  0008AE  EF5F  F004         	goto	l844
  1239  0008B2                     u890:
  1240  0008B2                     
  1241                           ; BSR set to: 0
  1242  0008B2  0E00               	movlw	0
  1243  0008B4  6E31               	movwf	(dtoa@p+1)^0,c
  1244  0008B6  0E01               	movlw	1
  1245  0008B8  6E30               	movwf	dtoa@p^0,c
  1246  0008BA  EF63  F004         	goto	l846
  1247  0008BE                     l844:
  1248                           
  1249                           ; BSR set to: 0
  1250  0008BE  C064  F030         	movff	_prec,dtoa@p
  1251  0008C2  C065  F031         	movff	_prec+1,dtoa@p+1
  1252  0008C6                     l846:
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1256  0008C6  C062  F032         	movff	_width,dtoa@w
  1257  0008CA  C063  F033         	movff	_width+1,dtoa@w+1
  1258  0008CE                     
  1259                           ; BSR set to: 0
  1260                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1261  0008CE  5034               	movf	dtoa@s^0,w,c
  1262  0008D0  1035               	iorwf	(dtoa@s+1)^0,w,c
  1263  0008D2  A4D8               	btfss	status,2,c
  1264  0008D4  EF6E  F004         	goto	u901
  1265  0008D8  EF70  F004         	goto	u900
  1266  0008DC                     u901:
  1267  0008DC  EF77  F004         	goto	l1576
  1268  0008E0                     u900:
  1269  0008E0                     
  1270                           ; BSR set to: 0
  1271  0008E0  A566               	btfss	_flags& (0+255),2,b
  1272  0008E2  EF75  F004         	goto	u911
  1273  0008E6  EF77  F004         	goto	u910
  1274  0008EA                     u911:
  1275  0008EA  EF7A  F004         	goto	l1578
  1276  0008EE                     u910:
  1277  0008EE                     l1576:
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 306:         --w;
  1281  0008EE  0632               	decf	dtoa@w^0,f,c
  1282  0008F0  A0D8               	btfss	status,0,c
  1283  0008F2  0633               	decf	(dtoa@w+1)^0,f,c
  1284  0008F4                     l1578:
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1288  0008F4  0E00               	movlw	0
  1289  0008F6  6E3F               	movwf	(dtoa@i+1)^0,c
  1290  0008F8  0E1F               	movlw	31
  1291  0008FA  6E3E               	movwf	dtoa@i^0,c
  1292  0008FC                     
  1293                           ; BSR set to: 0
  1294                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1295  0008FC  0E00               	movlw	0
  1296  0008FE  6F89               	movwf	(_dbuf+31)& (0+255),b
  1297                           
  1298                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1299  000900  EFFE  F004         	goto	l1592
  1300  000904                     l1582:
  1301                           
  1302                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 313:         --i;
  1303  000904  063E               	decf	dtoa@i^0,f,c
  1304  000906  A0D8               	btfss	status,0,c
  1305  000908  063F               	decf	(dtoa@i+1)^0,f,c
  1306  00090A                     
  1307                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1308  00090A  0E6A               	movlw	low _dbuf
  1309  00090C  243E               	addwf	dtoa@i^0,w,c
  1310  00090E  6ED9               	movwf	fsr2l,c
  1311  000910  0E00               	movlw	high _dbuf
  1312  000912  203F               	addwfc	(dtoa@i+1)^0,w,c
  1313  000914  6EDA               	movwf	fsr2h,c
  1314  000916  C036  F001         	movff	dtoa@n,___aomod@dividend
  1315  00091A  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1316  00091E  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1317  000922  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1318  000926  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1319  00092A  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1320  00092E  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1321  000932  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1322  000936  0E0A               	movlw	10
  1323  000938  6E09               	movwf	___aomod@divisor^0,c
  1324  00093A  0E00               	movlw	0
  1325  00093C  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1326  00093E  0E00               	movlw	0
  1327  000940  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1328  000942  0E00               	movlw	0
  1329  000944  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1330  000946  0E00               	movlw	0
  1331  000948  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1332  00094A  0E00               	movlw	0
  1333  00094C  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1334  00094E  0E00               	movlw	0
  1335  000950  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1336  000952  0E00               	movlw	0
  1337  000954  6E10               	movwf	(___aomod@divisor+7)^0,c
  1338  000956  EC1E  F007         	call	___aomod	;wreg free
  1339  00095A  C001  F026         	movff	?___aomod,??_dtoa
  1340  00095E  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1341  000962  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1342  000966  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1343  00096A  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1344  00096E  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1345  000972  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1346  000976  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1347  00097A  C026  F013         	movff	??_dtoa,abs@a
  1348  00097E  C028  F014         	movff	??_dtoa+2,abs@a+1
  1349  000982  EC08  F00C         	call	_abs	;wreg free
  1350  000986  5013               	movf	?_abs^0,w,c
  1351  000988  0F30               	addlw	48
  1352  00098A  6EDF               	movwf	indf2,c
  1353  00098C                     
  1354                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 315:         --p;
  1355  00098C  0630               	decf	dtoa@p^0,f,c
  1356  00098E  A0D8               	btfss	status,0,c
  1357  000990  0631               	decf	(dtoa@p+1)^0,f,c
  1358  000992                     
  1359                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 316:         --w;
  1360  000992  0632               	decf	dtoa@w^0,f,c
  1361  000994  A0D8               	btfss	status,0,c
  1362  000996  0633               	decf	(dtoa@w+1)^0,f,c
  1363  000998                     
  1364                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1365  000998  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1366  00099C  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1367  0009A0  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1368  0009A4  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1369  0009A8  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1370  0009AC  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1371  0009B0  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1372  0009B4  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1373  0009B8  0E0A               	movlw	10
  1374  0009BA  6E09               	movwf	___aodiv@divisor^0,c
  1375  0009BC  0E00               	movlw	0
  1376  0009BE  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1377  0009C0  0E00               	movlw	0
  1378  0009C2  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1379  0009C4  0E00               	movlw	0
  1380  0009C6  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1381  0009C8  0E00               	movlw	0
  1382  0009CA  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1383  0009CC  0E00               	movlw	0
  1384  0009CE  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1385  0009D0  0E00               	movlw	0
  1386  0009D2  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1387  0009D4  0E00               	movlw	0
  1388  0009D6  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1389  0009D8  EC5A  F006         	call	___aodiv	;wreg free
  1390  0009DC  C001  F036         	movff	?___aodiv,dtoa@n
  1391  0009E0  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1392  0009E4  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1393  0009E8  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1394  0009EC  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1395  0009F0  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1396  0009F4  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1397  0009F8  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1398  0009FC                     l1592:
  1399                           
  1400                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1401  0009FC  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1402  0009FE  EF09  F005         	goto	u921
  1403  000A02  503F               	movf	(dtoa@i+1)^0,w,c
  1404  000A04  E108               	bnz	u920
  1405  000A06  043E               	decf	dtoa@i^0,w,c
  1406  000A08  A0D8               	btfss	status,0,c
  1407  000A0A  EF09  F005         	goto	u921
  1408  000A0E  EF0B  F005         	goto	u920
  1409  000A12                     u921:
  1410  000A12  EF3C  F005         	goto	l1602
  1411  000A16                     u920:
  1412  000A16  5036               	movf	dtoa@n^0,w,c
  1413  000A18  1037               	iorwf	(dtoa@n+1)^0,w,c
  1414  000A1A  1038               	iorwf	(dtoa@n+2)^0,w,c
  1415  000A1C  1039               	iorwf	(dtoa@n+3)^0,w,c
  1416  000A1E  103A               	iorwf	(dtoa@n+4)^0,w,c
  1417  000A20  103B               	iorwf	(dtoa@n+5)^0,w,c
  1418  000A22  103C               	iorwf	(dtoa@n+6)^0,w,c
  1419  000A24  103D               	iorwf	(dtoa@n+7)^0,w,c
  1420  000A26  A4D8               	btfss	status,2,c
  1421  000A28  EF18  F005         	goto	u931
  1422  000A2C  EF1A  F005         	goto	u930
  1423  000A30                     u931:
  1424  000A30  EF82  F004         	goto	l1582
  1425  000A34                     u930:
  1426  000A34  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1427  000A36  EF27  F005         	goto	u940
  1428  000A3A  5031               	movf	(dtoa@p+1)^0,w,c
  1429  000A3C  E106               	bnz	u941
  1430  000A3E  0430               	decf	dtoa@p^0,w,c
  1431  000A40  B0D8               	btfsc	status,0,c
  1432  000A42  EF25  F005         	goto	u941
  1433  000A46  EF27  F005         	goto	u940
  1434  000A4A                     u941:
  1435  000A4A  EF82  F004         	goto	l1582
  1436  000A4E                     u940:
  1437  000A4E  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1438  000A50  EF32  F005         	goto	u951
  1439  000A54  5033               	movf	(dtoa@w+1)^0,w,c
  1440  000A56  E108               	bnz	u950
  1441  000A58  0432               	decf	dtoa@w^0,w,c
  1442  000A5A  A0D8               	btfss	status,0,c
  1443  000A5C  EF32  F005         	goto	u951
  1444  000A60  EF34  F005         	goto	u950
  1445  000A64                     u951:
  1446  000A64  EF3C  F005         	goto	l1602
  1447  000A68                     u950:
  1448  000A68  0100               	movlb	0	; () banked
  1449  000A6A  B366               	btfsc	_flags& (0+255),1,b
  1450  000A6C  EF3A  F005         	goto	u961
  1451  000A70  EF3C  F005         	goto	u960
  1452  000A74                     u961:
  1453  000A74  EF82  F004         	goto	l1582
  1454  000A78                     u960:
  1455  000A78                     l1602:
  1456                           
  1457                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1458  000A78  5034               	movf	dtoa@s^0,w,c
  1459  000A7A  1035               	iorwf	(dtoa@s+1)^0,w,c
  1460  000A7C  A4D8               	btfss	status,2,c
  1461  000A7E  EF43  F005         	goto	u971
  1462  000A82  EF45  F005         	goto	u970
  1463  000A86                     u971:
  1464  000A86  EF4D  F005         	goto	l1606
  1465  000A8A                     u970:
  1466  000A8A  0100               	movlb	0	; () banked
  1467  000A8C  A566               	btfss	_flags& (0+255),2,b
  1468  000A8E  EF4B  F005         	goto	u981
  1469  000A92  EF4D  F005         	goto	u980
  1470  000A96                     u981:
  1471  000A96  EF6B  F005         	goto	l1616
  1472  000A9A                     u980:
  1473  000A9A                     l1606:
  1474                           
  1475                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 322:         --i;
  1476  000A9A  063E               	decf	dtoa@i^0,f,c
  1477  000A9C  A0D8               	btfss	status,0,c
  1478  000A9E  063F               	decf	(dtoa@i+1)^0,f,c
  1479  000AA0                     
  1480                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1481  000AA0  5034               	movf	dtoa@s^0,w,c
  1482  000AA2  1035               	iorwf	(dtoa@s+1)^0,w,c
  1483  000AA4  A4D8               	btfss	status,2,c
  1484  000AA6  EF57  F005         	goto	u991
  1485  000AAA  EF59  F005         	goto	u990
  1486  000AAE                     u991:
  1487  000AAE  EF5F  F005         	goto	l1612
  1488  000AB2                     u990:
  1489  000AB2  0E00               	movlw	0
  1490  000AB4  6E2F               	movwf	(_dtoa$914+1)^0,c
  1491  000AB6  0E2B               	movlw	43
  1492  000AB8  6E2E               	movwf	_dtoa$914^0,c
  1493  000ABA  EF63  F005         	goto	l1614
  1494  000ABE                     l1612:
  1495  000ABE  0E00               	movlw	0
  1496  000AC0  6E2F               	movwf	(_dtoa$914+1)^0,c
  1497  000AC2  0E2D               	movlw	45
  1498  000AC4  6E2E               	movwf	_dtoa$914^0,c
  1499  000AC6                     l1614:
  1500  000AC6  0E6A               	movlw	low _dbuf
  1501  000AC8  243E               	addwf	dtoa@i^0,w,c
  1502  000ACA  6ED9               	movwf	fsr2l,c
  1503  000ACC  0E00               	movlw	high _dbuf
  1504  000ACE  203F               	addwfc	(dtoa@i+1)^0,w,c
  1505  000AD0  6EDA               	movwf	fsr2h,c
  1506  000AD2  C02E  FFDF         	movff	_dtoa$914,indf2
  1507  000AD6                     l1616:
  1508                           
  1509                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1510  000AD6  C01C  F011         	movff	dtoa@fp,pad@fp
  1511  000ADA  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1512  000ADE  0E6A               	movlw	low _dbuf
  1513  000AE0  243E               	addwf	dtoa@i^0,w,c
  1514  000AE2  6E13               	movwf	pad@buf^0,c
  1515  000AE4  0E00               	movlw	high _dbuf
  1516  000AE6  203F               	addwfc	(dtoa@i+1)^0,w,c
  1517  000AE8  6E14               	movwf	(pad@buf+1)^0,c
  1518  000AEA  C032  F015         	movff	dtoa@w,pad@p
  1519  000AEE  C033  F016         	movff	dtoa@w+1,pad@p+1
  1520  000AF2  EC04  F00A         	call	_pad	;wreg free
  1521  000AF6  C011  F01C         	movff	?_pad,?_dtoa
  1522  000AFA  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1523  000AFE  0012               	return		;funcret
  1524  000B00                     __end_of_dtoa:
  1525                           	callstack 0
  1526                           
  1527 ;; *************** function _pad *****************
  1528 ;; Defined at:
  1529 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1532 ;;		 -> sprintf@f(6), 
  1533 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1534 ;;		 -> dbuf(32), 
  1535 ;;  p               2   20[COMRAM] int 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  w               2   25[COMRAM] int 
  1538 ;;  i               2   23[COMRAM] int 
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  2   16[COMRAM] int 
  1541 ;; Registers used:
  1542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1548 ;;      Params:         6       0       0       0       0       0       0       0       0
  1549 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1550 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1551 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1552 ;;Total ram usage:       11 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; Hardware stack levels required when called:    3
  1555 ;; This function calls:
  1556 ;;		_fputc
  1557 ;;		_fputs
  1558 ;;		_strlen
  1559 ;; This function is called by:
  1560 ;;		_dtoa
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text5
  1565  001408                     __ptext5:
  1566                           	callstack 0
  1567  001408                     _pad:
  1568                           	callstack 23
  1569  001408                     
  1570                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1571  001408  0100               	movlb	0	; () banked
  1572  00140A  A166               	btfss	_flags& (0+255),0,b
  1573  00140C  EF0A  F00A         	goto	u801
  1574  001410  EF0C  F00A         	goto	u800
  1575  001414                     u801:
  1576  001414  EF16  F00A         	goto	l1536
  1577  001418                     u800:
  1578  001418                     
  1579                           ; BSR set to: 0
  1580                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1581  001418  C013  F00A         	movff	pad@buf,fputs@s
  1582  00141C  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1583  001420  C011  F00C         	movff	pad@fp,fputs@fp
  1584  001424  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1585  001428  ECE6  F00B         	call	_fputs	;wreg free
  1586  00142C                     l1536:
  1587                           
  1588                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1589  00142C  BE16               	btfsc	(pad@p+1)^0,7,c
  1590  00142E  EF1B  F00A         	goto	u811
  1591  001432  EF1D  F00A         	goto	u810
  1592  001436                     u811:
  1593  001436  EF23  F00A         	goto	l1540
  1594  00143A                     u810:
  1595  00143A  C015  F01A         	movff	pad@p,pad@w
  1596  00143E  C016  F01B         	movff	pad@p+1,pad@w+1
  1597  001442  EF27  F00A         	goto	l833
  1598  001446                     l1540:
  1599  001446  0E00               	movlw	0
  1600  001448  6E1B               	movwf	(pad@w+1)^0,c
  1601  00144A  0E00               	movlw	0
  1602  00144C  6E1A               	movwf	pad@w^0,c
  1603  00144E                     l833:
  1604                           
  1605                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1606  00144E  0E00               	movlw	0
  1607  001450  6E19               	movwf	(pad@i+1)^0,c
  1608  001452  0E00               	movlw	0
  1609  001454  6E18               	movwf	pad@i^0,c
  1610                           
  1611                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1612  001456  EF39  F00A         	goto	l1546
  1613  00145A                     l1542:
  1614                           
  1615                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1616  00145A  0E00               	movlw	0
  1617  00145C  6E02               	movwf	(fputc@c+1)^0,c
  1618  00145E  0E20               	movlw	32
  1619  001460  6E01               	movwf	fputc@c^0,c
  1620  001462  C011  F003         	movff	pad@fp,fputc@fp
  1621  001466  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1622  00146A  EC9F  F009         	call	_fputc	;wreg free
  1623  00146E                     
  1624                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1625  00146E  4A18               	infsnz	pad@i^0,f,c
  1626  001470  2A19               	incf	(pad@i+1)^0,f,c
  1627  001472                     l1546:
  1628                           
  1629                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1630  001472  501A               	movf	pad@w^0,w,c
  1631  001474  5C18               	subwf	pad@i^0,w,c
  1632  001476  5019               	movf	(pad@i+1)^0,w,c
  1633  001478  0A80               	xorlw	128
  1634  00147A  6E17               	movwf	??_pad^0,c
  1635  00147C  501B               	movf	(pad@w+1)^0,w,c
  1636  00147E  0A80               	xorlw	128
  1637  001480  5817               	subwfb	??_pad^0,w,c
  1638  001482  A0D8               	btfss	status,0,c
  1639  001484  EF46  F00A         	goto	u821
  1640  001488  EF48  F00A         	goto	u820
  1641  00148C                     u821:
  1642  00148C  EF2D  F00A         	goto	l1542
  1643  001490                     u820:
  1644  001490                     
  1645                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1646  001490  0100               	movlb	0	; () banked
  1647  001492  B166               	btfsc	_flags& (0+255),0,b
  1648  001494  EF4E  F00A         	goto	u831
  1649  001498  EF50  F00A         	goto	u830
  1650  00149C                     u831:
  1651  00149C  EF5A  F00A         	goto	l1550
  1652  0014A0                     u830:
  1653  0014A0                     
  1654                           ; BSR set to: 0
  1655                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1656  0014A0  C013  F00A         	movff	pad@buf,fputs@s
  1657  0014A4  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1658  0014A8  C011  F00C         	movff	pad@fp,fputs@fp
  1659  0014AC  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1660  0014B0  ECE6  F00B         	call	_fputs	;wreg free
  1661  0014B4                     l1550:
  1662                           
  1663                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1664  0014B4  C013  F001         	movff	pad@buf,strlen@s
  1665  0014B8  C014  F002         	movff	pad@buf+1,strlen@s+1
  1666  0014BC  EC46  F00C         	call	_strlen	;wreg free
  1667  0014C0  501A               	movf	pad@w^0,w,c
  1668  0014C2  2401               	addwf	?_strlen^0,w,c
  1669  0014C4  6E11               	movwf	?_pad^0,c
  1670  0014C6  501B               	movf	(pad@w+1)^0,w,c
  1671  0014C8  2002               	addwfc	(?_strlen+1)^0,w,c
  1672  0014CA  6E12               	movwf	(?_pad+1)^0,c
  1673  0014CC  0012               	return		;funcret
  1674  0014CE                     __end_of_pad:
  1675                           	callstack 0
  1676                           
  1677 ;; *************** function _strlen *****************
  1678 ;; Defined at:
  1679 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\strlen.c"
  1680 ;; Parameters:    Size  Location     Type
  1681 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1682 ;;		 -> dbuf(32), 
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1685 ;;		 -> dbuf(32), 
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  2    0[COMRAM] unsigned int 
  1688 ;; Registers used:
  1689 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1695 ;;      Params:         2       0       0       0       0       0       0       0       0
  1696 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1697 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1698 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1699 ;;Total ram usage:        4 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; This function calls:
  1702 ;;		Nothing
  1703 ;; This function is called by:
  1704 ;;		_pad
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           	psect	text6
  1709  00188C                     __ptext6:
  1710                           	callstack 0
  1711  00188C                     _strlen:
  1712                           	callstack 25
  1713  00188C  C001  F003         	movff	strlen@s,strlen@a
  1714  001890  C002  F004         	movff	strlen@s+1,strlen@a+1
  1715  001894  EF4E  F00C         	goto	l1446
  1716  001898                     l1444:
  1717  001898  4A01               	infsnz	strlen@s^0,f,c
  1718  00189A  2A02               	incf	(strlen@s+1)^0,f,c
  1719  00189C                     l1446:
  1720  00189C  C001  FFD9         	movff	strlen@s,fsr2l
  1721  0018A0  C002  FFDA         	movff	strlen@s+1,fsr2h
  1722  0018A4  50DF               	movf	indf2,w,c
  1723  0018A6  A4D8               	btfss	status,2,c
  1724  0018A8  EF58  F00C         	goto	u661
  1725  0018AC  EF5A  F00C         	goto	u660
  1726  0018B0                     u661:
  1727  0018B0  EF4C  F00C         	goto	l1444
  1728  0018B4                     u660:
  1729  0018B4  5003               	movf	strlen@a^0,w,c
  1730  0018B6  5C01               	subwf	strlen@s^0,w,c
  1731  0018B8  6E01               	movwf	?_strlen^0,c
  1732  0018BA  5004               	movf	(strlen@a+1)^0,w,c
  1733  0018BC  5802               	subwfb	(strlen@s+1)^0,w,c
  1734  0018BE  6E02               	movwf	(?_strlen+1)^0,c
  1735  0018C0  0012               	return		;funcret
  1736  0018C2                     __end_of_strlen:
  1737                           	callstack 0
  1738                           
  1739 ;; *************** function _fputs *****************
  1740 ;; Defined at:
  1741 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_fputs.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1744 ;;		 -> dbuf(32), 
  1745 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1746 ;;		 -> sprintf@f(6), 
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;  i               2   14[COMRAM] int 
  1749 ;;  c               1   13[COMRAM] unsigned char 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  2    9[COMRAM] int 
  1752 ;; Registers used:
  1753 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1759 ;;      Params:         4       0       0       0       0       0       0       0       0
  1760 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1761 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1762 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1763 ;;Total ram usage:        7 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    2
  1766 ;; This function calls:
  1767 ;;		_fputc
  1768 ;; This function is called by:
  1769 ;;		_pad
  1770 ;; This function uses a non-reentrant model
  1771 ;;
  1772                           
  1773                           	psect	text7
  1774  0017CC                     __ptext7:
  1775                           	callstack 0
  1776  0017CC                     _fputs:
  1777                           	callstack 23
  1778  0017CC  0E00               	movlw	0
  1779  0017CE  6E10               	movwf	(fputs@i+1)^0,c
  1780  0017D0  0E00               	movlw	0
  1781  0017D2  6E0F               	movwf	fputs@i^0,c
  1782  0017D4  EFF7  F00B         	goto	l1440
  1783  0017D8                     l1436:
  1784  0017D8  C00E  F001         	movff	fputs@c,fputc@c
  1785  0017DC  6A02               	clrf	(fputc@c+1)^0,c
  1786  0017DE  C00C  F003         	movff	fputs@fp,fputc@fp
  1787  0017E2  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1788  0017E6  EC9F  F009         	call	_fputc	;wreg free
  1789  0017EA  4A0F               	infsnz	fputs@i^0,f,c
  1790  0017EC  2A10               	incf	(fputs@i+1)^0,f,c
  1791  0017EE                     l1440:
  1792  0017EE  500F               	movf	fputs@i^0,w,c
  1793  0017F0  240A               	addwf	fputs@s^0,w,c
  1794  0017F2  6ED9               	movwf	fsr2l,c
  1795  0017F4  5010               	movf	(fputs@i+1)^0,w,c
  1796  0017F6  200B               	addwfc	(fputs@s+1)^0,w,c
  1797  0017F8  6EDA               	movwf	fsr2h,c
  1798  0017FA  50DF               	movf	indf2,w,c
  1799  0017FC  6E0E               	movwf	fputs@c^0,c
  1800  0017FE  500E               	movf	fputs@c^0,w,c
  1801  001800  A4D8               	btfss	status,2,c
  1802  001802  EF05  F00C         	goto	u651
  1803  001806  EF07  F00C         	goto	u650
  1804  00180A                     u651:
  1805  00180A  EFEC  F00B         	goto	l1436
  1806  00180E                     u650:
  1807  00180E  0012               	return		;funcret
  1808  001810                     __end_of_fputs:
  1809                           	callstack 0
  1810                           
  1811 ;; *************** function _fputc *****************
  1812 ;; Defined at:
  1813 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_fputc.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  c               2    0[COMRAM] int 
  1816 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1817 ;;		 -> sprintf@f(6), 
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;		None
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  2    0[COMRAM] int 
  1822 ;; Registers used:
  1823 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1829 ;;      Params:         4       0       0       0       0       0       0       0       0
  1830 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1831 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1832 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1833 ;;Total ram usage:        9 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:    1
  1836 ;; This function calls:
  1837 ;;		_putch
  1838 ;; This function is called by:
  1839 ;;		_pad
  1840 ;;		_vfpfcnvrt
  1841 ;;		_fputs
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text8
  1846  00133E                     __ptext8:
  1847                           	callstack 0
  1848  00133E                     _fputc:
  1849                           	callstack 26
  1850  00133E  5003               	movf	fputc@fp^0,w,c
  1851  001340  1004               	iorwf	(fputc@fp+1)^0,w,c
  1852  001342  B4D8               	btfsc	status,2,c
  1853  001344  EFA6  F009         	goto	u611
  1854  001348  EFA8  F009         	goto	u610
  1855  00134C                     u611:
  1856  00134C  EFB1  F009         	goto	l1424
  1857  001350                     u610:
  1858  001350  5003               	movf	fputc@fp^0,w,c
  1859  001352  1004               	iorwf	(fputc@fp+1)^0,w,c
  1860  001354  A4D8               	btfss	status,2,c
  1861  001356  EFAF  F009         	goto	u621
  1862  00135A  EFB1  F009         	goto	u620
  1863  00135E                     u621:
  1864  00135E  EFB6  F009         	goto	l1426
  1865  001362                     u620:
  1866  001362                     l1424:
  1867  001362  5001               	movf	fputc@c^0,w,c
  1868  001364  EC6C  F00C         	call	_putch
  1869  001368  EF03  F00A         	goto	l897
  1870  00136C                     l1426:
  1871  00136C  EE20 F004          	lfsr	2,4
  1872  001370  5003               	movf	fputc@fp^0,w,c
  1873  001372  26D9               	addwf	fsr2l,f,c
  1874  001374  5004               	movf	(fputc@fp+1)^0,w,c
  1875  001376  22DA               	addwfc	fsr2h,f,c
  1876  001378  50DE               	movf	postinc2,w,c
  1877  00137A  10DE               	iorwf	postinc2,w,c
  1878  00137C  B4D8               	btfsc	status,2,c
  1879  00137E  EFC3  F009         	goto	u631
  1880  001382  EFC5  F009         	goto	u630
  1881  001386                     u631:
  1882  001386  EFE0  F009         	goto	l1430
  1883  00138A                     u630:
  1884  00138A  EE20 F004          	lfsr	2,4
  1885  00138E  5003               	movf	fputc@fp^0,w,c
  1886  001390  26D9               	addwf	fsr2l,f,c
  1887  001392  5004               	movf	(fputc@fp+1)^0,w,c
  1888  001394  22DA               	addwfc	fsr2h,f,c
  1889  001396  EE10 F002          	lfsr	1,2
  1890  00139A  5003               	movf	fputc@fp^0,w,c
  1891  00139C  26E1               	addwf	fsr1l,f,c
  1892  00139E  5004               	movf	(fputc@fp+1)^0,w,c
  1893  0013A0  22E2               	addwfc	fsr1h,f,c
  1894  0013A2  50DE               	movf	postinc2,w,c
  1895  0013A4  5CE6               	subwf	postinc1,w,c
  1896  0013A6  50E6               	movf	postinc1,w,c
  1897  0013A8  0A80               	xorlw	128
  1898  0013AA  6E09               	movwf	(??_fputc+4)^0,c
  1899  0013AC  50DE               	movf	postinc2,w,c
  1900  0013AE  0A80               	xorlw	128
  1901  0013B0  5809               	subwfb	(??_fputc+4)^0,w,c
  1902  0013B2  B0D8               	btfsc	status,0,c
  1903  0013B4  EFDE  F009         	goto	u641
  1904  0013B8  EFE0  F009         	goto	u640
  1905  0013BC                     u641:
  1906  0013BC  EF03  F00A         	goto	l897
  1907  0013C0                     u640:
  1908  0013C0                     l1430:
  1909  0013C0  EE20 F002          	lfsr	2,2
  1910  0013C4  5003               	movf	fputc@fp^0,w,c
  1911  0013C6  26D9               	addwf	fsr2l,f,c
  1912  0013C8  5004               	movf	(fputc@fp+1)^0,w,c
  1913  0013CA  22DA               	addwfc	fsr2h,f,c
  1914  0013CC  CFDE F005          	movff	postinc2,??_fputc
  1915  0013D0  CFDD F006          	movff	postdec2,??_fputc+1
  1916  0013D4  C003  FFD9         	movff	fputc@fp,fsr2l
  1917  0013D8  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1918  0013DC  CFDE F007          	movff	postinc2,??_fputc+2
  1919  0013E0  CFDD F008          	movff	postdec2,??_fputc+3
  1920  0013E4  5005               	movf	??_fputc^0,w,c
  1921  0013E6  2407               	addwf	(??_fputc+2)^0,w,c
  1922  0013E8  6ED9               	movwf	fsr2l,c
  1923  0013EA  5006               	movf	(??_fputc+1)^0,w,c
  1924  0013EC  2008               	addwfc	(??_fputc+3)^0,w,c
  1925  0013EE  6EDA               	movwf	fsr2h,c
  1926  0013F0  C001  FFDF         	movff	fputc@c,indf2
  1927  0013F4  EE20 F002          	lfsr	2,2
  1928  0013F8  5003               	movf	fputc@fp^0,w,c
  1929  0013FA  26D9               	addwf	fsr2l,f,c
  1930  0013FC  5004               	movf	(fputc@fp+1)^0,w,c
  1931  0013FE  22DA               	addwfc	fsr2h,f,c
  1932  001400  2ADE               	incf	postinc2,f,c
  1933  001402  0E00               	movlw	0
  1934  001404  22DD               	addwfc	postdec2,f,c
  1935  001406                     l897:
  1936  001406  0012               	return		;funcret
  1937  001408                     __end_of_fputc:
  1938                           	callstack 0
  1939                           
  1940 ;; *************** function _putch *****************
  1941 ;; Defined at:
  1942 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\putch.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  c               1    wreg     unsigned char 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;  c               1    0[COMRAM] unsigned char 
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  1    wreg      void 
  1949 ;; Registers used:
  1950 ;;		wreg
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1956 ;;      Params:         0       0       0       0       0       0       0       0       0
  1957 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1958 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1959 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1960 ;;Total ram usage:        0 bytes
  1961 ;; Hardware stack levels used:    1
  1962 ;; This function calls:
  1963 ;;		Nothing
  1964 ;; This function is called by:
  1965 ;;		_fputc
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969                           	psect	text9
  1970  0018D8                     __ptext9:
  1971                           	callstack 0
  1972  0018D8                     _putch:
  1973                           	callstack 26
  1974  0018D8  0012               	return		;funcret
  1975  0018DA                     __end_of_putch:
  1976                           	callstack 0
  1977                           
  1978 ;; *************** function _abs *****************
  1979 ;; Defined at:
  1980 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\abs.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;  a               2   18[COMRAM] int 
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;		None
  1985 ;; Return value:  Size  Location     Type
  1986 ;;                  2   18[COMRAM] int 
  1987 ;; Registers used:
  1988 ;;		wreg, status,2, status,0
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1994 ;;      Params:         2       0       0       0       0       0       0       0       0
  1995 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1996 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1997 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1998 ;;Total ram usage:        4 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; This function calls:
  2001 ;;		Nothing
  2002 ;; This function is called by:
  2003 ;;		_dtoa
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           	psect	text10
  2008  001810                     __ptext10:
  2009                           	callstack 0
  2010  001810                     _abs:
  2011                           	callstack 26
  2012  001810  BE14               	btfsc	(abs@a+1)^0,7,c
  2013  001812  EF15  F00C         	goto	u840
  2014  001816  5014               	movf	(abs@a+1)^0,w,c
  2015  001818  E106               	bnz	u841
  2016  00181A  0413               	decf	abs@a^0,w,c
  2017  00181C  B0D8               	btfsc	status,0,c
  2018  00181E  EF13  F00C         	goto	u841
  2019  001822  EF15  F00C         	goto	u840
  2020  001826                     u841:
  2021  001826  EF23  F00C         	goto	l882
  2022  00182A                     u840:
  2023  00182A  C013  F015         	movff	abs@a,??_abs
  2024  00182E  C014  F016         	movff	abs@a+1,??_abs+1
  2025  001832  1E15               	comf	??_abs^0,f,c
  2026  001834  1E16               	comf	(??_abs+1)^0,f,c
  2027  001836  4A15               	infsnz	??_abs^0,f,c
  2028  001838  2A16               	incf	(??_abs+1)^0,f,c
  2029  00183A  C015  F013         	movff	??_abs,?_abs
  2030  00183E  C016  F014         	movff	??_abs+1,?_abs+1
  2031  001842  EF27  F00C         	goto	l885
  2032  001846                     l882:
  2033  001846  C013  F013         	movff	abs@a,?_abs
  2034  00184A  C014  F014         	movff	abs@a+1,?_abs+1
  2035  00184E                     l885:
  2036  00184E  0012               	return		;funcret
  2037  001850                     __end_of_abs:
  2038                           	callstack 0
  2039                           
  2040 ;; *************** function ___aomod *****************
  2041 ;; Defined at:
  2042 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\aomod.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  dividend        8    0[COMRAM] long long 
  2045 ;;  divisor         8    8[COMRAM] long long 
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;  sign            1   17[COMRAM] unsigned char 
  2048 ;;  counter         1   16[COMRAM] unsigned char 
  2049 ;; Return value:  Size  Location     Type
  2050 ;;                  8    0[COMRAM] long long 
  2051 ;; Registers used:
  2052 ;;		wreg, status,2, status,0
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2058 ;;      Params:        16       0       0       0       0       0       0       0       0
  2059 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2060 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2061 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2062 ;;Total ram usage:       18 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_dtoa
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text11
  2072  000E3C                     __ptext11:
  2073                           	callstack 0
  2074  000E3C                     ___aomod:
  2075                           	callstack 26
  2076  000E3C  0E00               	movlw	0
  2077  000E3E  6E12               	movwf	___aomod@sign^0,c
  2078  000E40  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2079  000E42  EF27  F007         	goto	u740
  2080  000E46  EF25  F007         	goto	u741
  2081  000E4A                     u741:
  2082  000E4A  EF39  F007         	goto	l1504
  2083  000E4E                     u740:
  2084  000E4E  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2085  000E50  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2086  000E52  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2087  000E54  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2088  000E56  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2089  000E58  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2090  000E5A  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2091  000E5C  6C01               	negf	___aomod@dividend^0,c
  2092  000E5E  0E00               	movlw	0
  2093  000E60  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2094  000E62  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2095  000E64  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2096  000E66  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2097  000E68  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2098  000E6A  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2099  000E6C  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2100  000E6E  0E01               	movlw	1
  2101  000E70  6E12               	movwf	___aomod@sign^0,c
  2102  000E72                     l1504:
  2103  000E72  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2104  000E74  EF40  F007         	goto	u750
  2105  000E78  EF3E  F007         	goto	u751
  2106  000E7C                     u751:
  2107  000E7C  EF50  F007         	goto	l1508
  2108  000E80                     u750:
  2109  000E80  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2110  000E82  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2111  000E84  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2112  000E86  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2113  000E88  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2114  000E8A  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2115  000E8C  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2116  000E8E  6C09               	negf	___aomod@divisor^0,c
  2117  000E90  0E00               	movlw	0
  2118  000E92  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2119  000E94  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2120  000E96  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2121  000E98  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2122  000E9A  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2123  000E9C  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2124  000E9E  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2125  000EA0                     l1508:
  2126  000EA0  5009               	movf	___aomod@divisor^0,w,c
  2127  000EA2  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2128  000EA4  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2129  000EA6  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2130  000EA8  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2131  000EAA  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2132  000EAC  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2133  000EAE  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2134  000EB0  B4D8               	btfsc	status,2,c
  2135  000EB2  EF5D  F007         	goto	u761
  2136  000EB6  EF5F  F007         	goto	u760
  2137  000EBA                     u761:
  2138  000EBA  EFA7  F007         	goto	l1524
  2139  000EBE                     u760:
  2140  000EBE  0E01               	movlw	1
  2141  000EC0  6E11               	movwf	___aomod@counter^0,c
  2142  000EC2  EF6D  F007         	goto	l1514
  2143  000EC6                     l1512:
  2144  000EC6  90D8               	bcf	status,0,c
  2145  000EC8  3609               	rlcf	___aomod@divisor^0,f,c
  2146  000ECA  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2147  000ECC  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2148  000ECE  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2149  000ED0  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2150  000ED2  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2151  000ED4  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2152  000ED6  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2153  000ED8  2A11               	incf	___aomod@counter^0,f,c
  2154  000EDA                     l1514:
  2155  000EDA  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2156  000EDC  EF72  F007         	goto	u771
  2157  000EE0  EF74  F007         	goto	u770
  2158  000EE4                     u771:
  2159  000EE4  EF63  F007         	goto	l1512
  2160  000EE8                     u770:
  2161  000EE8                     l1516:
  2162  000EE8  5009               	movf	___aomod@divisor^0,w,c
  2163  000EEA  5C01               	subwf	___aomod@dividend^0,w,c
  2164  000EEC  500A               	movf	(___aomod@divisor+1)^0,w,c
  2165  000EEE  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2166  000EF0  500B               	movf	(___aomod@divisor+2)^0,w,c
  2167  000EF2  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2168  000EF4  500C               	movf	(___aomod@divisor+3)^0,w,c
  2169  000EF6  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2170  000EF8  500D               	movf	(___aomod@divisor+4)^0,w,c
  2171  000EFA  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2172  000EFC  500E               	movf	(___aomod@divisor+5)^0,w,c
  2173  000EFE  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2174  000F00  500F               	movf	(___aomod@divisor+6)^0,w,c
  2175  000F02  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2176  000F04  5010               	movf	(___aomod@divisor+7)^0,w,c
  2177  000F06  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2178  000F08  A0D8               	btfss	status,0,c
  2179  000F0A  EF89  F007         	goto	u781
  2180  000F0E  EF8B  F007         	goto	u780
  2181  000F12                     u781:
  2182  000F12  EF9B  F007         	goto	l1520
  2183  000F16                     u780:
  2184  000F16  5009               	movf	___aomod@divisor^0,w,c
  2185  000F18  5E01               	subwf	___aomod@dividend^0,f,c
  2186  000F1A  500A               	movf	(___aomod@divisor+1)^0,w,c
  2187  000F1C  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2188  000F1E  500B               	movf	(___aomod@divisor+2)^0,w,c
  2189  000F20  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2190  000F22  500C               	movf	(___aomod@divisor+3)^0,w,c
  2191  000F24  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2192  000F26  500D               	movf	(___aomod@divisor+4)^0,w,c
  2193  000F28  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2194  000F2A  500E               	movf	(___aomod@divisor+5)^0,w,c
  2195  000F2C  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2196  000F2E  500F               	movf	(___aomod@divisor+6)^0,w,c
  2197  000F30  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2198  000F32  5010               	movf	(___aomod@divisor+7)^0,w,c
  2199  000F34  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2200  000F36                     l1520:
  2201  000F36  90D8               	bcf	status,0,c
  2202  000F38  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2203  000F3A  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2204  000F3C  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2205  000F3E  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2206  000F40  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2207  000F42  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2208  000F44  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2209  000F46  3209               	rrcf	___aomod@divisor^0,f,c
  2210  000F48  2E11               	decfsz	___aomod@counter^0,f,c
  2211  000F4A  EF74  F007         	goto	l1516
  2212  000F4E                     l1524:
  2213  000F4E  5012               	movf	___aomod@sign^0,w,c
  2214  000F50  B4D8               	btfsc	status,2,c
  2215  000F52  EFAD  F007         	goto	u791
  2216  000F56  EFAF  F007         	goto	u790
  2217  000F5A                     u791:
  2218  000F5A  EFBF  F007         	goto	l1528
  2219  000F5E                     u790:
  2220  000F5E  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2221  000F60  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2222  000F62  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2223  000F64  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2224  000F66  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2225  000F68  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2226  000F6A  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2227  000F6C  6C01               	negf	___aomod@dividend^0,c
  2228  000F6E  0E00               	movlw	0
  2229  000F70  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2230  000F72  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2231  000F74  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2232  000F76  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2233  000F78  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2234  000F7A  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2235  000F7C  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2236  000F7E                     l1528:
  2237  000F7E  C001  F001         	movff	___aomod@dividend,?___aomod
  2238  000F82  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2239  000F86  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2240  000F8A  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2241  000F8E  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2242  000F92  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2243  000F96  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2244  000F9A  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2245  000F9E  0012               	return		;funcret
  2246  000FA0                     __end_of___aomod:
  2247                           	callstack 0
  2248                           
  2249 ;; *************** function ___aodiv *****************
  2250 ;; Defined at:
  2251 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\aodiv.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;  dividend        8    0[COMRAM] long long 
  2254 ;;  divisor         8    8[COMRAM] long long 
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;  quotient        8   18[COMRAM] long long 
  2257 ;;  sign            1   17[COMRAM] unsigned char 
  2258 ;;  counter         1   16[COMRAM] unsigned char 
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  8    0[COMRAM] long long 
  2261 ;; Registers used:
  2262 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2268 ;;      Params:        16       0       0       0       0       0       0       0       0
  2269 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2270 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2271 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2272 ;;Total ram usage:       26 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; This function calls:
  2275 ;;		Nothing
  2276 ;; This function is called by:
  2277 ;;		_dtoa
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           	psect	text12
  2282  000CB4                     __ptext12:
  2283                           	callstack 0
  2284  000CB4                     ___aodiv:
  2285                           	callstack 26
  2286  000CB4  0E00               	movlw	0
  2287  000CB6  6E12               	movwf	___aodiv@sign^0,c
  2288  000CB8  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2289  000CBA  EF63  F006         	goto	u670
  2290  000CBE  EF61  F006         	goto	u671
  2291  000CC2                     u671:
  2292  000CC2  EF75  F006         	goto	l1460
  2293  000CC6                     u670:
  2294  000CC6  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2295  000CC8  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2296  000CCA  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2297  000CCC  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2298  000CCE  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2299  000CD0  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2300  000CD2  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2301  000CD4  6C09               	negf	___aodiv@divisor^0,c
  2302  000CD6  0E00               	movlw	0
  2303  000CD8  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2304  000CDA  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2305  000CDC  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2306  000CDE  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2307  000CE0  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2308  000CE2  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2309  000CE4  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2310  000CE6  0E01               	movlw	1
  2311  000CE8  6E12               	movwf	___aodiv@sign^0,c
  2312  000CEA                     l1460:
  2313  000CEA  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2314  000CEC  EF7C  F006         	goto	u680
  2315  000CF0  EF7A  F006         	goto	u681
  2316  000CF4                     u681:
  2317  000CF4  EF8E  F006         	goto	l1466
  2318  000CF8                     u680:
  2319  000CF8  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2320  000CFA  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2321  000CFC  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2322  000CFE  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2323  000D00  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2324  000D02  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2325  000D04  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2326  000D06  6C01               	negf	___aodiv@dividend^0,c
  2327  000D08  0E00               	movlw	0
  2328  000D0A  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2329  000D0C  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2330  000D0E  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2331  000D10  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2332  000D12  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2333  000D14  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2334  000D16  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2335  000D18  0E01               	movlw	1
  2336  000D1A  1A12               	xorwf	___aodiv@sign^0,f,c
  2337  000D1C                     l1466:
  2338  000D1C  EE20  F013         	lfsr	2,___aodiv@quotient
  2339  000D20  0E07               	movlw	7
  2340  000D22                     u691:
  2341  000D22  6ADE               	clrf	postinc2,c
  2342  000D24  06E8               	decf	wreg,f,c
  2343  000D26  E2FD               	bc	u691
  2344  000D28  5009               	movf	___aodiv@divisor^0,w,c
  2345  000D2A  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2346  000D2C  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2347  000D2E  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2348  000D30  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2349  000D32  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2350  000D34  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2351  000D36  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2352  000D38  B4D8               	btfsc	status,2,c
  2353  000D3A  EFA1  F006         	goto	u701
  2354  000D3E  EFA3  F006         	goto	u700
  2355  000D42                     u701:
  2356  000D42  EFF5  F006         	goto	l1488
  2357  000D46                     u700:
  2358  000D46  0E01               	movlw	1
  2359  000D48  6E11               	movwf	___aodiv@counter^0,c
  2360  000D4A  EFB1  F006         	goto	l1474
  2361  000D4E                     l1472:
  2362  000D4E  90D8               	bcf	status,0,c
  2363  000D50  3609               	rlcf	___aodiv@divisor^0,f,c
  2364  000D52  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2365  000D54  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2366  000D56  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2367  000D58  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2368  000D5A  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2369  000D5C  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2370  000D5E  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2371  000D60  2A11               	incf	___aodiv@counter^0,f,c
  2372  000D62                     l1474:
  2373  000D62  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2374  000D64  EFB6  F006         	goto	u711
  2375  000D68  EFB8  F006         	goto	u710
  2376  000D6C                     u711:
  2377  000D6C  EFA7  F006         	goto	l1472
  2378  000D70                     u710:
  2379  000D70                     l1476:
  2380  000D70  90D8               	bcf	status,0,c
  2381  000D72  3613               	rlcf	___aodiv@quotient^0,f,c
  2382  000D74  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2383  000D76  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2384  000D78  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2385  000D7A  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2386  000D7C  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2387  000D7E  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2388  000D80  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2389  000D82  5009               	movf	___aodiv@divisor^0,w,c
  2390  000D84  5C01               	subwf	___aodiv@dividend^0,w,c
  2391  000D86  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2392  000D88  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2393  000D8A  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2394  000D8C  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2395  000D8E  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2396  000D90  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2397  000D92  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2398  000D94  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2399  000D96  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2400  000D98  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2401  000D9A  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2402  000D9C  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2403  000D9E  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2404  000DA0  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2405  000DA2  A0D8               	btfss	status,0,c
  2406  000DA4  EFD6  F006         	goto	u721
  2407  000DA8  EFD8  F006         	goto	u720
  2408  000DAC                     u721:
  2409  000DAC  EFE9  F006         	goto	l1484
  2410  000DB0                     u720:
  2411  000DB0  5009               	movf	___aodiv@divisor^0,w,c
  2412  000DB2  5E01               	subwf	___aodiv@dividend^0,f,c
  2413  000DB4  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2414  000DB6  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2415  000DB8  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2416  000DBA  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2417  000DBC  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2418  000DBE  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2419  000DC0  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2420  000DC2  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2421  000DC4  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2422  000DC6  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2423  000DC8  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2424  000DCA  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2425  000DCC  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2426  000DCE  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2427  000DD0  8013               	bsf	___aodiv@quotient^0,0,c
  2428  000DD2                     l1484:
  2429  000DD2  90D8               	bcf	status,0,c
  2430  000DD4  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2431  000DD6  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2432  000DD8  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2433  000DDA  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2434  000DDC  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2435  000DDE  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2436  000DE0  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2437  000DE2  3209               	rrcf	___aodiv@divisor^0,f,c
  2438  000DE4  2E11               	decfsz	___aodiv@counter^0,f,c
  2439  000DE6  EFB8  F006         	goto	l1476
  2440  000DEA                     l1488:
  2441  000DEA  5012               	movf	___aodiv@sign^0,w,c
  2442  000DEC  B4D8               	btfsc	status,2,c
  2443  000DEE  EFFB  F006         	goto	u731
  2444  000DF2  EFFD  F006         	goto	u730
  2445  000DF6                     u731:
  2446  000DF6  EF0D  F007         	goto	l1492
  2447  000DFA                     u730:
  2448  000DFA  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2449  000DFC  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2450  000DFE  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2451  000E00  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2452  000E02  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2453  000E04  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2454  000E06  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2455  000E08  6C13               	negf	___aodiv@quotient^0,c
  2456  000E0A  0E00               	movlw	0
  2457  000E0C  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2458  000E0E  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2459  000E10  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2460  000E12  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2461  000E14  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2462  000E16  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2463  000E18  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2464  000E1A                     l1492:
  2465  000E1A  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2466  000E1E  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2467  000E22  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2468  000E26  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2469  000E2A  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2470  000E2E  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2471  000E32  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2472  000E36  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2473  000E3A  0012               	return		;funcret
  2474  000E3C                     __end_of___aodiv:
  2475                           	callstack 0
  2476                           
  2477 ;; *************** function _adcInit *****************
  2478 ;; Defined at:
  2479 ;;		line 11 in file "adc.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  ADC_PINs        1    wreg     unsigned char 
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  ADC_PINs        1    1[COMRAM] unsigned char 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2493 ;;      Params:         0       0       0       0       0       0       0       0       0
  2494 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2495 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2496 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2497 ;;Total ram usage:        2 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; This function calls:
  2500 ;;		Nothing
  2501 ;; This function is called by:
  2502 ;;		_main
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text13
  2507  001784                     __ptext13:
  2508                           	callstack 0
  2509  001784                     _adcInit:
  2510                           	callstack 30
  2511                           
  2512                           ;incstack = 0
  2513                           ;adcInit@ADC_PINs stored from wreg
  2514  001784  6E02               	movwf	adcInit@ADC_PINs^0,c
  2515  001786                     
  2516                           ;adc.c: 11: void adcInit(uint8_t ADC_PINs);adc.c: 12: {;adc.c: 14:     if(ADC_PINs == 0)
  2517  001786  5002               	movf	adcInit@ADC_PINs^0,w,c
  2518  001788  A4D8               	btfss	status,2,c
  2519  00178A  EFC9  F00B         	goto	u1141
  2520  00178E  EFCB  F00B         	goto	u1140
  2521  001792                     u1141:
  2522  001792  EFD1  F00B         	goto	l1720
  2523  001796                     u1140:
  2524  001796                     
  2525                           ;adc.c: 15:     {;adc.c: 16:         ADCON1bits.PCFG = 0b1110;
  2526  001796  50C1               	movf	193,w,c	;volatile
  2527  001798  0BF0               	andlw	-16
  2528  00179A  090E               	iorlw	14
  2529  00179C  6EC1               	movwf	193,c	;volatile
  2530                           
  2531                           ;adc.c: 17:     }
  2532  00179E  EFD9  F00B         	goto	l1722
  2533  0017A2                     l1720:
  2534                           
  2535                           ;adc.c: 19:     {;adc.c: 20:         ADCON1bits.PCFG = 15 - ADC_PINs;
  2536  0017A2  5002               	movf	adcInit@ADC_PINs^0,w,c
  2537  0017A4  080F               	sublw	15
  2538  0017A6  6E01               	movwf	??_adcInit^0,c
  2539  0017A8  50C1               	movf	193,w,c	;volatile
  2540  0017AA  1801               	xorwf	??_adcInit^0,w,c
  2541  0017AC  0BF0               	andlw	-16
  2542  0017AE  1801               	xorwf	??_adcInit^0,w,c
  2543  0017B0  6EC1               	movwf	193,c	;volatile
  2544  0017B2                     l1722:
  2545                           
  2546                           ;adc.c: 26:     ADCON1bits.VCFG = 0b00;
  2547  0017B2  0ECF               	movlw	-49
  2548  0017B4  16C1               	andwf	193,f,c	;volatile
  2549  0017B6                     
  2550                           ;adc.c: 31:     ADCON2bits.ACQT = 0b010;
  2551  0017B6  50C0               	movf	192,w,c	;volatile
  2552  0017B8  0BC7               	andlw	-57
  2553  0017BA  0910               	iorlw	16
  2554  0017BC  6EC0               	movwf	192,c	;volatile
  2555  0017BE                     
  2556                           ;adc.c: 36:     ADCON2bits.ADCS = 3;
  2557  0017BE  50C0               	movf	192,w,c	;volatile
  2558  0017C0  0BF8               	andlw	-8
  2559  0017C2  0903               	iorlw	3
  2560  0017C4  6EC0               	movwf	192,c	;volatile
  2561  0017C6                     
  2562                           ;adc.c: 39:     ADCON2bits.ADFM = 1;
  2563  0017C6  8EC0               	bsf	192,7,c	;volatile
  2564  0017C8                     
  2565                           ;adc.c: 40:     ADCON0bits.ADON = 1;
  2566  0017C8  80C2               	bsf	194,0,c	;volatile
  2567  0017CA  0012               	return		;funcret
  2568  0017CC                     __end_of_adcInit:
  2569                           	callstack 0
  2570                           
  2571 ;; *************** function _adcGetValue *****************
  2572 ;; Defined at:
  2573 ;;		line 43 in file "adc.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  PinADC          1    wreg     unsigned char 
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;  PinADC          1    3[COMRAM] unsigned char 
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  2    0[COMRAM] unsigned short 
  2580 ;; Registers used:
  2581 ;;		wreg, status,2, status,0
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2587 ;;      Params:         2       0       0       0       0       0       0       0       0
  2588 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2589 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2590 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2591 ;;Total ram usage:        4 bytes
  2592 ;; Hardware stack levels used:    1
  2593 ;; This function calls:
  2594 ;;		Nothing
  2595 ;; This function is called by:
  2596 ;;		_main
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           	psect	text14
  2601  001850                     __ptext14:
  2602                           	callstack 0
  2603  001850                     _adcGetValue:
  2604                           	callstack 30
  2605                           
  2606                           ;incstack = 0
  2607                           ;adcGetValue@PinADC stored from wreg
  2608  001850  6E04               	movwf	adcGetValue@PinADC^0,c
  2609  001852                     
  2610                           ;adc.c: 43: uint16_t adcGetValue(uint8_t PinADC);adc.c: 44: {;adc.c: 45:     ADCON0bits.
      +                          CHS = PinADC;
  2611  001852  C004  F003         	movff	adcGetValue@PinADC,??_adcGetValue
  2612  001856  4603               	rlncf	??_adcGetValue^0,f,c
  2613  001858  4603               	rlncf	??_adcGetValue^0,f,c
  2614  00185A  50C2               	movf	194,w,c	;volatile
  2615  00185C  1803               	xorwf	??_adcGetValue^0,w,c
  2616  00185E  0BC3               	andlw	-61
  2617  001860  1803               	xorwf	??_adcGetValue^0,w,c
  2618  001862  6EC2               	movwf	194,c	;volatile
  2619  001864                     
  2620                           ;adc.c: 46:     _delay((unsigned long)((2)*(12000000/4000.0)));
  2621  001864  0E08               	movlw	8
  2622  001866  6E03               	movwf	??_adcGetValue^0,c
  2623  001868  0ECA               	movlw	202
  2624  00186A                     u1247:
  2625  00186A  2EE8               	decfsz	wreg,f,c
  2626  00186C  D7FE               	bra	u1247
  2627  00186E  2E03               	decfsz	??_adcGetValue^0,f,c
  2628  001870  D7FC               	bra	u1247
  2629  001872                     
  2630                           ;adc.c: 47:     GO_nDONE = 1;
  2631  001872  82C2               	bsf	4034,1,c	;volatile
  2632  001874                     l20:
  2633                           
  2634                           ;adc.c: 48:     while(ADCON0bits.GO_DONE)
  2635  001874  B2C2               	btfsc	194,1,c	;volatile
  2636  001876  EF3F  F00C         	goto	u1151
  2637  00187A  EF41  F00C         	goto	u1150
  2638  00187E                     u1151:
  2639  00187E  EF3A  F00C         	goto	l20
  2640  001882                     u1150:
  2641  001882                     
  2642                           ;adc.c: 51:     return ADRES;
  2643  001882  CFC3 F001          	movff	4035,?_adcGetValue	;volatile
  2644  001886  CFC4 F002          	movff	4036,?_adcGetValue+1	;volatile
  2645  00188A  0012               	return		;funcret
  2646  00188C                     __end_of_adcGetValue:
  2647                           	callstack 0
  2648                           
  2649 ;; *************** function _Lcd_Out2 *****************
  2650 ;; Defined at:
  2651 ;;		line 123 in file "flex_lcd.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;  y               1    wreg     unsigned char 
  2654 ;;  x               1    3[COMRAM] unsigned char 
  2655 ;;  buffer          2    4[COMRAM] PTR char 
  2656 ;;		 -> buffer_lcd(16), 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  y               1    8[COMRAM] unsigned char 
  2659 ;;  data            1    9[COMRAM] unsigned char 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  1    wreg      void 
  2662 ;; Registers used:
  2663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2669 ;;      Params:         3       0       0       0       0       0       0       0       0
  2670 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2671 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2672 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2673 ;;Total ram usage:        7 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:    1
  2676 ;; This function calls:
  2677 ;;		_Lcd_Chr_CP
  2678 ;;		_Lcd_Cmd
  2679 ;; This function is called by:
  2680 ;;		_main
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text15
  2685  001632                     __ptext15:
  2686                           	callstack 0
  2687  001632                     _Lcd_Out2:
  2688                           	callstack 29
  2689                           
  2690                           ;incstack = 0
  2691                           ;Lcd_Out2@y stored from wreg
  2692  001632  6E09               	movwf	Lcd_Out2@y^0,c
  2693  001634                     
  2694                           ;flex_lcd.c: 123: void Lcd_Out2(uint8_t y, uint8_t x, int8_t *buffer);flex_lcd.c: 124: {
      +                          ;flex_lcd.c: 125:     uint8_t data;;flex_lcd.c: 126:     switch (y)
  2695  001634  EF30  F00B         	goto	l1846
  2696  001638                     l1836:
  2697                           
  2698                           ;flex_lcd.c: 129:             data = 128 + x;
  2699  001638  5004               	movf	Lcd_Out2@x^0,w,c
  2700  00163A  0F80               	addlw	128
  2701  00163C  6E0A               	movwf	Lcd_Out2@data^0,c
  2702                           
  2703                           ;flex_lcd.c: 130:             break;
  2704  00163E  EF4D  F00B         	goto	l1848
  2705  001642                     l1838:
  2706                           
  2707                           ;flex_lcd.c: 132:             data = 192 + x;
  2708  001642  5004               	movf	Lcd_Out2@x^0,w,c
  2709  001644  0FC0               	addlw	192
  2710  001646  6E0A               	movwf	Lcd_Out2@data^0,c
  2711                           
  2712                           ;flex_lcd.c: 133:             break;
  2713  001648  EF4D  F00B         	goto	l1848
  2714  00164C                     l1840:
  2715                           
  2716                           ;flex_lcd.c: 135:             data = 148 + x;
  2717  00164C  5004               	movf	Lcd_Out2@x^0,w,c
  2718  00164E  0F94               	addlw	148
  2719  001650  6E0A               	movwf	Lcd_Out2@data^0,c
  2720                           
  2721                           ;flex_lcd.c: 136:             break;
  2722  001652  EF4D  F00B         	goto	l1848
  2723  001656                     l1842:
  2724                           
  2725                           ;flex_lcd.c: 138:             data = 212 + x;
  2726  001656  5004               	movf	Lcd_Out2@x^0,w,c
  2727  001658  0FD4               	addlw	212
  2728  00165A  6E0A               	movwf	Lcd_Out2@data^0,c
  2729                           
  2730                           ;flex_lcd.c: 139:             break;
  2731  00165C  EF4D  F00B         	goto	l1848
  2732  001660                     l1846:
  2733  001660  5009               	movf	Lcd_Out2@y^0,w,c
  2734  001662  6E07               	movwf	??_Lcd_Out2^0,c
  2735  001664  6A08               	clrf	(??_Lcd_Out2+1)^0,c
  2736                           
  2737                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2738                           ; Switch size 1, requested type "simple"
  2739                           ; Number of cases is 1, Range of values is 0 to 0
  2740                           ; switch strategies available:
  2741                           ; Name         Instructions Cycles
  2742                           ; simple_byte            4     3 (average)
  2743                           ;	Chosen strategy is simple_byte
  2744  001666  5008               	movf	(??_Lcd_Out2+1)^0,w,c
  2745  001668  0A00               	xorlw	0	; case 0
  2746  00166A  B4D8               	btfsc	status,2,c
  2747  00166C  EF3A  F00B         	goto	l1932
  2748  001670  EF4D  F00B         	goto	l1848
  2749  001674                     l1932:
  2750                           
  2751                           ; Switch size 1, requested type "simple"
  2752                           ; Number of cases is 4, Range of values is 1 to 4
  2753                           ; switch strategies available:
  2754                           ; Name         Instructions Cycles
  2755                           ; simple_byte           13     7 (average)
  2756                           ;	Chosen strategy is simple_byte
  2757  001674  5007               	movf	??_Lcd_Out2^0,w,c
  2758  001676  0A01               	xorlw	1	; case 1
  2759  001678  B4D8               	btfsc	status,2,c
  2760  00167A  EF1C  F00B         	goto	l1836
  2761  00167E  0A03               	xorlw	3	; case 2
  2762  001680  B4D8               	btfsc	status,2,c
  2763  001682  EF21  F00B         	goto	l1838
  2764  001686  0A01               	xorlw	1	; case 3
  2765  001688  B4D8               	btfsc	status,2,c
  2766  00168A  EF26  F00B         	goto	l1840
  2767  00168E  0A07               	xorlw	7	; case 4
  2768  001690  B4D8               	btfsc	status,2,c
  2769  001692  EF2B  F00B         	goto	l1842
  2770  001696  EF4D  F00B         	goto	l1848
  2771  00169A                     l1848:
  2772                           
  2773                           ;flex_lcd.c: 143:     Lcd_Cmd(data);
  2774  00169A  500A               	movf	Lcd_Out2@data^0,w,c
  2775  00169C  EC77  F008         	call	_Lcd_Cmd
  2776                           
  2777                           ;flex_lcd.c: 144:     while(*buffer)
  2778  0016A0  EF5B  F00B         	goto	l1854
  2779  0016A4                     l1850:
  2780                           
  2781                           ;flex_lcd.c: 145:     {;flex_lcd.c: 146:         Lcd_Chr_CP(*buffer);
  2782  0016A4  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  2783  0016A8  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  2784  0016AC  50DF               	movf	indf2,w,c
  2785  0016AE  ECD0  F007         	call	_Lcd_Chr_CP
  2786  0016B2                     
  2787                           ;flex_lcd.c: 147:         buffer++;
  2788  0016B2  4A05               	infsnz	Lcd_Out2@buffer^0,f,c
  2789  0016B4  2A06               	incf	(Lcd_Out2@buffer+1)^0,f,c
  2790  0016B6                     l1854:
  2791                           
  2792                           ;flex_lcd.c: 144:     while(*buffer)
  2793  0016B6  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  2794  0016BA  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  2795  0016BE  50DF               	movf	indf2,w,c
  2796  0016C0  A4D8               	btfss	status,2,c
  2797  0016C2  EF65  F00B         	goto	u1181
  2798  0016C6  EF67  F00B         	goto	u1180
  2799  0016CA                     u1181:
  2800  0016CA  EF52  F00B         	goto	l1850
  2801  0016CE                     u1180:
  2802  0016CE  0012               	return		;funcret
  2803  0016D0                     __end_of_Lcd_Out2:
  2804                           	callstack 0
  2805                           
  2806 ;; *************** function _Lcd_Out *****************
  2807 ;; Defined at:
  2808 ;;		line 95 in file "flex_lcd.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;  y               1    wreg     unsigned char 
  2811 ;;  x               1    3[COMRAM] unsigned char 
  2812 ;;  buffer          2    4[COMRAM] PTR const char 
  2813 ;;		 -> STR_1(12), 
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;  y               1    8[COMRAM] unsigned char 
  2816 ;;  data            1    9[COMRAM] unsigned char 
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  1    wreg      void 
  2819 ;; Registers used:
  2820 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2826 ;;      Params:         3       0       0       0       0       0       0       0       0
  2827 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2828 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2829 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2830 ;;Total ram usage:        7 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    1
  2833 ;; This function calls:
  2834 ;;		_Lcd_Chr_CP
  2835 ;;		_Lcd_Cmd
  2836 ;; This function is called by:
  2837 ;;		_main
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           	psect	text16
  2842  00158E                     __ptext16:
  2843                           	callstack 0
  2844  00158E                     _Lcd_Out:
  2845                           	callstack 29
  2846                           
  2847                           ;incstack = 0
  2848                           ;Lcd_Out@y stored from wreg
  2849  00158E  6E09               	movwf	Lcd_Out@y^0,c
  2850  001590                     
  2851                           ;flex_lcd.c: 95: void Lcd_Out(uint8_t y, uint8_t x, const int8_t *buffer);flex_lcd.c: 96
      +                          : {;flex_lcd.c: 97:     uint8_t data;;flex_lcd.c: 98:     switch (y)
  2852  001590  EFDE  F00A         	goto	l1808
  2853  001594                     l1798:
  2854                           
  2855                           ;flex_lcd.c: 101:             data = 128 + x;
  2856  001594  5004               	movf	Lcd_Out@x^0,w,c
  2857  001596  0F80               	addlw	128
  2858  001598  6E0A               	movwf	Lcd_Out@data^0,c
  2859                           
  2860                           ;flex_lcd.c: 102:             break;
  2861  00159A  EFFB  F00A         	goto	l1810
  2862  00159E                     l1800:
  2863                           
  2864                           ;flex_lcd.c: 104:             data = 192 + x;
  2865  00159E  5004               	movf	Lcd_Out@x^0,w,c
  2866  0015A0  0FC0               	addlw	192
  2867  0015A2  6E0A               	movwf	Lcd_Out@data^0,c
  2868                           
  2869                           ;flex_lcd.c: 105:             break;
  2870  0015A4  EFFB  F00A         	goto	l1810
  2871  0015A8                     l1802:
  2872                           
  2873                           ;flex_lcd.c: 107:             data = 148 + x;
  2874  0015A8  5004               	movf	Lcd_Out@x^0,w,c
  2875  0015AA  0F94               	addlw	148
  2876  0015AC  6E0A               	movwf	Lcd_Out@data^0,c
  2877                           
  2878                           ;flex_lcd.c: 108:             break;
  2879  0015AE  EFFB  F00A         	goto	l1810
  2880  0015B2                     l1804:
  2881                           
  2882                           ;flex_lcd.c: 110:             data = 212 + x;
  2883  0015B2  5004               	movf	Lcd_Out@x^0,w,c
  2884  0015B4  0FD4               	addlw	212
  2885  0015B6  6E0A               	movwf	Lcd_Out@data^0,c
  2886                           
  2887                           ;flex_lcd.c: 111:             break;
  2888  0015B8  EFFB  F00A         	goto	l1810
  2889  0015BC                     l1808:
  2890  0015BC  5009               	movf	Lcd_Out@y^0,w,c
  2891  0015BE  6E07               	movwf	??_Lcd_Out^0,c
  2892  0015C0  6A08               	clrf	(??_Lcd_Out+1)^0,c
  2893                           
  2894                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2895                           ; Switch size 1, requested type "simple"
  2896                           ; Number of cases is 1, Range of values is 0 to 0
  2897                           ; switch strategies available:
  2898                           ; Name         Instructions Cycles
  2899                           ; simple_byte            4     3 (average)
  2900                           ;	Chosen strategy is simple_byte
  2901  0015C2  5008               	movf	(??_Lcd_Out+1)^0,w,c
  2902  0015C4  0A00               	xorlw	0	; case 0
  2903  0015C6  B4D8               	btfsc	status,2,c
  2904  0015C8  EFE8  F00A         	goto	l1934
  2905  0015CC  EFFB  F00A         	goto	l1810
  2906  0015D0                     l1934:
  2907                           
  2908                           ; Switch size 1, requested type "simple"
  2909                           ; Number of cases is 4, Range of values is 1 to 4
  2910                           ; switch strategies available:
  2911                           ; Name         Instructions Cycles
  2912                           ; simple_byte           13     7 (average)
  2913                           ;	Chosen strategy is simple_byte
  2914  0015D0  5007               	movf	??_Lcd_Out^0,w,c
  2915  0015D2  0A01               	xorlw	1	; case 1
  2916  0015D4  B4D8               	btfsc	status,2,c
  2917  0015D6  EFCA  F00A         	goto	l1798
  2918  0015DA  0A03               	xorlw	3	; case 2
  2919  0015DC  B4D8               	btfsc	status,2,c
  2920  0015DE  EFCF  F00A         	goto	l1800
  2921  0015E2  0A01               	xorlw	1	; case 3
  2922  0015E4  B4D8               	btfsc	status,2,c
  2923  0015E6  EFD4  F00A         	goto	l1802
  2924  0015EA  0A07               	xorlw	7	; case 4
  2925  0015EC  B4D8               	btfsc	status,2,c
  2926  0015EE  EFD9  F00A         	goto	l1804
  2927  0015F2  EFFB  F00A         	goto	l1810
  2928  0015F6                     l1810:
  2929                           
  2930                           ;flex_lcd.c: 115:     Lcd_Cmd(data);
  2931  0015F6  500A               	movf	Lcd_Out@data^0,w,c
  2932  0015F8  EC77  F008         	call	_Lcd_Cmd
  2933                           
  2934                           ;flex_lcd.c: 116:     while(*buffer)
  2935  0015FC  EF0A  F00B         	goto	l1816
  2936  001600                     l1812:
  2937                           
  2938                           ;flex_lcd.c: 117:     {;flex_lcd.c: 118:         Lcd_Chr_CP(*buffer);
  2939  001600  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  2940  001604  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  2941  001608                     	if	0	;tblptru may be non-zero
  2942  001608                     	endif
  2943  001608                     	if	0	;tblptru may be non-zero
  2944  001608                     	endif
  2945  001608  0008               	tblrd		*
  2946  00160A  50F5               	movf	tablat,w,c
  2947  00160C  ECD0  F007         	call	_Lcd_Chr_CP
  2948  001610                     
  2949                           ;flex_lcd.c: 119:         buffer++;
  2950  001610  4A05               	infsnz	Lcd_Out@buffer^0,f,c
  2951  001612  2A06               	incf	(Lcd_Out@buffer+1)^0,f,c
  2952  001614                     l1816:
  2953                           
  2954                           ;flex_lcd.c: 116:     while(*buffer)
  2955  001614  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  2956  001618  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  2957  00161C                     	if	0	;tblptru may be non-zero
  2958  00161C                     	endif
  2959  00161C                     	if	0	;tblptru may be non-zero
  2960  00161C                     	endif
  2961  00161C  0008               	tblrd		*
  2962  00161E  50F5               	movf	tablat,w,c
  2963  001620  0900               	iorlw	0
  2964  001622  A4D8               	btfss	status,2,c
  2965  001624  EF16  F00B         	goto	u1171
  2966  001628  EF18  F00B         	goto	u1170
  2967  00162C                     u1171:
  2968  00162C  EF00  F00B         	goto	l1812
  2969  001630                     u1170:
  2970  001630  0012               	return		;funcret
  2971  001632                     __end_of_Lcd_Out:
  2972                           	callstack 0
  2973                           
  2974 ;; *************** function _Lcd_Chr_CP *****************
  2975 ;; Defined at:
  2976 ;;		line 151 in file "flex_lcd.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;  data            1    wreg     char 
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;  data            1    2[COMRAM] char 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  1    wreg      void 
  2983 ;; Registers used:
  2984 ;;		wreg, status,2, status,0
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2990 ;;      Params:         0       0       0       0       0       0       0       0       0
  2991 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2992 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2993 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2994 ;;Total ram usage:        3 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; This function calls:
  2997 ;;		Nothing
  2998 ;; This function is called by:
  2999 ;;		_Lcd_Out
  3000 ;;		_Lcd_Out2
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           	psect	text17
  3005  000FA0                     __ptext17:
  3006                           	callstack 0
  3007  000FA0                     _Lcd_Chr_CP:
  3008                           	callstack 29
  3009                           
  3010                           ;incstack = 0
  3011                           ;Lcd_Chr_CP@data stored from wreg
  3012  000FA0  6E03               	movwf	Lcd_Chr_CP@data^0,c
  3013  000FA2                     
  3014                           ;flex_lcd.c: 151: void Lcd_Chr_CP(int8_t data);flex_lcd.c: 152: {;flex_lcd.c: 153:     L
      +                          ATDbits.LD3 = 0;
  3015  000FA2  968C               	bcf	140,3,c	;volatile
  3016                           
  3017                           ;flex_lcd.c: 154:     LATDbits.LD2 = 1;
  3018  000FA4  848C               	bsf	140,2,c	;volatile
  3019  000FA6                     
  3020                           ;flex_lcd.c: 155:     LATDbits.LD7 = (data & 0b10000000)>>7;
  3021  000FA6  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3022  000FAA  0E07               	movlw	7
  3023  000FAC  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3024  000FAE                     u1075:
  3025  000FAE  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3026  000FB0  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3027  000FB2  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3028  000FB4  EFD7  F007         	goto	u1075
  3029  000FB8  0E01               	movlw	1
  3030  000FBA  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3031  000FBC  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3032  000FBE  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3033  000FC0  508C               	movf	140,w,c	;volatile
  3034  000FC2  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3035  000FC4  0B7F               	andlw	-129
  3036  000FC6  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3037  000FC8  6E8C               	movwf	140,c	;volatile
  3038                           
  3039                           ;flex_lcd.c: 156:     LATDbits.LD6 = (data & 0b01000000)>>6;
  3040  000FCA  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3041  000FCE  0E06               	movlw	6
  3042  000FD0  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3043  000FD2                     u1085:
  3044  000FD2  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3045  000FD4  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3046  000FD6  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3047  000FD8  EFE9  F007         	goto	u1085
  3048  000FDC  0E01               	movlw	1
  3049  000FDE  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3050  000FE0  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3051  000FE2  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3052  000FE4  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3053  000FE6  508C               	movf	140,w,c	;volatile
  3054  000FE8  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3055  000FEA  0BBF               	andlw	-65
  3056  000FEC  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3057  000FEE  6E8C               	movwf	140,c	;volatile
  3058                           
  3059                           ;flex_lcd.c: 157:     LATDbits.LD5 = (data & 0b00100000)>>5;
  3060  000FF0  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3061  000FF4  0E05               	movlw	5
  3062  000FF6  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3063  000FF8                     u1095:
  3064  000FF8  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3065  000FFA  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3066  000FFC  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3067  000FFE  EFFC  F007         	goto	u1095
  3068  001002  0E01               	movlw	1
  3069  001004  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3070  001006  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3071  001008  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3072  00100A  508C               	movf	140,w,c	;volatile
  3073  00100C  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3074  00100E  0BDF               	andlw	-33
  3075  001010  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3076  001012  6E8C               	movwf	140,c	;volatile
  3077                           
  3078                           ;flex_lcd.c: 158:     LATDbits.LD4 = (data & 0b00010000)>>4;
  3079  001014  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3080  001018  0E04               	movlw	4
  3081  00101A  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3082  00101C                     u1105:
  3083  00101C  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3084  00101E  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3085  001020  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3086  001022  EF0E  F008         	goto	u1105
  3087  001026  0E01               	movlw	1
  3088  001028  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3089  00102A  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3090  00102C  508C               	movf	140,w,c	;volatile
  3091  00102E  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3092  001030  0BEF               	andlw	-17
  3093  001032  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3094  001034  6E8C               	movwf	140,c	;volatile
  3095  001036                     
  3096                           ;flex_lcd.c: 159:     _delay(10);
  3097  001036  0E03               	movlw	3
  3098  001038                     u1257:
  3099  001038  2EE8               	decfsz	wreg,f,c
  3100  00103A  D7FE               	bra	u1257
  3101  00103C  F000               	nop	
  3102  00103E                     
  3103                           ;flex_lcd.c: 160:     LATDbits.LD3 = 1;
  3104  00103E  868C               	bsf	140,3,c	;volatile
  3105  001040                     
  3106                           ;flex_lcd.c: 161:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3107  001040  0E05               	movlw	5
  3108  001042                     u1267:
  3109  001042  2EE8               	decfsz	wreg,f,c
  3110  001044  D7FE               	bra	u1267
  3111  001046                     
  3112                           ;flex_lcd.c: 162:     LATDbits.LD3 = 0;
  3113  001046  968C               	bcf	140,3,c	;volatile
  3114                           
  3115                           ;flex_lcd.c: 163:     LATDbits.LD7 = (data & 0b00001000)>>3;
  3116  001048  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3117  00104C  0E03               	movlw	3
  3118  00104E  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3119  001050                     u1115:
  3120  001050  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3121  001052  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3122  001054  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3123  001056  EF28  F008         	goto	u1115
  3124  00105A  0E01               	movlw	1
  3125  00105C  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3126  00105E  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3127  001060  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3128  001062  508C               	movf	140,w,c	;volatile
  3129  001064  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3130  001066  0B7F               	andlw	-129
  3131  001068  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3132  00106A  6E8C               	movwf	140,c	;volatile
  3133                           
  3134                           ;flex_lcd.c: 164:     LATDbits.LD6 = (data & 0b00000100)>>2;
  3135  00106C  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3136  001070  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3137  001072  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3138  001074  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3139  001076  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3140  001078  0E01               	movlw	1
  3141  00107A  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3142  00107C  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3143  00107E  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3144  001080  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3145  001082  508C               	movf	140,w,c	;volatile
  3146  001084  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3147  001086  0BBF               	andlw	-65
  3148  001088  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3149  00108A  6E8C               	movwf	140,c	;volatile
  3150                           
  3151                           ;flex_lcd.c: 165:     LATDbits.LD5 = (data & 0b00000010)>>1;
  3152  00108C  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3153  001090  0E01               	movlw	1
  3154  001092  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3155  001094                     u1125:
  3156  001094  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3157  001096  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3158  001098  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3159  00109A  EF4A  F008         	goto	u1125
  3160  00109E  0E01               	movlw	1
  3161  0010A0  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3162  0010A2  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3163  0010A4  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3164  0010A6  508C               	movf	140,w,c	;volatile
  3165  0010A8  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3166  0010AA  0BDF               	andlw	-33
  3167  0010AC  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3168  0010AE  6E8C               	movwf	140,c	;volatile
  3169                           
  3170                           ;flex_lcd.c: 166:     LATDbits.LD4 = (data & 0b00000001);
  3171  0010B0  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3172  0010B4  0E01               	movlw	1
  3173  0010B6  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3174  0010B8  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3175  0010BA  508C               	movf	140,w,c	;volatile
  3176  0010BC  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3177  0010BE  0BEF               	andlw	-17
  3178  0010C0  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3179  0010C2  6E8C               	movwf	140,c	;volatile
  3180  0010C4                     
  3181                           ;flex_lcd.c: 167:     _delay(10);
  3182  0010C4  0E03               	movlw	3
  3183  0010C6                     u1277:
  3184  0010C6  2EE8               	decfsz	wreg,f,c
  3185  0010C8  D7FE               	bra	u1277
  3186  0010CA  F000               	nop	
  3187  0010CC                     
  3188                           ;flex_lcd.c: 168:     LATDbits.LD3 = 1;
  3189  0010CC  868C               	bsf	140,3,c	;volatile
  3190  0010CE                     
  3191                           ;flex_lcd.c: 169:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3192  0010CE  0E05               	movlw	5
  3193  0010D0                     u1287:
  3194  0010D0  2EE8               	decfsz	wreg,f,c
  3195  0010D2  D7FE               	bra	u1287
  3196  0010D4                     
  3197                           ;flex_lcd.c: 170:     LATDbits.LD3 = 0;
  3198  0010D4  968C               	bcf	140,3,c	;volatile
  3199  0010D6                     
  3200                           ;flex_lcd.c: 171:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3201  0010D6  0E05               	movlw	5
  3202  0010D8                     u1297:
  3203  0010D8  2EE8               	decfsz	wreg,f,c
  3204  0010DA  D7FE               	bra	u1297
  3205  0010DC                     
  3206                           ;flex_lcd.c: 172:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  3207  0010DC  0E16               	movlw	22
  3208  0010DE  6E01               	movwf	??_Lcd_Chr_CP^0,c
  3209  0010E0  0E6C               	movlw	108
  3210  0010E2                     u1307:
  3211  0010E2  2EE8               	decfsz	wreg,f,c
  3212  0010E4  D7FE               	bra	u1307
  3213  0010E6  2E01               	decfsz	??_Lcd_Chr_CP^0,f,c
  3214  0010E8  D7FC               	bra	u1307
  3215  0010EA  D000               	nop2	
  3216  0010EC  0012               	return		;funcret
  3217  0010EE                     __end_of_Lcd_Chr_CP:
  3218                           	callstack 0
  3219                           
  3220 ;; *************** function _Lcd_Init *****************
  3221 ;; Defined at:
  3222 ;;		line 31 in file "flex_lcd.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;		None
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;  i               1    4[COMRAM] unsigned char 
  3227 ;;  data            1    0        unsigned char 
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  1    wreg      void 
  3230 ;; Registers used:
  3231 ;;		wreg, status,2, status,0, cstack
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3237 ;;      Params:         0       0       0       0       0       0       0       0       0
  3238 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3239 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3240 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3241 ;;Total ram usage:        3 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; Hardware stack levels required when called:    1
  3244 ;; This function calls:
  3245 ;;		_Lcd_Cmd
  3246 ;; This function is called by:
  3247 ;;		_main
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           	psect	text18
  3252  0014CE                     __ptext18:
  3253                           	callstack 0
  3254  0014CE                     _Lcd_Init:
  3255                           	callstack 29
  3256  0014CE                     
  3257                           ;flex_lcd.c: 33:     TRISDbits.TRISD7 = 0;
  3258  0014CE  9E95               	bcf	149,7,c	;volatile
  3259                           
  3260                           ;flex_lcd.c: 34:     TRISDbits.TRISD6 = 0;
  3261  0014D0  9C95               	bcf	149,6,c	;volatile
  3262                           
  3263                           ;flex_lcd.c: 35:     TRISDbits.TRISD5 = 0;
  3264  0014D2  9A95               	bcf	149,5,c	;volatile
  3265                           
  3266                           ;flex_lcd.c: 36:     TRISDbits.TRISD4 = 0;
  3267  0014D4  9895               	bcf	149,4,c	;volatile
  3268                           
  3269                           ;flex_lcd.c: 37:     TRISDbits.TRISD3 = 0;
  3270  0014D6  9695               	bcf	149,3,c	;volatile
  3271                           
  3272                           ;flex_lcd.c: 38:     TRISDbits.TRISD2 = 0;
  3273  0014D8  9495               	bcf	149,2,c	;volatile
  3274  0014DA                     
  3275                           ;flex_lcd.c: 39:     _delay((unsigned long)((34)*(12000000/4000.0)));
  3276  0014DA  0E85               	movlw	133
  3277  0014DC  6E04               	movwf	??_Lcd_Init^0,c
  3278  0014DE  0E76               	movlw	118
  3279  0014E0                     u1317:
  3280  0014E0  2EE8               	decfsz	wreg,f,c
  3281  0014E2  D7FE               	bra	u1317
  3282  0014E4  2E04               	decfsz	??_Lcd_Init^0,f,c
  3283  0014E6  D7FC               	bra	u1317
  3284  0014E8  D000               	nop2	
  3285  0014EA                     
  3286                           ;flex_lcd.c: 40:     for (uint8_t i = 0; i < 4; i++) {
  3287  0014EA  0E00               	movlw	0
  3288  0014EC  6E05               	movwf	Lcd_Init@i^0,c
  3289  0014EE                     l91:
  3290                           
  3291                           ;flex_lcd.c: 41:         LATDbits.LD7 = 0;
  3292  0014EE  9E8C               	bcf	140,7,c	;volatile
  3293                           
  3294                           ;flex_lcd.c: 42:         LATDbits.LD6 = 0;
  3295  0014F0  9C8C               	bcf	140,6,c	;volatile
  3296                           
  3297                           ;flex_lcd.c: 43:         LATDbits.LD5 = 1;
  3298  0014F2  8A8C               	bsf	140,5,c	;volatile
  3299                           
  3300                           ;flex_lcd.c: 44:         LATDbits.LD4 = 1;
  3301  0014F4  888C               	bsf	140,4,c	;volatile
  3302                           
  3303                           ;flex_lcd.c: 45:         LATDbits.LD3 = 0;
  3304  0014F6  968C               	bcf	140,3,c	;volatile
  3305                           
  3306                           ;flex_lcd.c: 46:         LATDbits.LD2 = 0;
  3307  0014F8  948C               	bcf	140,2,c	;volatile
  3308                           
  3309                           ;flex_lcd.c: 47:         LATDbits.LD7 = 0;
  3310  0014FA  9E8C               	bcf	140,7,c	;volatile
  3311                           
  3312                           ;flex_lcd.c: 48:         LATDbits.LD6 = 0;
  3313  0014FC  9C8C               	bcf	140,6,c	;volatile
  3314                           
  3315                           ;flex_lcd.c: 49:         LATDbits.LD5 = 1;
  3316  0014FE  8A8C               	bsf	140,5,c	;volatile
  3317                           
  3318                           ;flex_lcd.c: 50:         LATDbits.LD4 = 1;
  3319  001500  888C               	bsf	140,4,c	;volatile
  3320                           
  3321                           ;flex_lcd.c: 51:         LATDbits.LD3 = 1;
  3322  001502  868C               	bsf	140,3,c	;volatile
  3323                           
  3324                           ;flex_lcd.c: 52:         LATDbits.LD2 = 0;
  3325  001504  948C               	bcf	140,2,c	;volatile
  3326  001506                     
  3327                           ;flex_lcd.c: 53:         _delay((unsigned long)((5)*(12000000/4000000.0)));
  3328  001506  0E05               	movlw	5
  3329  001508                     u1327:
  3330  001508  2EE8               	decfsz	wreg,f,c
  3331  00150A  D7FE               	bra	u1327
  3332  00150C                     
  3333                           ;flex_lcd.c: 54:         LATDbits.LD7 = 0;
  3334  00150C  9E8C               	bcf	140,7,c	;volatile
  3335  00150E                     
  3336                           ;flex_lcd.c: 55:         LATDbits.LD6 = 0;
  3337  00150E  9C8C               	bcf	140,6,c	;volatile
  3338  001510                     
  3339                           ;flex_lcd.c: 56:         LATDbits.LD5 = 1;
  3340  001510  8A8C               	bsf	140,5,c	;volatile
  3341  001512                     
  3342                           ;flex_lcd.c: 57:         LATDbits.LD4 = 1;
  3343  001512  888C               	bsf	140,4,c	;volatile
  3344  001514                     
  3345                           ;flex_lcd.c: 58:         LATDbits.LD3 = 0;
  3346  001514  968C               	bcf	140,3,c	;volatile
  3347  001516                     
  3348                           ;flex_lcd.c: 59:         LATDbits.LD2 = 0;
  3349  001516  948C               	bcf	140,2,c	;volatile
  3350                           
  3351                           ;flex_lcd.c: 60:         _delay((unsigned long)((5500)*(12000000/4000000.0)));
  3352  001518  0E16               	movlw	22
  3353  00151A  6E04               	movwf	??_Lcd_Init^0,c
  3354  00151C  0E6C               	movlw	108
  3355  00151E                     u1337:
  3356  00151E  2EE8               	decfsz	wreg,f,c
  3357  001520  D7FE               	bra	u1337
  3358  001522  2E04               	decfsz	??_Lcd_Init^0,f,c
  3359  001524  D7FC               	bra	u1337
  3360  001526  D000               	nop2	
  3361  001528                     
  3362                           ;flex_lcd.c: 61:     }
  3363  001528  2A05               	incf	Lcd_Init@i^0,f,c
  3364  00152A  0E03               	movlw	3
  3365  00152C  6405               	cpfsgt	Lcd_Init@i^0,c
  3366  00152E  EF9B  F00A         	goto	u1161
  3367  001532  EF9D  F00A         	goto	u1160
  3368  001536                     u1161:
  3369  001536  EF77  F00A         	goto	l91
  3370  00153A                     u1160:
  3371  00153A                     
  3372                           ;flex_lcd.c: 62:     LATDbits.LD7 = 0;
  3373  00153A  9E8C               	bcf	140,7,c	;volatile
  3374                           
  3375                           ;flex_lcd.c: 63:     LATDbits.LD6 = 0;
  3376  00153C  9C8C               	bcf	140,6,c	;volatile
  3377                           
  3378                           ;flex_lcd.c: 64:     LATDbits.LD5 = 1;
  3379  00153E  8A8C               	bsf	140,5,c	;volatile
  3380                           
  3381                           ;flex_lcd.c: 65:     LATDbits.LD4 = 0;
  3382  001540  988C               	bcf	140,4,c	;volatile
  3383                           
  3384                           ;flex_lcd.c: 66:     LATDbits.LD3 = 0;
  3385  001542  968C               	bcf	140,3,c	;volatile
  3386                           
  3387                           ;flex_lcd.c: 67:     LATDbits.LD2 = 0;
  3388  001544  948C               	bcf	140,2,c	;volatile
  3389                           
  3390                           ;flex_lcd.c: 68:     LATDbits.LD7 = 0;
  3391  001546  9E8C               	bcf	140,7,c	;volatile
  3392                           
  3393                           ;flex_lcd.c: 69:     LATDbits.LD6 = 0;
  3394  001548  9C8C               	bcf	140,6,c	;volatile
  3395                           
  3396                           ;flex_lcd.c: 70:     LATDbits.LD5 = 1;
  3397  00154A  8A8C               	bsf	140,5,c	;volatile
  3398                           
  3399                           ;flex_lcd.c: 71:     LATDbits.LD4 = 0;
  3400  00154C  988C               	bcf	140,4,c	;volatile
  3401                           
  3402                           ;flex_lcd.c: 72:     LATDbits.LD3 = 1;
  3403  00154E  868C               	bsf	140,3,c	;volatile
  3404                           
  3405                           ;flex_lcd.c: 73:     LATDbits.LD2 = 0;
  3406  001550  948C               	bcf	140,2,c	;volatile
  3407  001552                     
  3408                           ;flex_lcd.c: 74:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3409  001552  0E05               	movlw	5
  3410  001554                     u1347:
  3411  001554  2EE8               	decfsz	wreg,f,c
  3412  001556  D7FE               	bra	u1347
  3413  001558                     
  3414                           ;flex_lcd.c: 75:     LATDbits.LD7 = 0;
  3415  001558  9E8C               	bcf	140,7,c	;volatile
  3416  00155A                     
  3417                           ;flex_lcd.c: 76:     LATDbits.LD6 = 0;
  3418  00155A  9C8C               	bcf	140,6,c	;volatile
  3419  00155C                     
  3420                           ;flex_lcd.c: 77:     LATDbits.LD5 = 1;
  3421  00155C  8A8C               	bsf	140,5,c	;volatile
  3422  00155E                     
  3423                           ;flex_lcd.c: 78:     LATDbits.LD4 = 0;
  3424  00155E  988C               	bcf	140,4,c	;volatile
  3425  001560                     
  3426                           ;flex_lcd.c: 79:     LATDbits.LD3 = 0;
  3427  001560  968C               	bcf	140,3,c	;volatile
  3428  001562                     
  3429                           ;flex_lcd.c: 80:     LATDbits.LD2 = 0;
  3430  001562  948C               	bcf	140,2,c	;volatile
  3431                           
  3432                           ;flex_lcd.c: 81:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  3433  001564  0E16               	movlw	22
  3434  001566  6E04               	movwf	??_Lcd_Init^0,c
  3435  001568  0E6C               	movlw	108
  3436  00156A                     u1357:
  3437  00156A  2EE8               	decfsz	wreg,f,c
  3438  00156C  D7FE               	bra	u1357
  3439  00156E  2E04               	decfsz	??_Lcd_Init^0,f,c
  3440  001570  D7FC               	bra	u1357
  3441  001572  D000               	nop2	
  3442  001574                     
  3443                           ;flex_lcd.c: 85:     Lcd_Cmd(data);
  3444  001574  0E28               	movlw	40
  3445  001576  EC77  F008         	call	_Lcd_Cmd
  3446  00157A                     
  3447                           ;flex_lcd.c: 87:     Lcd_Cmd(data);
  3448  00157A  0E10               	movlw	16
  3449  00157C  EC77  F008         	call	_Lcd_Cmd
  3450  001580                     
  3451                           ;flex_lcd.c: 89:     Lcd_Cmd(data);
  3452  001580  0E01               	movlw	1
  3453  001582  EC77  F008         	call	_Lcd_Cmd
  3454  001586                     
  3455                           ;flex_lcd.c: 91:     Lcd_Cmd(data);
  3456  001586  0E0F               	movlw	15
  3457  001588  EC77  F008         	call	_Lcd_Cmd
  3458  00158C  0012               	return		;funcret
  3459  00158E                     __end_of_Lcd_Init:
  3460                           	callstack 0
  3461                           
  3462 ;; *************** function _Lcd_Cmd *****************
  3463 ;; Defined at:
  3464 ;;		line 175 in file "flex_lcd.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;  data            1    wreg     unsigned char 
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  data            1    2[COMRAM] unsigned char 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  1    wreg      void 
  3471 ;; Registers used:
  3472 ;;		wreg, status,2, status,0
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3478 ;;      Params:         0       0       0       0       0       0       0       0       0
  3479 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3480 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3481 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3482 ;;Total ram usage:        3 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; This function calls:
  3485 ;;		Nothing
  3486 ;; This function is called by:
  3487 ;;		_main
  3488 ;;		_Lcd_Init
  3489 ;;		_Lcd_Out
  3490 ;;		_Lcd_Out2
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           	psect	text19
  3495  0010EE                     __ptext19:
  3496                           	callstack 0
  3497  0010EE                     _Lcd_Cmd:
  3498                           	callstack 29
  3499                           
  3500                           ;incstack = 0
  3501                           ;Lcd_Cmd@data stored from wreg
  3502  0010EE  6E03               	movwf	Lcd_Cmd@data^0,c
  3503  0010F0                     
  3504                           ;flex_lcd.c: 175: void Lcd_Cmd(uint8_t data);flex_lcd.c: 176: {;flex_lcd.c: 177:     LAT
      +                          Dbits.LD3 = 0; LATDbits.LD2 = 0;
  3505  0010F0  968C               	bcf	140,3,c	;volatile
  3506  0010F2  948C               	bcf	140,2,c	;volatile
  3507  0010F4                     
  3508                           ;flex_lcd.c: 178:     LATDbits.LD7 = (data & 0b10000000)>>7;
  3509  0010F4  6A01               	clrf	??_Lcd_Cmd^0,c
  3510  0010F6  AE03               	btfss	Lcd_Cmd@data^0,7,c
  3511  0010F8  D001               	bra	u1045
  3512  0010FA  2A01               	incf	??_Lcd_Cmd^0,f,c
  3513  0010FC                     u1045:
  3514  0010FC  0E01               	movlw	1
  3515  0010FE  1601               	andwf	??_Lcd_Cmd^0,f,c
  3516  001100  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3517  001102  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3518  001104  508C               	movf	140,w,c	;volatile
  3519  001106  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3520  001108  0B7F               	andlw	-129
  3521  00110A  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3522  00110C  6E8C               	movwf	140,c	;volatile
  3523                           
  3524                           ;flex_lcd.c: 179:     LATDbits.LD6 = (data & 0b01000000)>>6;
  3525  00110E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3526  001112  0E06               	movlw	6
  3527  001114  6E02               	movwf	(??_Lcd_Cmd+1)^0,c
  3528  001116                     u1055:
  3529  001116  90D8               	bcf	status,0,c
  3530  001118  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3531  00111A  2E02               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  3532  00111C  EF8B  F008         	goto	u1055
  3533  001120  0E01               	movlw	1
  3534  001122  1601               	andwf	??_Lcd_Cmd^0,f,c
  3535  001124  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3536  001126  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3537  001128  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3538  00112A  508C               	movf	140,w,c	;volatile
  3539  00112C  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3540  00112E  0BBF               	andlw	-65
  3541  001130  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3542  001132  6E8C               	movwf	140,c	;volatile
  3543                           
  3544                           ;flex_lcd.c: 180:     LATDbits.LD5 = (data & 0b00100000)>>5;
  3545  001134  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3546  001138  0E05               	movlw	5
  3547  00113A  6E02               	movwf	(??_Lcd_Cmd+1)^0,c
  3548  00113C                     u1065:
  3549  00113C  90D8               	bcf	status,0,c
  3550  00113E  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3551  001140  2E02               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  3552  001142  EF9E  F008         	goto	u1065
  3553  001146  0E01               	movlw	1
  3554  001148  1601               	andwf	??_Lcd_Cmd^0,f,c
  3555  00114A  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3556  00114C  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3557  00114E  508C               	movf	140,w,c	;volatile
  3558  001150  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3559  001152  0BDF               	andlw	-33
  3560  001154  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3561  001156  6E8C               	movwf	140,c	;volatile
  3562                           
  3563                           ;flex_lcd.c: 181:     LATDbits.LD4 = (data & 0b00010000)>>4;
  3564  001158  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3565  00115C  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3566  00115E  0E0F               	movlw	15
  3567  001160  1601               	andwf	??_Lcd_Cmd^0,f,c
  3568  001162  0E01               	movlw	1
  3569  001164  1601               	andwf	??_Lcd_Cmd^0,f,c
  3570  001166  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3571  001168  508C               	movf	140,w,c	;volatile
  3572  00116A  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3573  00116C  0BEF               	andlw	-17
  3574  00116E  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3575  001170  6E8C               	movwf	140,c	;volatile
  3576  001172                     
  3577                           ;flex_lcd.c: 182:     _delay(10);
  3578  001172  0E03               	movlw	3
  3579  001174                     u1367:
  3580  001174  2EE8               	decfsz	wreg,f,c
  3581  001176  D7FE               	bra	u1367
  3582  001178  F000               	nop	
  3583  00117A                     
  3584                           ;flex_lcd.c: 183:     LATDbits.LD3 = 1;
  3585  00117A  868C               	bsf	140,3,c	;volatile
  3586  00117C                     
  3587                           ;flex_lcd.c: 184:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3588  00117C  0E05               	movlw	5
  3589  00117E                     u1377:
  3590  00117E  2EE8               	decfsz	wreg,f,c
  3591  001180  D7FE               	bra	u1377
  3592  001182                     
  3593                           ;flex_lcd.c: 185:     LATDbits.LD3 = 0;
  3594  001182  968C               	bcf	140,3,c	;volatile
  3595                           
  3596                           ;flex_lcd.c: 186:     LATDbits.LD7 = (data & 0b00001000)>>3;
  3597  001184  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3598  001188  90D8               	bcf	status,0,c
  3599  00118A  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3600  00118C  90D8               	bcf	status,0,c
  3601  00118E  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3602  001190  90D8               	bcf	status,0,c
  3603  001192  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3604  001194  0E01               	movlw	1
  3605  001196  1601               	andwf	??_Lcd_Cmd^0,f,c
  3606  001198  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3607  00119A  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3608  00119C  508C               	movf	140,w,c	;volatile
  3609  00119E  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3610  0011A0  0B7F               	andlw	-129
  3611  0011A2  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3612  0011A4  6E8C               	movwf	140,c	;volatile
  3613                           
  3614                           ;flex_lcd.c: 187:     LATDbits.LD6 = (data & 0b00000100)>>2;
  3615  0011A6  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3616  0011AA  90D8               	bcf	status,0,c
  3617  0011AC  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3618  0011AE  90D8               	bcf	status,0,c
  3619  0011B0  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3620  0011B2  0E01               	movlw	1
  3621  0011B4  1601               	andwf	??_Lcd_Cmd^0,f,c
  3622  0011B6  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3623  0011B8  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3624  0011BA  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3625  0011BC  508C               	movf	140,w,c	;volatile
  3626  0011BE  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3627  0011C0  0BBF               	andlw	-65
  3628  0011C2  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3629  0011C4  6E8C               	movwf	140,c	;volatile
  3630                           
  3631                           ;flex_lcd.c: 188:     LATDbits.LD5 = (data & 0b00000010)>>1;
  3632  0011C6  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3633  0011CA  90D8               	bcf	status,0,c
  3634  0011CC  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3635  0011CE  0E01               	movlw	1
  3636  0011D0  1601               	andwf	??_Lcd_Cmd^0,f,c
  3637  0011D2  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3638  0011D4  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3639  0011D6  508C               	movf	140,w,c	;volatile
  3640  0011D8  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3641  0011DA  0BDF               	andlw	-33
  3642  0011DC  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3643  0011DE  6E8C               	movwf	140,c	;volatile
  3644                           
  3645                           ;flex_lcd.c: 189:     LATDbits.LD4 = (data & 0b00000001);
  3646  0011E0  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3647  0011E4  0E01               	movlw	1
  3648  0011E6  1601               	andwf	??_Lcd_Cmd^0,f,c
  3649  0011E8  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3650  0011EA  508C               	movf	140,w,c	;volatile
  3651  0011EC  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3652  0011EE  0BEF               	andlw	-17
  3653  0011F0  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3654  0011F2  6E8C               	movwf	140,c	;volatile
  3655  0011F4                     
  3656                           ;flex_lcd.c: 190:     _delay(10);
  3657  0011F4  0E03               	movlw	3
  3658  0011F6                     u1387:
  3659  0011F6  2EE8               	decfsz	wreg,f,c
  3660  0011F8  D7FE               	bra	u1387
  3661  0011FA  F000               	nop	
  3662  0011FC                     
  3663                           ;flex_lcd.c: 191:     LATDbits.LD3 = 1;
  3664  0011FC  868C               	bsf	140,3,c	;volatile
  3665  0011FE                     
  3666                           ;flex_lcd.c: 192:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3667  0011FE  0E05               	movlw	5
  3668  001200                     u1397:
  3669  001200  2EE8               	decfsz	wreg,f,c
  3670  001202  D7FE               	bra	u1397
  3671  001204                     
  3672                           ;flex_lcd.c: 193:     LATDbits.LD3 = 0;
  3673  001204  968C               	bcf	140,3,c	;volatile
  3674  001206                     
  3675                           ;flex_lcd.c: 194:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  3676  001206  0E16               	movlw	22
  3677  001208  6E01               	movwf	??_Lcd_Cmd^0,c
  3678  00120A  0E6C               	movlw	108
  3679  00120C                     u1407:
  3680  00120C  2EE8               	decfsz	wreg,f,c
  3681  00120E  D7FE               	bra	u1407
  3682  001210  2E01               	decfsz	??_Lcd_Cmd^0,f,c
  3683  001212  D7FC               	bra	u1407
  3684  001214  D000               	nop2	
  3685  001216  0012               	return		;funcret
  3686  001218                     __end_of_Lcd_Cmd:
  3687                           	callstack 0
  3688                           
  3689                           	psect	rparam
  3690  0000                     
  3691                           	psect	idloc
  3692                           
  3693                           ;Config register IDLOC0 @ 0x200000
  3694                           ;	unspecified, using default values
  3695  200000                     	org	2097152
  3696  200000  FF                 	db	255
  3697                           
  3698                           ;Config register IDLOC1 @ 0x200001
  3699                           ;	unspecified, using default values
  3700  200001                     	org	2097153
  3701  200001  FF                 	db	255
  3702                           
  3703                           ;Config register IDLOC2 @ 0x200002
  3704                           ;	unspecified, using default values
  3705  200002                     	org	2097154
  3706  200002  FF                 	db	255
  3707                           
  3708                           ;Config register IDLOC3 @ 0x200003
  3709                           ;	unspecified, using default values
  3710  200003                     	org	2097155
  3711  200003  FF                 	db	255
  3712                           
  3713                           ;Config register IDLOC4 @ 0x200004
  3714                           ;	unspecified, using default values
  3715  200004                     	org	2097156
  3716  200004  FF                 	db	255
  3717                           
  3718                           ;Config register IDLOC5 @ 0x200005
  3719                           ;	unspecified, using default values
  3720  200005                     	org	2097157
  3721  200005  FF                 	db	255
  3722                           
  3723                           ;Config register IDLOC6 @ 0x200006
  3724                           ;	unspecified, using default values
  3725  200006                     	org	2097158
  3726  200006  FF                 	db	255
  3727                           
  3728                           ;Config register IDLOC7 @ 0x200007
  3729                           ;	unspecified, using default values
  3730  200007                     	org	2097159
  3731  200007  FF                 	db	255
  3732                           
  3733                           	psect	config
  3734                           
  3735                           ;Config register CONFIG1L @ 0x300000
  3736                           ;	PLL Prescaler Selection bits
  3737                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  3738                           ;	System Clock Postscaler Selection bits
  3739                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  3740                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3741                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  3742  300000                     	org	3145728
  3743  300000  00                 	db	0
  3744                           
  3745                           ;Config register CONFIG1H @ 0x300001
  3746                           ;	Oscillator Selection bits
  3747                           ;	FOSC = HS, HS oscillator (HS)
  3748                           ;	Fail-Safe Clock Monitor Enable bit
  3749                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3750                           ;	Internal/External Oscillator Switchover bit
  3751                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3752  300001                     	org	3145729
  3753  300001  0C                 	db	12
  3754                           
  3755                           ;Config register CONFIG2L @ 0x300002
  3756                           ;	Power-up Timer Enable bit
  3757                           ;	PWRT = OFF, PWRT disabled
  3758                           ;	Brown-out Reset Enable bits
  3759                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3760                           ;	Brown-out Reset Voltage bits
  3761                           ;	BORV = 3, Minimum setting 2.05V
  3762                           ;	USB Voltage Regulator Enable bit
  3763                           ;	VREGEN = OFF, USB voltage regulator disabled
  3764  300002                     	org	3145730
  3765  300002  19                 	db	25
  3766                           
  3767                           ;Config register CONFIG2H @ 0x300003
  3768                           ;	Watchdog Timer Enable bit
  3769                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3770                           ;	Watchdog Timer Postscale Select bits
  3771                           ;	WDTPS = 32768, 1:32768
  3772  300003                     	org	3145731
  3773  300003  1E                 	db	30
  3774                           
  3775                           ; Padding undefined space
  3776  300004                     	org	3145732
  3777  300004  FF                 	db	255
  3778                           
  3779                           ;Config register CONFIG3H @ 0x300005
  3780                           ;	CCP2 MUX bit
  3781                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  3782                           ;	PORTB A/D Enable bit
  3783                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3784                           ;	Low-Power Timer 1 Oscillator Enable bit
  3785                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3786                           ;	MCLR Pin Enable bit
  3787                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3788  300005                     	org	3145733
  3789  300005  81                 	db	129
  3790                           
  3791                           ;Config register CONFIG4L @ 0x300006
  3792                           ;	Stack Full/Underflow Reset Enable bit
  3793                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3794                           ;	Single-Supply ICSP Enable bit
  3795                           ;	LVP = OFF, Single-Supply ICSP disabled
  3796                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3797                           ;	ICPRT = OFF, ICPORT disabled
  3798                           ;	Extended Instruction Set Enable bit
  3799                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3800                           ;	Background Debugger Enable bit
  3801                           ;	DEBUG = 0x1, unprogrammed default
  3802  300006                     	org	3145734
  3803  300006  81                 	db	129
  3804                           
  3805                           ; Padding undefined space
  3806  300007                     	org	3145735
  3807  300007  FF                 	db	255
  3808                           
  3809                           ;Config register CONFIG5L @ 0x300008
  3810                           ;	Code Protection bit
  3811                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  3812                           ;	Code Protection bit
  3813                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  3814                           ;	Code Protection bit
  3815                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  3816                           ;	Code Protection bit
  3817                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  3818  300008                     	org	3145736
  3819  300008  0F                 	db	15
  3820                           
  3821                           ;Config register CONFIG5H @ 0x300009
  3822                           ;	Boot Block Code Protection bit
  3823                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  3824                           ;	Data EEPROM Code Protection bit
  3825                           ;	CPD = OFF, Data EEPROM is not code-protected
  3826  300009                     	org	3145737
  3827  300009  C0                 	db	192
  3828                           
  3829                           ;Config register CONFIG6L @ 0x30000A
  3830                           ;	Write Protection bit
  3831                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  3832                           ;	Write Protection bit
  3833                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  3834                           ;	Write Protection bit
  3835                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  3836                           ;	Write Protection bit
  3837                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  3838  30000A                     	org	3145738
  3839  30000A  0F                 	db	15
  3840                           
  3841                           ;Config register CONFIG6H @ 0x30000B
  3842                           ;	Configuration Register Write Protection bit
  3843                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3844                           ;	Boot Block Write Protection bit
  3845                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  3846                           ;	Data EEPROM Write Protection bit
  3847                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3848  30000B                     	org	3145739
  3849  30000B  E0                 	db	224
  3850                           
  3851                           ;Config register CONFIG7L @ 0x30000C
  3852                           ;	Table Read Protection bit
  3853                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3854                           ;	Table Read Protection bit
  3855                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3856                           ;	Table Read Protection bit
  3857                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3858                           ;	Table Read Protection bit
  3859                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3860  30000C                     	org	3145740
  3861  30000C  0F                 	db	15
  3862                           
  3863                           ;Config register CONFIG7H @ 0x30000D
  3864                           ;	Boot Block Table Read Protection bit
  3865                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  3866  30000D                     	org	3145741
  3867  30000D  40                 	db	64
  3868                           tosu	equ	0xFFF
  3869                           tosh	equ	0xFFE
  3870                           tosl	equ	0xFFD
  3871                           stkptr	equ	0xFFC
  3872                           pclatu	equ	0xFFB
  3873                           pclath	equ	0xFFA
  3874                           pcl	equ	0xFF9
  3875                           tblptru	equ	0xFF8
  3876                           tblptrh	equ	0xFF7
  3877                           tblptrl	equ	0xFF6
  3878                           tablat	equ	0xFF5
  3879                           prodh	equ	0xFF4
  3880                           prodl	equ	0xFF3
  3881                           indf0	equ	0xFEF
  3882                           postinc0	equ	0xFEE
  3883                           postdec0	equ	0xFED
  3884                           preinc0	equ	0xFEC
  3885                           plusw0	equ	0xFEB
  3886                           fsr0h	equ	0xFEA
  3887                           fsr0l	equ	0xFE9
  3888                           wreg	equ	0xFE8
  3889                           indf1	equ	0xFE7
  3890                           postinc1	equ	0xFE6
  3891                           postdec1	equ	0xFE5
  3892                           preinc1	equ	0xFE4
  3893                           plusw1	equ	0xFE3
  3894                           fsr1h	equ	0xFE2
  3895                           fsr1l	equ	0xFE1
  3896                           bsr	equ	0xFE0
  3897                           indf2	equ	0xFDF
  3898                           postinc2	equ	0xFDE
  3899                           postdec2	equ	0xFDD
  3900                           preinc2	equ	0xFDC
  3901                           plusw2	equ	0xFDB
  3902                           fsr2h	equ	0xFDA
  3903                           fsr2l	equ	0xFD9
  3904                           status	equ	0xFD8

Data Sizes:
    Strings     28
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     10      68
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[8]), STR_2(CODE[8]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[8]), STR_2(CODE[8]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[8]), STR_2(CODE[8]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S841_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    Lcd_Out2@buffer	PTR char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    Lcd_Out@buffer	PTR const char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8687
                                             93 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                           _Lcd_Out2
                        _adcGetValue
                            _adcInit
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6608
                                             87 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              2     2      0      44
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _adcGetValue                                          4     2      2      22
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             7     4      3     837
                                              3 COMRAM     7     4      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              7     4      3     685
                                              3 COMRAM     7     4      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             3     3      0     315
                                              3 COMRAM     3     3      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   _adcGetValue
   _adcInit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A      44       5       42.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A3      20        0.0%
DATA                 0      0      A3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu May 27 13:54:06 2021

                     l20 1874                       l22 1882                       l23 188A  
                     l17 17CA                       l91 14EE                       l92 153A  
                     l93 158C                      l122 10EC                      l106 1630  
                    l125 1216                      l119 16CE                      l242 0E3A  
                    l255 0F9E                      l806 1782                      l905 180E  
                    l833 144E                      l914 18C0                      l908 18D8  
                    l836 1490                      l844 08BE                      l838 14CC  
                    l846 08C6                      l871 0CB2                      l864 0AFE  
                    l882 1846                      l885 184E                      l877 1728  
                    l878 1730                      l897 1406          adcInit@ADC_PINs 0002  
                    u610 1350                      u611 134C                      u700 0D46  
                    u620 1362                      u701 0D42                      u621 135E  
                    u710 0D70                      u630 138A                      u711 0D6C  
                    u631 1386                      u720 0DB0                      u640 13C0  
                    u800 1418                      u721 0DAC                      u641 13BC  
                    u801 1414                      u730 0DFA                      u650 180E  
                    u810 143A                      u731 0DF6                      u651 180A  
                    u811 1436                      u740 0E4E                      u660 18B4  
                    u820 1490                      u900 08E0                      u741 0E4A  
                    u661 18B0                      u821 148C                      u901 08DC  
                    u670 0CC6                      u750 0E80                      u830 14A0  
                    u910 08EE                      u671 0CC2                      u751 0E7C  
                    u831 149C                      u911 08EA                      u680 0CF8  
                    u760 0EBE                      u840 182A                      u920 0A16  
                    u681 0CF4                      u761 0EBA                      u841 1826  
                    u921 0A12                      u770 0EE8                      u930 0A34  
                    u850 084E                      u691 0D22                      u771 0EE4  
                    u931 0A30                      u851 0848                      u780 0F16  
                    u940 0A4E                      u860 0850                      u781 0F12  
                    u941 0A4A                      u790 0F5E                      u950 0A68  
                    u870 0866                      u791 0F5A                      u951 0A64  
                    u871 0862                      u960 0A78                      u880 0896  
                    u961 0A74                      u881 0892                      u970 0A8A  
                    u890 08B2                      u971 0A86                      u891 08AE  
                    u980 0A9A                      u981 0A96                      u990 0AB2  
                    u991 0AAE                      _abs 1810                      _pad 1408  
                    wreg 000FE8                     ?_abs 0013                     l1500 0E4E  
                   l1420 133E                     l1510 0EBE                     l1502 0E6E  
                   l1430 13C0                     l1422 1350                     l1520 0F36  
                   l1512 0EC6                     l1504 0E72                     l1424 1362  
                   l1440 17EE                     l1600 0A68                     l1522 0F48  
                   l1514 0EDA                     l1506 0E80                     l1426 136C  
                   l1434 17CC                     l1442 188C                     l1610 0AB2  
                   l1602 0A78                     l1700 10CE                     l1460 0CEA  
                   l1452 0CB4                     l1516 0EE8                     l1524 0F4E  
                   l1508 0EA0                     l1428 138A                     l1436 17D8  
                   l1444 1898                     l1540 1446                     l1532 1408  
                   l1612 0ABE                     l1604 0A8A                     l1620 0B00  
                   l1702 10D4                     l1470 0D46                     l1462 0CF8  
                   l1454 0CB8                     l1526 0F5E                     l1518 0F16  
                   l1438 17EA                     l1446 189C                     l1550 14B4  
                   l1542 145A                     l1534 1418                     l1614 0AC6  
                   l1606 0A9A                     l1630 0B6C                     l1622 0B24  
                   l1710 16D8                     l1704 10D6                     l1800 159E  
                   l1720 17A2                     l1480 0DB0                     l1472 0D4E  
                   l1464 0D18                     l1456 0CC6                     l1528 0F7E  
                   l1448 18B4                     l1544 146E                     l1536 142C  
                   l1608 0AA0                     l1616 0AD6                     l1560 083E  
                   l1640 0C34                     l1632 0B90                     l1624 0B32  
                   l1712 16E6                     l1706 10DC                     l1802 15A8  
                   l1810 15F6                     l1730 17C8                     l1722 17B2  
                   l1490 0DFA                     l1482 0DD0                     l1474 0D62  
                   l1466 0D1C                     l1458 0CE6                     l1554 1810  
                   l1546 1472                     l1538 143A                     l1570 08B2  
                   l1562 0866                     l1650 0C70                     l1642 0C42  
                   l1634 0BD8                     l1626 0B44                     l1714 170C  
                   l1740 14DA                     l1812 1600                     l1804 15B2  
                   l1732 1852                     l1724 17B6                     l1716 1786  
                   l1492 0E1A                     l1484 0DD2                     l1476 0D70  
                   l1468 0D28                     l1556 182A                     l1548 14A0  
                   l1580 08FC                     l1572 08CE                     l1564 0886  
                   l1644 0C56                     l1628 0B48                     l1708 16D0  
                   l1670 117C                     l1662 10F0                     l1750 150C  
                   l1742 14EA                     l1814 1610                     l1734 1864  
                   l1726 17BE                     l1718 1796                     l1486 0DE4  
                   l1478 0D82                     l1590 0998                     l1582 0904  
                   l1574 08E0                     l1566 0896                     l1558 081E  
                   l1638 0C10                     l1654 0C7C                     l1830 1770  
                   l1822 1732                     l1680 1204                     l1672 1182  
                   l1664 10F4                     l1760 1516                     l1752 150E  
                   l1816 1614                     l1808 15BC                     l1840 164C  
                   l1736 1872                     l1728 17C6                     l1488 0DEA  
                   l1496 0E3C                     l1584 090A                     l1592 09FC  
                   l1576 08EE                     l1568 0898                     l1656 0CA0  
                   l1648 0C62                     l1824 1744                     l1682 1206  
                   l1674 11F4                     l1666 1172                     l1770 155C  
                   l1762 1528                     l1754 1510                     l1738 14CE  
                   l1690 103E                     l1850 16A4                     l1842 1656  
                   l1834 1634                     l1498 0E40                     l1594 0A16  
                   l1586 098C                     l1578 08F4                     l1826 174C  
                   l1676 11FC                     l1668 117A                     l1780 1574  
                   l1772 155E                     l1764 1552                     l1756 1512  
                   l1748 1506                     l1692 1040                     l1684 0FA2  
                   l1852 16B2                     l1932 1674                     l1836 1638  
                   l1596 0A34                     l1588 0992                     l1828 1754  
                   l1860 1218                     l1678 11FE                     l1790 1580  
                   l1782 1574                     l1774 1560                     l1766 1558  
                   l1758 1514                     l1694 1046                     l1686 0FA6  
                   l1934 15D0                     l1854 16B6                     l1838 1642  
                   l1846 1660                     l1598 0A4E                     l1870 126A  
                   l1862 121A                     l1792 1586                     l1784 157A  
                   l1776 1562                     l1768 155A                     l1696 10C4  
                   l1688 1036                     l1848 169A                     l1880 12B8  
                   l1872 1270                     l1864 122A                     l1794 1586  
                   l1786 157A                     l1778 1574                     l1698 10CC  
                   l1890 131E                     l1882 12CA                     l1874 1288  
                   l1866 1242                     l1788 1580                     l1796 1590  
                   l1884 12E2                     l1876 128E                     l1868 1254  
                   l1798 1594                     l1886 12F0                     l1878 129C  
                   ?_pad 0011                     l1888 130C                     STR_1 0801  
                   STR_2 080D                     STR_3 0815                     u1000 0B24  
                   u1001 0B20                     u1010 0B6C                     u1011 0B68  
                   u1020 0B90                     u1021 0B8C                     u1030 0C34  
                   u1031 0C30                     u1105 101C                     u1130 1728  
                   u1115 1050                     u1131 1724                     u1140 1796  
                   u1045 10FC                     u1125 1094                     u1141 1792  
                   u1150 1882                     u1055 1116                     u1151 187E  
                   u1207 125E                     u1160 153A                     u1065 113C  
                   u1161 1536                     u1217 127A                     u1170 1630  
                   u1307 10E2                     u1075 0FAE                     u1171 162C  
                   u1227 12D4                     u1180 16CE                     u1317 14E0  
                   u1085 0FD2                     u1181 16CA                     u1237 1328  
                   u1407 120C                     u1327 1508                     u1095 0FF8  
                   u1247 186A                     u1337 151E                     u1257 1038  
                   u1347 1554                     u1267 1042                     u1357 156A  
                   u1277 10C6                     u1197 1234                     u1367 1174  
                   u1287 10D0                     u1377 117E                     u1297 10D8  
                   u1387 11F6                     u1397 1200                     abs@a 0013  
                   _dbuf 006A                     _main 1218                     _dtoa 081E  
                   _prec 0064                     _nout 0060                     pad@i 0018  
                   pad@p 0015                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 001A  
                   fsr2l 000FD9                     start 0000          __end_of_Lcd_Cmd 1218  
        __end_of_Lcd_Out 1632             ___param_bank 000000               _Lcd_Chr_CP 0FA0  
                  ??_abs 0015                    ??_pad 0017           Lcd_Out2@buffer 0005  
        __end_of___aodiv 0E3C                    ?_main 0001                    ?_dtoa 001C  
        __end_of___aomod 0FA0          __end_of_adcInit 17CC                    _ADRES 000FC3  
           vfpfcnvrt@fmt 0042                    _PORTB 000F81                    _flags 0066  
                  _fputc 133E                    _fputs 17CC                    pad@fp 0011  
                  _width 0062                    _putch 18D8                    dtoa@d 001E  
                  dtoa@i 003E                    dtoa@n 0036                    dtoa@p 0030  
                  dtoa@s 0034                    dtoa@w 0032                    tablat 000FF5  
                  status 000FD8          __end_of_sprintf 1784         __end_of_Lcd_Init 158E  
       __end_of_Lcd_Out2 16D0          __initialization 18C2             __end_of_main 133E  
           __end_of_dtoa 0B00                   ??_main 005E                   ??_dtoa 0026  
          __activetblptr 000002                   ?_fputc 0001                   ?_fputs 000A  
                 ?_putch 0001                ??_Lcd_Cmd 0001                ??_Lcd_Out 0007  
           vfprintf@cfmt 0056              ?_Lcd_Chr_CP 0001                ??___aodiv 0011  
              ??___aomod 0011                ??_adcInit 0001                   _entero 0068  
                 clear_0 18C8                   pad@buf 0013                   dtoa@fp 001C  
                 _strlen 188C                   fputc@c 0001                   fputs@c 000E  
                 fputs@i 000F                   fputs@s 000A             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
      adcGetValue@PinADC 0004                   putch@c 0001         __end_of_vfprintf 1732  
              ??_sprintf 005E               __accesstop 0060  __end_of__initialization 18CE  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_fputc 1408  
          __end_of_fputs 1810            __end_of_putch 18DA            ??_adcGetValue 0003  
              ?_Lcd_Init 0001                ?_Lcd_Out2 0004                  ??_fputc 0005  
                ??_fputs 000E      __size_of_Lcd_Chr_CP 014E                  ??_putch 0001  
             __pbssBANK0 0060                  ?_strlen 0001               _buffer_lcd 008A  
     __size_of_vfpfcnvrt 01B4               ??_Lcd_Init 0004               ??_Lcd_Out2 0007  
    __end_of_adcGetValue 188C                  _Lcd_Cmd 10EE                  _Lcd_Out 158E  
                __Hparam 0000                  __Lparam 0000                  ___aodiv 0CB4  
                ___aomod 0E3C                  _adcInit 1784                ?_vfprintf 0050  
           __psmallconst 0800                  __pcinit 18C2                  __ramtop 0800  
                __ptext0 1218                  __ptext1 1732                  __ptext2 16D0  
                __ptext3 0B00                  __ptext4 081E                  __ptext5 1408  
                __ptext6 188C                  __ptext7 17CC                  __ptext8 133E  
                __ptext9 18D8          __size_of_strlen 0036             __size_of_abs 0040  
           __size_of_pad 00C6                  _sprintf 1732     end_of_initialization 18CE  
                fputc@fp 0003            __Lmediumconst 0000                  fputs@fp 000C  
      __end_of_vfpfcnvrt 0CB4                Lcd_Init@i 0005             ??_Lcd_Chr_CP 0001  
              Lcd_Out2@x 0004                Lcd_Out2@y 0009                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 0056                  strlen@a 0003                  strlen@s 0001  
              _PORTBbits 000F81              _adcGetValue 1850                _TRISDbits 000F95  
     __end_of_Lcd_Chr_CP 10EE              vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040  
            vfpfcnvrt@ll 0048           __end_of_strlen 18C2      start_initialization 18C2  
            __end_of_abs 1850              __end_of_pad 14CE            Lcd_Out@buffer 0005  
      __size_of_Lcd_Init 00C0        __size_of_Lcd_Out2 009E              vfprintf@fmt 0052  
               ??_strlen 0003            __pcstackBANK0 009A         ___aodiv@dividend 0001  
               ?_Lcd_Cmd 0001                 ?_Lcd_Out 0004                 ?___aodiv 0001  
               ?___aomod 0001                 ?_adcInit 0001         ___aodiv@quotient 0013  
      __size_of_vfprintf 0062              __smallconst 0800                 ?_sprintf 0058  
         __size_of_fputc 00CA           __size_of_fputs 0044           __size_of_putch 0002  
               _LATDbits 000F8C                 _GO_nDONE 007E11                 Lcd_Out@x 0004  
               Lcd_Out@y 0009                _vfpfcnvrt 0B00               _ADCON0bits 000FC2  
             _ADCON1bits 000FC1               _ADCON2bits 000FC0             ?_adcGetValue 0001  
           Lcd_Out2@data 000A                 _Lcd_Init 14CE                 _Lcd_Out2 1632  
       __size_of_Lcd_Cmd 012A         __size_of_Lcd_Out 00A4                 __Hrparam 0000  
             vfprintf@ap 0054                 __Lrparam 0000               vfprintf@fp 0050  
       __size_of___aodiv 0188         __size_of___aomod 0164         __size_of_adcInit 0048  
             ?_vfpfcnvrt 0040          ___aodiv@divisor 0009          ___aodiv@counter 0011  
             sprintf@fmt 005A           Lcd_Chr_CP@data 0003                 _dtoa$914 002E  
               __ptext10 1810                 __ptext11 0E3C                 __ptext12 0CB4  
               __ptext13 1784                 __ptext14 1850                 __ptext15 1632  
               __ptext16 158E                 __ptext17 0FA0                 __ptext18 14CE  
               __ptext19 10EE         __size_of_sprintf 0052              Lcd_Cmd@data 0003  
          __size_of_main 0126            __size_of_dtoa 02E2                 _vfprintf 16D0  
       ___aomod@dividend 0001              Lcd_Out@data 000A                sprintf@ap 009C  
        ___aomod@divisor 0009              ??_vfpfcnvrt 0046          ___aomod@counter 0011  
               sprintf@f 009E                 sprintf@s 0058     __size_of_adcGetValue 003C  
           ___aodiv@sign 0012             ___aomod@sign 0012  
