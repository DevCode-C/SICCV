

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue May 25 22:38:42 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    11                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    14  0000                     
    15                           ; Version 2.20
    16                           ; Generated 12/02/2020 GMT
    17                           ; 
    18                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC18F4550 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     _ADRES	set	4035
    50  0000                     _ADCON0bits	set	4034
    51  0000                     _ADCON2bits	set	4032
    52  0000                     _ADCON1bits	set	4033
    53  0000                     _LATAbits	set	3977
    54  0000                     _LATD	set	3980
    55  0000                     _TRISD	set	3989
    56  0000                     _TRISAbits	set	3986
    57  0000                     _GO_nDONE	set	32273
    58                           
    59                           ; #config settings
    60                           
    61                           	psect	cinit
    62  007F16                     __pcinit:
    63                           	callstack 0
    64  007F16                     start_initialization:
    65                           	callstack 0
    66  007F16                     __initialization:
    67                           	callstack 0
    68  007F16                     end_of_initialization:
    69                           	callstack 0
    70  007F16                     __end_of__initialization:
    71                           	callstack 0
    72  007F16  0100               	movlb	0
    73  007F18  EFD0  F03F         	goto	_main	;jump to C main() function
    74                           
    75                           	psect	cstackCOMRAM
    76  000001                     __pcstackCOMRAM:
    77                           	callstack 0
    78  000001                     ??_adcInit:
    79  000001                     ?_adcGetValue:
    80                           	callstack 0
    81                           
    82                           ; 2 bytes @ 0x0
    83  000001                     	ds	1
    84  000002                     adcInit@ADC_PINs:
    85                           	callstack 0
    86                           
    87                           ; 1 bytes @ 0x1
    88  000002                     	ds	1
    89  000003                     ??_adcGetValue:
    90                           
    91                           ; 1 bytes @ 0x2
    92  000003                     	ds	1
    93  000004                     adcGetValue@PinADC:
    94                           	callstack 0
    95                           
    96                           ; 1 bytes @ 0x3
    97  000004                     	ds	1
    98  000005                     ??_main:
    99                           
   100                           ; 1 bytes @ 0x4
   101  000005                     	ds	2
   102                           
   103 ;;
   104 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   105 ;;
   106 ;; *************** function _main *****************
   107 ;; Defined at:
   108 ;;		line 12 in file "main.c"
   109 ;; Parameters:    Size  Location     Type
   110 ;;		None
   111 ;; Auto vars:     Size  Location     Type
   112 ;;		None
   113 ;; Return value:  Size  Location     Type
   114 ;;                  1    wreg      void 
   115 ;; Registers used:
   116 ;;		wreg, status,2, status,0, cstack
   117 ;; Tracked objects:
   118 ;;		On entry : 0/0
   119 ;;		On exit  : 0/0
   120 ;;		Unchanged: 0/0
   121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   122 ;;      Params:         0       0       0       0       0       0       0       0       0
   123 ;;      Locals:         0       0       0       0       0       0       0       0       0
   124 ;;      Temps:          2       0       0       0       0       0       0       0       0
   125 ;;      Totals:         2       0       0       0       0       0       0       0       0
   126 ;;Total ram usage:        2 bytes
   127 ;; Hardware stack levels required when called:    1
   128 ;; This function calls:
   129 ;;		_adcGetValue
   130 ;;		_adcInit
   131 ;; This function is called by:
   132 ;;		Startup code after reset
   133 ;; This function uses a non-reentrant model
   134 ;;
   135                           
   136                           	psect	text0
   137  007FA0                     __ptext0:
   138                           	callstack 0
   139  007FA0                     _main:
   140                           	callstack 30
   141  007FA0                     
   142                           ;main.c: 15:     TRISAbits.TRISA0 = 1;
   143  007FA0  8092               	bsf	146,0,c	;volatile
   144                           
   145                           ;main.c: 16:     TRISAbits.TRISA1 = 1;
   146  007FA2  8292               	bsf	146,1,c	;volatile
   147                           
   148                           ;main.c: 17:     TRISAbits.TRISA2 = 0;
   149  007FA4  9492               	bcf	146,2,c	;volatile
   150  007FA6                     
   151                           ;main.c: 18:     TRISD = 0x00;
   152  007FA6  0E00               	movlw	0
   153  007FA8  6E95               	movwf	149,c	;volatile
   154  007FAA                     
   155                           ;main.c: 19:     adcInit(2);
   156  007FAA  0E02               	movlw	2
   157  007FAC  ECAC  F03F         	call	_adcInit
   158  007FB0                     l773:
   159                           
   160                           ;main.c: 22:         LATD = (uint8_t)adcGetValue(0);
   161  007FB0  0E00               	movlw	0
   162  007FB2  EC8E  F03F         	call	_adcGetValue
   163  007FB6  5001               	movf	?_adcGetValue^0,w,c
   164  007FB8  6E8C               	movwf	140,c	;volatile
   165  007FBA                     
   166                           ;main.c: 23:         LATAbits.LA2 = 1;
   167  007FBA  8489               	bsf	137,2,c	;volatile
   168  007FBC                     
   169                           ;main.c: 24:         _delay((unsigned long)((500)*(48000000/4000.0)));
   170  007FBC  0E1F               	movlw	31
   171  007FBE  6E06               	movwf	(??_main+1)^0,c
   172  007FC0  0E71               	movlw	113
   173  007FC2  6E05               	movwf	??_main^0,c
   174  007FC4  0E1E               	movlw	30
   175  007FC6                     u47:
   176  007FC6  2EE8               	decfsz	wreg,f,c
   177  007FC8  D7FE               	bra	u47
   178  007FCA  2E05               	decfsz	??_main^0,f,c
   179  007FCC  D7FC               	bra	u47
   180  007FCE  2E06               	decfsz	(??_main+1)^0,f,c
   181  007FD0  D7FA               	bra	u47
   182  007FD2  D000               	nop2	
   183  007FD4                     
   184                           ;main.c: 25:         LATD = (uint8_t)adcGetValue(1);
   185  007FD4  0E01               	movlw	1
   186  007FD6  EC8E  F03F         	call	_adcGetValue
   187  007FDA  5001               	movf	?_adcGetValue^0,w,c
   188  007FDC  6E8C               	movwf	140,c	;volatile
   189  007FDE                     
   190                           ;main.c: 26:         LATAbits.LA2 = 0;
   191  007FDE  9489               	bcf	137,2,c	;volatile
   192  007FE0                     
   193                           ;main.c: 27:         _delay((unsigned long)((500)*(48000000/4000.0)));
   194  007FE0  0E1F               	movlw	31
   195  007FE2  6E06               	movwf	(??_main+1)^0,c
   196  007FE4  0E71               	movlw	113
   197  007FE6  6E05               	movwf	??_main^0,c
   198  007FE8  0E1E               	movlw	30
   199  007FEA                     u57:
   200  007FEA  2EE8               	decfsz	wreg,f,c
   201  007FEC  D7FE               	bra	u57
   202  007FEE  2E05               	decfsz	??_main^0,f,c
   203  007FF0  D7FC               	bra	u57
   204  007FF2  2E06               	decfsz	(??_main+1)^0,f,c
   205  007FF4  D7FA               	bra	u57
   206  007FF6  D000               	nop2	
   207  007FF8  EFD8  F03F         	goto	l773
   208  007FFC  EF00  F000         	goto	start
   209  008000                     __end_of_main:
   210                           	callstack 0
   211                           
   212 ;; *************** function _adcInit *****************
   213 ;; Defined at:
   214 ;;		line 11 in file "adc.c"
   215 ;; Parameters:    Size  Location     Type
   216 ;;  ADC_PINs        1    wreg     unsigned char 
   217 ;; Auto vars:     Size  Location     Type
   218 ;;  ADC_PINs        1    1[COMRAM] unsigned char 
   219 ;; Return value:  Size  Location     Type
   220 ;;                  1    wreg      void 
   221 ;; Registers used:
   222 ;;		wreg, status,2, status,0
   223 ;; Tracked objects:
   224 ;;		On entry : 0/0
   225 ;;		On exit  : 0/0
   226 ;;		Unchanged: 0/0
   227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   228 ;;      Params:         0       0       0       0       0       0       0       0       0
   229 ;;      Locals:         1       0       0       0       0       0       0       0       0
   230 ;;      Temps:          1       0       0       0       0       0       0       0       0
   231 ;;      Totals:         2       0       0       0       0       0       0       0       0
   232 ;;Total ram usage:        2 bytes
   233 ;; Hardware stack levels used:    1
   234 ;; This function calls:
   235 ;;		Nothing
   236 ;; This function is called by:
   237 ;;		_main
   238 ;; This function uses a non-reentrant model
   239 ;;
   240                           
   241                           	psect	text1
   242  007F58                     __ptext1:
   243                           	callstack 0
   244  007F58                     _adcInit:
   245                           	callstack 30
   246                           
   247                           ;incstack = 0
   248                           ;adcInit@ADC_PINs stored from wreg
   249  007F58  6E02               	movwf	adcInit@ADC_PINs^0,c
   250  007F5A                     
   251                           ;adc.c: 11: void adcInit(uint8_t ADC_PINs);adc.c: 12: {;adc.c: 14:     if(ADC_PINs == 0)
   252  007F5A  5002               	movf	adcInit@ADC_PINs^0,w,c
   253  007F5C  A4D8               	btfss	status,2,c
   254  007F5E  EFB3  F03F         	goto	u11
   255  007F62  EFB5  F03F         	goto	u10
   256  007F66                     u11:
   257  007F66  EFBB  F03F         	goto	l725
   258  007F6A                     u10:
   259  007F6A                     
   260                           ;adc.c: 15:     {;adc.c: 16:         ADCON1bits.PCFG = 0b1110;
   261  007F6A  50C1               	movf	193,w,c	;volatile
   262  007F6C  0BF0               	andlw	-16
   263  007F6E  090E               	iorlw	14
   264  007F70  6EC1               	movwf	193,c	;volatile
   265                           
   266                           ;adc.c: 17:     }
   267  007F72  EFC3  F03F         	goto	l727
   268  007F76                     l725:
   269                           
   270                           ;adc.c: 19:     {;adc.c: 20:         ADCON1bits.PCFG = 15 - ADC_PINs;
   271  007F76  5002               	movf	adcInit@ADC_PINs^0,w,c
   272  007F78  080F               	sublw	15
   273  007F7A  6E01               	movwf	??_adcInit^0,c
   274  007F7C  50C1               	movf	193,w,c	;volatile
   275  007F7E  1801               	xorwf	??_adcInit^0,w,c
   276  007F80  0BF0               	andlw	-16
   277  007F82  1801               	xorwf	??_adcInit^0,w,c
   278  007F84  6EC1               	movwf	193,c	;volatile
   279  007F86                     l727:
   280                           
   281                           ;adc.c: 26:     ADCON1bits.VCFG = 0b00;
   282  007F86  0ECF               	movlw	-49
   283  007F88  16C1               	andwf	193,f,c	;volatile
   284  007F8A                     
   285                           ;adc.c: 31:     ADCON2bits.ACQT = 0b010;
   286  007F8A  50C0               	movf	192,w,c	;volatile
   287  007F8C  0BC7               	andlw	-57
   288  007F8E  0910               	iorlw	16
   289  007F90  6EC0               	movwf	192,c	;volatile
   290  007F92                     
   291                           ;adc.c: 36:     ADCON2bits.ADCS = 3;
   292  007F92  50C0               	movf	192,w,c	;volatile
   293  007F94  0BF8               	andlw	-8
   294  007F96  0903               	iorlw	3
   295  007F98  6EC0               	movwf	192,c	;volatile
   296  007F9A                     
   297                           ;adc.c: 39:     ADCON2bits.ADFM = 1;
   298  007F9A  8EC0               	bsf	192,7,c	;volatile
   299  007F9C                     
   300                           ;adc.c: 40:     ADCON0bits.ADON = 1;
   301  007F9C  80C2               	bsf	194,0,c	;volatile
   302  007F9E  0012               	return		;funcret
   303  007FA0                     __end_of_adcInit:
   304                           	callstack 0
   305                           
   306 ;; *************** function _adcGetValue *****************
   307 ;; Defined at:
   308 ;;		line 43 in file "adc.c"
   309 ;; Parameters:    Size  Location     Type
   310 ;;  PinADC          1    wreg     unsigned char 
   311 ;; Auto vars:     Size  Location     Type
   312 ;;  PinADC          1    3[COMRAM] unsigned char 
   313 ;; Return value:  Size  Location     Type
   314 ;;                  2    0[COMRAM] unsigned short 
   315 ;; Registers used:
   316 ;;		wreg, status,2, status,0
   317 ;; Tracked objects:
   318 ;;		On entry : 0/0
   319 ;;		On exit  : 0/0
   320 ;;		Unchanged: 0/0
   321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   322 ;;      Params:         2       0       0       0       0       0       0       0       0
   323 ;;      Locals:         1       0       0       0       0       0       0       0       0
   324 ;;      Temps:          1       0       0       0       0       0       0       0       0
   325 ;;      Totals:         4       0       0       0       0       0       0       0       0
   326 ;;Total ram usage:        4 bytes
   327 ;; Hardware stack levels used:    1
   328 ;; This function calls:
   329 ;;		Nothing
   330 ;; This function is called by:
   331 ;;		_main
   332 ;; This function uses a non-reentrant model
   333 ;;
   334                           
   335                           	psect	text2
   336  007F1C                     __ptext2:
   337                           	callstack 0
   338  007F1C                     _adcGetValue:
   339                           	callstack 30
   340                           
   341                           ;incstack = 0
   342                           ;adcGetValue@PinADC stored from wreg
   343  007F1C  6E04               	movwf	adcGetValue@PinADC^0,c
   344  007F1E                     
   345                           ;adc.c: 43: uint16_t adcGetValue(uint8_t PinADC);adc.c: 44: {;adc.c: 48:     ADCON0bits.
      +                          CHS = PinADC;
   346  007F1E  C004  F003         	movff	adcGetValue@PinADC,??_adcGetValue
   347  007F22  4603               	rlncf	??_adcGetValue^0,f,c
   348  007F24  4603               	rlncf	??_adcGetValue^0,f,c
   349  007F26  50C2               	movf	194,w,c	;volatile
   350  007F28  1803               	xorwf	??_adcGetValue^0,w,c
   351  007F2A  0BC3               	andlw	-61
   352  007F2C  1803               	xorwf	??_adcGetValue^0,w,c
   353  007F2E  6EC2               	movwf	194,c	;volatile
   354  007F30                     
   355                           ;adc.c: 49:     _delay((unsigned long)((2)*(48000000/4000.0)));
   356  007F30  0E20               	movlw	32
   357  007F32  6E03               	movwf	??_adcGetValue^0,c
   358  007F34  0E2A               	movlw	42
   359  007F36                     u67:
   360  007F36  2EE8               	decfsz	wreg,f,c
   361  007F38  D7FE               	bra	u67
   362  007F3A  2E03               	decfsz	??_adcGetValue^0,f,c
   363  007F3C  D7FC               	bra	u67
   364  007F3E                     
   365                           ;adc.c: 50:     GO_nDONE = 1;
   366  007F3E  82C2               	bsf	4034,1,c	;volatile
   367  007F40                     l42:
   368                           
   369                           ;adc.c: 51:     while(ADCON0bits.GO_DONE)
   370  007F40  B2C2               	btfsc	194,1,c	;volatile
   371  007F42  EFA5  F03F         	goto	u31
   372  007F46  EFA7  F03F         	goto	u30
   373  007F4A                     u31:
   374  007F4A  EFA0  F03F         	goto	l42
   375  007F4E                     u30:
   376  007F4E                     
   377                           ;adc.c: 55:     return ADRES;
   378  007F4E  CFC3 F001          	movff	4035,?_adcGetValue	;volatile
   379  007F52  CFC4 F002          	movff	4036,?_adcGetValue+1	;volatile
   380  007F56  0012               	return		;funcret
   381  007F58                     __end_of_adcGetValue:
   382                           	callstack 0
   383  0000                     
   384                           	psect	rparam
   385  0000                     
   386                           	psect	idloc
   387                           
   388                           ;Config register IDLOC0 @ 0x200000
   389                           ;	unspecified, using default values
   390  200000                     	org	2097152
   391  200000  FF                 	db	255
   392                           
   393                           ;Config register IDLOC1 @ 0x200001
   394                           ;	unspecified, using default values
   395  200001                     	org	2097153
   396  200001  FF                 	db	255
   397                           
   398                           ;Config register IDLOC2 @ 0x200002
   399                           ;	unspecified, using default values
   400  200002                     	org	2097154
   401  200002  FF                 	db	255
   402                           
   403                           ;Config register IDLOC3 @ 0x200003
   404                           ;	unspecified, using default values
   405  200003                     	org	2097155
   406  200003  FF                 	db	255
   407                           
   408                           ;Config register IDLOC4 @ 0x200004
   409                           ;	unspecified, using default values
   410  200004                     	org	2097156
   411  200004  FF                 	db	255
   412                           
   413                           ;Config register IDLOC5 @ 0x200005
   414                           ;	unspecified, using default values
   415  200005                     	org	2097157
   416  200005  FF                 	db	255
   417                           
   418                           ;Config register IDLOC6 @ 0x200006
   419                           ;	unspecified, using default values
   420  200006                     	org	2097158
   421  200006  FF                 	db	255
   422                           
   423                           ;Config register IDLOC7 @ 0x200007
   424                           ;	unspecified, using default values
   425  200007                     	org	2097159
   426  200007  FF                 	db	255
   427                           
   428                           	psect	config
   429                           
   430                           ;Config register CONFIG1L @ 0x300000
   431                           ;	PLL Prescaler Selection bits
   432                           ;	PLLDIV = 3, Divide by 3 (12 MHz oscillator input)
   433                           ;	System Clock Postscaler Selection bits
   434                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   435                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   436                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   437  300000                     	org	3145728
   438  300000  02                 	db	2
   439                           
   440                           ;Config register CONFIG1H @ 0x300001
   441                           ;	Oscillator Selection bits
   442                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
   443                           ;	Fail-Safe Clock Monitor Enable bit
   444                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   445                           ;	Internal/External Oscillator Switchover bit
   446                           ;	IESO = OFF, Oscillator Switchover mode disabled
   447  300001                     	org	3145729
   448  300001  0E                 	db	14
   449                           
   450                           ;Config register CONFIG2L @ 0x300002
   451                           ;	Power-up Timer Enable bit
   452                           ;	PWRT = OFF, PWRT disabled
   453                           ;	Brown-out Reset Enable bits
   454                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   455                           ;	Brown-out Reset Voltage bits
   456                           ;	BORV = 3, Minimum setting 2.05V
   457                           ;	USB Voltage Regulator Enable bit
   458                           ;	VREGEN = OFF, USB voltage regulator disabled
   459  300002                     	org	3145730
   460  300002  19                 	db	25
   461                           
   462                           ;Config register CONFIG2H @ 0x300003
   463                           ;	Watchdog Timer Enable bit
   464                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   465                           ;	Watchdog Timer Postscale Select bits
   466                           ;	WDTPS = 32768, 1:32768
   467  300003                     	org	3145731
   468  300003  1E                 	db	30
   469                           
   470                           ; Padding undefined space
   471  300004                     	org	3145732
   472  300004  FF                 	db	255
   473                           
   474                           ;Config register CONFIG3H @ 0x300005
   475                           ;	CCP2 MUX bit
   476                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   477                           ;	PORTB A/D Enable bit
   478                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   479                           ;	Low-Power Timer 1 Oscillator Enable bit
   480                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   481                           ;	MCLR Pin Enable bit
   482                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   483  300005                     	org	3145733
   484  300005  81                 	db	129
   485                           
   486                           ;Config register CONFIG4L @ 0x300006
   487                           ;	Stack Full/Underflow Reset Enable bit
   488                           ;	STVREN = ON, Stack full/underflow will cause Reset
   489                           ;	Single-Supply ICSP Enable bit
   490                           ;	LVP = OFF, Single-Supply ICSP disabled
   491                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   492                           ;	ICPRT = OFF, ICPORT disabled
   493                           ;	Extended Instruction Set Enable bit
   494                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   495                           ;	Background Debugger Enable bit
   496                           ;	DEBUG = 0x1, unprogrammed default
   497  300006                     	org	3145734
   498  300006  81                 	db	129
   499                           
   500                           ; Padding undefined space
   501  300007                     	org	3145735
   502  300007  FF                 	db	255
   503                           
   504                           ;Config register CONFIG5L @ 0x300008
   505                           ;	Code Protection bit
   506                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   507                           ;	Code Protection bit
   508                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   509                           ;	Code Protection bit
   510                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   511                           ;	Code Protection bit
   512                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   513  300008                     	org	3145736
   514  300008  0F                 	db	15
   515                           
   516                           ;Config register CONFIG5H @ 0x300009
   517                           ;	Boot Block Code Protection bit
   518                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   519                           ;	Data EEPROM Code Protection bit
   520                           ;	CPD = OFF, Data EEPROM is not code-protected
   521  300009                     	org	3145737
   522  300009  C0                 	db	192
   523                           
   524                           ;Config register CONFIG6L @ 0x30000A
   525                           ;	Write Protection bit
   526                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   527                           ;	Write Protection bit
   528                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   529                           ;	Write Protection bit
   530                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   531                           ;	Write Protection bit
   532                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   533  30000A                     	org	3145738
   534  30000A  0F                 	db	15
   535                           
   536                           ;Config register CONFIG6H @ 0x30000B
   537                           ;	Configuration Register Write Protection bit
   538                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   539                           ;	Boot Block Write Protection bit
   540                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   541                           ;	Data EEPROM Write Protection bit
   542                           ;	WRTD = OFF, Data EEPROM is not write-protected
   543  30000B                     	org	3145739
   544  30000B  E0                 	db	224
   545                           
   546                           ;Config register CONFIG7L @ 0x30000C
   547                           ;	Table Read Protection bit
   548                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   549                           ;	Table Read Protection bit
   550                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   551                           ;	Table Read Protection bit
   552                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   553                           ;	Table Read Protection bit
   554                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   555  30000C                     	org	3145740
   556  30000C  0F                 	db	15
   557                           
   558                           ;Config register CONFIG7H @ 0x30000D
   559                           ;	Boot Block Table Read Protection bit
   560                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   561  30000D                     	org	3145741
   562  30000D  40                 	db	64
   563                           tosu	equ	0xFFF
   564                           tosh	equ	0xFFE
   565                           tosl	equ	0xFFD
   566                           stkptr	equ	0xFFC
   567                           pclatu	equ	0xFFB
   568                           pclath	equ	0xFFA
   569                           pcl	equ	0xFF9
   570                           tblptru	equ	0xFF8
   571                           tblptrh	equ	0xFF7
   572                           tblptrl	equ	0xFF6
   573                           tablat	equ	0xFF5
   574                           prodh	equ	0xFF4
   575                           prodl	equ	0xFF3
   576                           indf0	equ	0xFEF
   577                           postinc0	equ	0xFEE
   578                           postdec0	equ	0xFED
   579                           preinc0	equ	0xFEC
   580                           plusw0	equ	0xFEB
   581                           fsr0h	equ	0xFEA
   582                           fsr0l	equ	0xFE9
   583                           wreg	equ	0xFE8
   584                           indf1	equ	0xFE7
   585                           postinc1	equ	0xFE6
   586                           postdec1	equ	0xFE5
   587                           preinc1	equ	0xFE4
   588                           plusw1	equ	0xFE3
   589                           fsr1h	equ	0xFE2
   590                           fsr1l	equ	0xFE1
   591                           bsr	equ	0xFE0
   592                           indf2	equ	0xFDF
   593                           postinc2	equ	0xFDE
   594                           postdec2	equ	0xFDD
   595                           preinc2	equ	0xFDC
   596                           plusw2	equ	0xFDB
   597                           fsr2h	equ	0xFDA
   598                           fsr2l	equ	0xFD9
   599                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      6       6
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_adcGetValue

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0      52
                                              4 COMRAM     2     2      0
                        _adcGetValue
                            _adcInit
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _adcGetValue                                          4     2      2      22
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adcGetValue
   _adcInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      6       6       1        6.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue May 25 22:38:42 2021

                     l42 7F40                       l44 7F4E                       l45 7F56  
                     l39 7F9E                       u10 7F6A                       u11 7F66  
                     u30 7F4E                       u31 7F4A                       u47 7FC6  
                     u57 7FEA                       u67 7F36                      l721 7F5A  
                    l731 7F92                      l723 7F6A                      l733 7F9A  
                    l725 7F76                      l735 7F9C                      l727 7F86  
                    l761 7F1E                      l729 7F8A                      l763 7F30  
                    l771 7FAA                      l765 7F3E                      l781 7FDE  
                    l773 7FB0                      l783 7FE0                      l775 7FBA  
                    l767 7FA0                      l777 7FBC                      l769 7FA6  
                    l779 7FD4          adcInit@ADC_PINs 0002                      wreg 000FE8  
                   _LATD 000F8C                     _main 7FA0                     start 0000  
           ___param_bank 000000                    ?_main 0001          __end_of_adcInit 7FA0  
                  _ADRES 000FC3                    _TRISD 000F95                    status 000FD8  
        __initialization 7F16             __end_of_main 8000                   ??_main 0005  
          __activetblptr 000000                ??_adcInit 0001        adcGetValue@PinADC 0004  
             __accesstop 0060  __end_of__initialization 7F16            ___rparam_used 000001  
         __pcstackCOMRAM 0001            ??_adcGetValue 0003      __end_of_adcGetValue 7F58  
                __Hparam 0000                  __Lparam 0000                  _adcInit 7F58  
                __pcinit 7F16                  __ramtop 0800                  __ptext0 7FA0  
                __ptext1 7F58                  __ptext2 7F1C     end_of_initialization 7F16  
            _adcGetValue 7F1C                _TRISAbits 000F92      start_initialization 7F16  
               ?_adcInit 0001                 _LATAbits 000F89                 _GO_nDONE 007E11  
             _ADCON0bits 000FC2               _ADCON1bits 000FC1               _ADCON2bits 000FC0  
           ?_adcGetValue 0001                 __Hrparam 0000                 __Lrparam 0000  
       __size_of_adcInit 0048            __size_of_main 0060     __size_of_adcGetValue 003C  
