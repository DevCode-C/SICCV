

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu May 27 16:30:42 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 12/02/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4550 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     _TMR0	set	4054
    58  0000                     _ADRES	set	4035
    59  0000                     _LATBbits	set	3978
    60  0000                     _INTCONbits	set	4082
    61  0000                     _TRISBbits	set	3987
    62  0000                     _T0CONbits	set	4053
    63  0000                     _LATDbits	set	3980
    64  0000                     _TRISDbits	set	3989
    65  0000                     _PORTBbits	set	3969
    66  0000                     _PORTB	set	3969
    67  0000                     _ADCON0bits	set	4034
    68  0000                     _ADCON2bits	set	4032
    69  0000                     _ADCON1bits	set	4033
    70  0000                     _GO_nDONE	set	32273
    71                           
    72                           	psect	smallconst
    73  000800                     __psmallconst:
    74                           	callstack 0
    75  000800  00                 	db	0
    76  000801                     STR_1:
    77  000801  42                 	db	66	;'B'
    78  000802  69                 	db	105	;'i'
    79  000803  65                 	db	101	;'e'
    80  000804  6E                 	db	110	;'n'
    81  000805  76                 	db	118	;'v'
    82  000806  65                 	db	101	;'e'
    83  000807  6E                 	db	110	;'n'
    84  000808  69                 	db	105	;'i'
    85  000809  64                 	db	100	;'d'
    86  00080A  6F                 	db	111	;'o'
    87  00080B  73                 	db	115	;'s'
    88  00080C  00                 	db	0
    89  00080D  00                 	db	0	; dummy byte at the end
    90  0000                     
    91                           ; #config settings
    92                           
    93                           	psect	cinit
    94  000D9A                     __pcinit:
    95                           	callstack 0
    96  000D9A                     start_initialization:
    97                           	callstack 0
    98  000D9A                     __initialization:
    99                           	callstack 0
   100                           
   101                           ; Clear objects allocated to COMRAM (18 bytes)
   102  000D9A  EE00  F001         	lfsr	0,__pbssCOMRAM
   103  000D9E  0E12               	movlw	18
   104  000DA0                     clear_0:
   105  000DA0  6AEE               	clrf	postinc0,c
   106  000DA2  06E8               	decf	wreg,f,c
   107  000DA4  E1FD               	bnz	clear_0
   108  000DA6                     end_of_initialization:
   109                           	callstack 0
   110  000DA6                     __end_of__initialization:
   111                           	callstack 0
   112  000DA6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   113  000DA8  6EF8               	movwf	tblptru,c
   114  000DAA  0100               	movlb	0
   115  000DAC  EFA3  F005         	goto	_main	;jump to C main() function
   116                           
   117                           	psect	bssCOMRAM
   118  000001                     __pbssCOMRAM:
   119                           	callstack 0
   120  000001                     _buffer_lcd:
   121                           	callstack 0
   122  000001                     	ds	16
   123  000011                     _entero:
   124                           	callstack 0
   125  000011                     	ds	2
   126                           
   127                           	psect	cstackCOMRAM
   128  000013                     __pcstackCOMRAM:
   129                           	callstack 0
   130  000013                     ??_Lcd_Cmd:
   131  000013                     ??_Lcd_Chr_CP:
   132  000013                     ??_adcInit:
   133  000013                     ??_setServoAngle:
   134                           
   135                           ; 1 bytes @ 0x0
   136  000013                     	ds	1
   137  000014                     adcInit@ADC_PINs:
   138                           	callstack 0
   139  000014                     setServoAngle@angle:
   140                           	callstack 0
   141                           
   142                           ; 1 bytes @ 0x1
   143  000014                     	ds	1
   144  000015                     Lcd_Chr_CP@data:
   145                           	callstack 0
   146  000015                     Lcd_Cmd@data:
   147                           	callstack 0
   148  000015                     setServo@angle:
   149                           	callstack 0
   150                           
   151                           ; 1 bytes @ 0x2
   152  000015                     	ds	1
   153  000016                     ??_Lcd_Init:
   154  000016                     Lcd_Out@x:
   155                           	callstack 0
   156  000016                     setServo@i:
   157                           	callstack 0
   158                           
   159                           ; 1 bytes @ 0x3
   160  000016                     	ds	1
   161  000017                     Lcd_Init@i:
   162                           	callstack 0
   163  000017                     Lcd_Out@buffer:
   164                           	callstack 0
   165                           
   166                           ; 2 bytes @ 0x4
   167  000017                     	ds	2
   168  000019                     ??_Lcd_Out:
   169                           
   170                           ; 1 bytes @ 0x6
   171  000019                     	ds	2
   172  00001B                     Lcd_Out@y:
   173                           	callstack 0
   174                           
   175                           ; 1 bytes @ 0x8
   176  00001B                     	ds	1
   177  00001C                     Lcd_Out@data:
   178                           	callstack 0
   179                           
   180                           ; 1 bytes @ 0x9
   181  00001C                     	ds	1
   182  00001D                     ??_main:
   183                           
   184                           ; 1 bytes @ 0xA
   185  00001D                     	ds	2
   186                           
   187 ;;
   188 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   189 ;;
   190 ;; *************** function _main *****************
   191 ;; Defined at:
   192 ;;		line 18 in file "main.c"
   193 ;; Parameters:    Size  Location     Type
   194 ;;		None
   195 ;; Auto vars:     Size  Location     Type
   196 ;;		None
   197 ;; Return value:  Size  Location     Type
   198 ;;                  1    wreg      void 
   199 ;; Registers used:
   200 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   201 ;; Tracked objects:
   202 ;;		On entry : 0/0
   203 ;;		On exit  : 0/0
   204 ;;		Unchanged: 0/0
   205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   206 ;;      Params:         0       0       0       0       0       0       0       0       0
   207 ;;      Locals:         0       0       0       0       0       0       0       0       0
   208 ;;      Temps:          2       0       0       0       0       0       0       0       0
   209 ;;      Totals:         2       0       0       0       0       0       0       0       0
   210 ;;Total ram usage:        2 bytes
   211 ;; Hardware stack levels required when called:    2
   212 ;; This function calls:
   213 ;;		_Lcd_Cmd
   214 ;;		_Lcd_Init
   215 ;;		_Lcd_Out
   216 ;;		_adcInit
   217 ;;		_servoInit
   218 ;;		_setServo
   219 ;; This function is called by:
   220 ;;		Startup code after reset
   221 ;; This function uses a non-reentrant model
   222 ;;
   223                           
   224                           	psect	text0
   225  000B46                     __ptext0:
   226                           	callstack 0
   227  000B46                     _main:
   228                           	callstack 29
   229  000B46                     
   230                           ;main.c: 20:     Lcd_Init();
   231  000B46  EC43  F005         	call	_Lcd_Init	;wreg free
   232                           
   233                           ;main.c: 21:     Lcd_Cmd(1);
   234  000B4A  0E01               	movlw	1
   235  000B4C  ECAE  F004         	call	_Lcd_Cmd
   236                           
   237                           ;main.c: 22:     Lcd_Cmd(12);
   238  000B50  0E0C               	movlw	12
   239  000B52  ECAE  F004         	call	_Lcd_Cmd
   240  000B56                     
   241                           ;main.c: 23:      _delay((unsigned long)((100)*(12000000/4000.0)));
   242  000B56  0E02               	movlw	2
   243  000B58  6E1E               	movwf	(??_main+1)^0,c
   244  000B5A  0E86               	movlw	134
   245  000B5C  6E1D               	movwf	??_main^0,c
   246  000B5E  0E99               	movlw	153
   247  000B60                     u247:
   248  000B60  2EE8               	decfsz	wreg,f,c
   249  000B62  D7FE               	bra	u247
   250  000B64  2E1D               	decfsz	??_main^0,f,c
   251  000B66  D7FC               	bra	u247
   252  000B68  2E1E               	decfsz	(??_main+1)^0,f,c
   253  000B6A  D7FA               	bra	u247
   254  000B6C  F000               	nop	
   255  000B6E                     
   256                           ;main.c: 24:     Lcd_Out(1,0, (const int8_t*)"Bienvenidos");
   257  000B6E  0E00               	movlw	0
   258  000B70  6E16               	movwf	Lcd_Out@x^0,c
   259  000B72  0E01               	movlw	low STR_1
   260  000B74  6E17               	movwf	Lcd_Out@buffer^0,c
   261  000B76  0E08               	movlw	high STR_1
   262  000B78  6E18               	movwf	(Lcd_Out@buffer+1)^0,c
   263  000B7A  0E01               	movlw	1
   264  000B7C  ECFF  F005         	call	_Lcd_Out
   265  000B80                     
   266                           ;main.c: 25:     _delay((unsigned long)((1000)*(12000000/4000.0)));
   267  000B80  0E10               	movlw	16
   268  000B82  6E1E               	movwf	(??_main+1)^0,c
   269  000B84  0E39               	movlw	57
   270  000B86  6E1D               	movwf	??_main^0,c
   271  000B88  0E0E               	movlw	14
   272  000B8A                     u257:
   273  000B8A  2EE8               	decfsz	wreg,f,c
   274  000B8C  D7FE               	bra	u257
   275  000B8E  2E1D               	decfsz	??_main^0,f,c
   276  000B90  D7FC               	bra	u257
   277  000B92  2E1E               	decfsz	(??_main+1)^0,f,c
   278  000B94  D7FA               	bra	u257
   279  000B96                     
   280                           ;main.c: 26:     (Lcd_Cmd(1),_delay((unsigned long)((100)*(12000000/4000.0))));
   281  000B96  0E01               	movlw	1
   282  000B98  ECAE  F004         	call	_Lcd_Cmd
   283  000B9C  0E02               	movlw	2
   284  000B9E  6E1E               	movwf	(??_main+1)^0,c
   285  000BA0  0E86               	movlw	134
   286  000BA2  6E1D               	movwf	??_main^0,c
   287  000BA4  0E99               	movlw	153
   288  000BA6                     u267:
   289  000BA6  2EE8               	decfsz	wreg,f,c
   290  000BA8  D7FE               	bra	u267
   291  000BAA  2E1D               	decfsz	??_main^0,f,c
   292  000BAC  D7FC               	bra	u267
   293  000BAE  2E1E               	decfsz	(??_main+1)^0,f,c
   294  000BB0  D7FA               	bra	u267
   295  000BB2  F000               	nop	
   296  000BB4                     
   297                           ;main.c: 27:     adcInit(2);
   298  000BB4  0E02               	movlw	2
   299  000BB6  EC99  F006         	call	_adcInit
   300  000BBA                     
   301                           ;main.c: 28:     servoInit();
   302  000BBA  ECD8  F006         	call	_servoInit	;wreg free
   303  000BBE                     l1142:
   304                           
   305                           ;main.c: 30:     {;main.c: 39:         setServo(45);
   306  000BBE  0E2D               	movlw	45
   307  000BC0  ECBD  F006         	call	_setServo
   308  000BC4                     
   309                           ;main.c: 41:         _delay((unsigned long)((1000)*(12000000/4000.0)));
   310  000BC4  0E10               	movlw	16
   311  000BC6  6E1E               	movwf	(??_main+1)^0,c
   312  000BC8  0E39               	movlw	57
   313  000BCA  6E1D               	movwf	??_main^0,c
   314  000BCC  0E0E               	movlw	14
   315  000BCE                     u277:
   316  000BCE  2EE8               	decfsz	wreg,f,c
   317  000BD0  D7FE               	bra	u277
   318  000BD2  2E1D               	decfsz	??_main^0,f,c
   319  000BD4  D7FC               	bra	u277
   320  000BD6  2E1E               	decfsz	(??_main+1)^0,f,c
   321  000BD8  D7FA               	bra	u277
   322  000BDA                     
   323                           ;main.c: 42:         setServo(33);
   324  000BDA  0E21               	movlw	33
   325  000BDC  ECBD  F006         	call	_setServo
   326  000BE0                     
   327                           ;main.c: 43:         _delay((unsigned long)((1000)*(12000000/4000.0)));
   328  000BE0  0E10               	movlw	16
   329  000BE2  6E1E               	movwf	(??_main+1)^0,c
   330  000BE4  0E39               	movlw	57
   331  000BE6  6E1D               	movwf	??_main^0,c
   332  000BE8  0E0E               	movlw	14
   333  000BEA                     u287:
   334  000BEA  2EE8               	decfsz	wreg,f,c
   335  000BEC  D7FE               	bra	u287
   336  000BEE  2E1D               	decfsz	??_main^0,f,c
   337  000BF0  D7FC               	bra	u287
   338  000BF2  2E1E               	decfsz	(??_main+1)^0,f,c
   339  000BF4  D7FA               	bra	u287
   340  000BF6  EFDF  F005         	goto	l1142
   341  000BFA  EF00  F000         	goto	start
   342  000BFE                     __end_of_main:
   343                           	callstack 0
   344                           
   345 ;; *************** function _setServo *****************
   346 ;; Defined at:
   347 ;;		line 34 in file "servo.c"
   348 ;; Parameters:    Size  Location     Type
   349 ;;  angle           1    wreg     unsigned char 
   350 ;; Auto vars:     Size  Location     Type
   351 ;;  angle           1    2[COMRAM] unsigned char 
   352 ;;  i               1    3[COMRAM] unsigned char 
   353 ;; Return value:  Size  Location     Type
   354 ;;                  1    wreg      void 
   355 ;; Registers used:
   356 ;;		wreg, status,2, status,0, cstack
   357 ;; Tracked objects:
   358 ;;		On entry : 0/0
   359 ;;		On exit  : 0/0
   360 ;;		Unchanged: 0/0
   361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   362 ;;      Params:         0       0       0       0       0       0       0       0       0
   363 ;;      Locals:         2       0       0       0       0       0       0       0       0
   364 ;;      Temps:          0       0       0       0       0       0       0       0       0
   365 ;;      Totals:         2       0       0       0       0       0       0       0       0
   366 ;;Total ram usage:        2 bytes
   367 ;; Hardware stack levels used:    1
   368 ;; Hardware stack levels required when called:    1
   369 ;; This function calls:
   370 ;;		_setServoAngle
   371 ;; This function is called by:
   372 ;;		_main
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376                           	psect	text1
   377  000D7A                     __ptext1:
   378                           	callstack 0
   379  000D7A                     _setServo:
   380                           	callstack 29
   381                           
   382                           ;incstack = 0
   383                           ;setServo@angle stored from wreg
   384  000D7A  6E15               	movwf	setServo@angle^0,c
   385  000D7C                     
   386                           ;servo.c: 34: void setServo(uint8_t angle);servo.c: 35: {;servo.c: 36:     for(uint8_t i
      +                           = 0; i < 10; i++)
   387  000D7C  0E00               	movlw	0
   388  000D7E  6E16               	movwf	setServo@i^0,c
   389  000D80                     l1010:
   390                           
   391                           ;servo.c: 37:     {;servo.c: 38:         setServoAngle(angle);
   392  000D80  5015               	movf	setServo@angle^0,w,c
   393  000D82  EC51  F006         	call	_setServoAngle
   394  000D86                     
   395                           ;servo.c: 39:     }
   396  000D86  2A16               	incf	setServo@i^0,f,c
   397  000D88  0E09               	movlw	9
   398  000D8A  6416               	cpfsgt	setServo@i^0,c
   399  000D8C  EFCA  F006         	goto	u181
   400  000D90  EFCC  F006         	goto	u180
   401  000D94                     u181:
   402  000D94  EFC0  F006         	goto	l1010
   403  000D98                     u180:
   404  000D98  0012               	return		;funcret
   405  000D9A                     __end_of_setServo:
   406                           	callstack 0
   407                           
   408 ;; *************** function _setServoAngle *****************
   409 ;; Defined at:
   410 ;;		line 11 in file "servo.c"
   411 ;; Parameters:    Size  Location     Type
   412 ;;  angle           1    wreg     unsigned char 
   413 ;; Auto vars:     Size  Location     Type
   414 ;;  angle           1    1[COMRAM] unsigned char 
   415 ;; Return value:  Size  Location     Type
   416 ;;                  1    wreg      void 
   417 ;; Registers used:
   418 ;;		wreg, status,2, status,0
   419 ;; Tracked objects:
   420 ;;		On entry : 0/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   424 ;;      Params:         0       0       0       0       0       0       0       0       0
   425 ;;      Locals:         1       0       0       0       0       0       0       0       0
   426 ;;      Temps:          1       0       0       0       0       0       0       0       0
   427 ;;      Totals:         2       0       0       0       0       0       0       0       0
   428 ;;Total ram usage:        2 bytes
   429 ;; Hardware stack levels used:    1
   430 ;; This function calls:
   431 ;;		Nothing
   432 ;; This function is called by:
   433 ;;		_setServo
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437                           	psect	text2
   438  000CA2                     __ptext2:
   439                           	callstack 0
   440  000CA2                     _setServoAngle:
   441                           	callstack 29
   442                           
   443                           ;incstack = 0
   444                           ;setServoAngle@angle stored from wreg
   445  000CA2  6E14               	movwf	setServoAngle@angle^0,c
   446  000CA4                     
   447                           ;servo.c: 11: void setServoAngle(uint8_t angle);servo.c: 12: {;servo.c: 13:     TRISBbit
      +                          s.TRISB1 = 0;
   448  000CA4  9293               	bcf	147,1,c	;volatile
   449  000CA6                     
   450                           ;servo.c: 14:     TMR0 = angle;
   451  000CA6  C014  FFD6         	movff	setServoAngle@angle,4054	;volatile
   452  000CAA  6AD7               	clrf	215,c	;volatile
   453  000CAC                     
   454                           ;servo.c: 15:     INTCONbits.TMR0IF = 0;
   455  000CAC  94F2               	bcf	242,2,c	;volatile
   456  000CAE                     
   457                           ;servo.c: 16:     LATBbits.LATB1 = 1;
   458  000CAE  828A               	bsf	138,1,c	;volatile
   459  000CB0                     
   460                           ;servo.c: 17:     if(angle == 45 || angle == 1)
   461  000CB0  0E2D               	movlw	45
   462  000CB2  1814               	xorwf	setServoAngle@angle^0,w,c
   463  000CB4  B4D8               	btfsc	status,2,c
   464  000CB6  EF5F  F006         	goto	u101
   465  000CBA  EF61  F006         	goto	u100
   466  000CBE                     u101:
   467  000CBE  EF69  F006         	goto	l890
   468  000CC2                     u100:
   469  000CC2  0414               	decf	setServoAngle@angle^0,w,c
   470  000CC4  A4D8               	btfss	status,2,c
   471  000CC6  EF67  F006         	goto	u111
   472  000CCA  EF69  F006         	goto	u110
   473  000CCE                     u111:
   474  000CCE  EF72  F006         	goto	l892
   475  000CD2                     u110:
   476  000CD2                     l890:
   477                           
   478                           ;servo.c: 18:     {;servo.c: 19:         _delay((unsigned long)((2000)*(12000000/4000000
      +                          .0)));
   479  000CD2  0E08               	movlw	8
   480  000CD4  6E13               	movwf	??_setServoAngle^0,c
   481  000CD6  0ECA               	movlw	202
   482  000CD8                     u297:
   483  000CD8  2EE8               	decfsz	wreg,f,c
   484  000CDA  D7FE               	bra	u297
   485  000CDC  2E13               	decfsz	??_setServoAngle^0,f,c
   486  000CDE  D7FC               	bra	u297
   487                           
   488                           ;servo.c: 20:     }
   489  000CE0  EF8B  F006         	goto	l898
   490  000CE4                     l892:
   491  000CE4  0E21               	movlw	33
   492  000CE6  1814               	xorwf	setServoAngle@angle^0,w,c
   493  000CE8  B4D8               	btfsc	status,2,c
   494  000CEA  EF79  F006         	goto	u121
   495  000CEE  EF7B  F006         	goto	u120
   496  000CF2                     u121:
   497  000CF2  EF83  F006         	goto	l896
   498  000CF6                     u120:
   499  000CF6  5014               	movf	setServoAngle@angle^0,w,c
   500  000CF8  A4D8               	btfss	status,2,c
   501  000CFA  EF81  F006         	goto	u131
   502  000CFE  EF83  F006         	goto	u130
   503  000D02                     u131:
   504  000D02  EF8B  F006         	goto	l898
   505  000D06                     u130:
   506  000D06                     l896:
   507                           
   508                           ;servo.c: 22:     {;servo.c: 23:         _delay((unsigned long)((1000)*(12000000/4000000
      +                          .0)));
   509  000D06  0E04               	movlw	4
   510  000D08  6E13               	movwf	??_setServoAngle^0,c
   511  000D0A  0EE4               	movlw	228
   512  000D0C                     u307:
   513  000D0C  2EE8               	decfsz	wreg,f,c
   514  000D0E  D7FE               	bra	u307
   515  000D10  2E13               	decfsz	??_setServoAngle^0,f,c
   516  000D12  D7FC               	bra	u307
   517  000D14  D000               	nop2	
   518  000D16                     l898:
   519                           
   520                           ;servo.c: 25:     T0CONbits.TMR0ON =1;
   521  000D16  8ED5               	bsf	213,7,c	;volatile
   522                           
   523                           ;servo.c: 26:     while(!INTCONbits.TMR0IF)
   524  000D18  EF8F  F006         	goto	l148
   525  000D1C                     l149:
   526                           
   527                           ;servo.c: 27:     {;servo.c: 28:         LATBbits.LATB1 = 0;
   528  000D1C  928A               	bcf	138,1,c	;volatile
   529  000D1E                     l148:
   530                           
   531                           ;servo.c: 26:     while(!INTCONbits.TMR0IF)
   532  000D1E  A4F2               	btfss	242,2,c	;volatile
   533  000D20  EF94  F006         	goto	u141
   534  000D24  EF96  F006         	goto	u140
   535  000D28                     u141:
   536  000D28  EF8E  F006         	goto	l149
   537  000D2C                     u140:
   538  000D2C                     
   539                           ;servo.c: 30:     INTCONbits.TMR0IF = 0;
   540  000D2C  94F2               	bcf	242,2,c	;volatile
   541                           
   542                           ;servo.c: 31:     T0CONbits.TMR0ON =0;
   543  000D2E  9ED5               	bcf	213,7,c	;volatile
   544  000D30  0012               	return		;funcret
   545  000D32                     __end_of_setServoAngle:
   546                           	callstack 0
   547                           
   548 ;; *************** function _servoInit *****************
   549 ;; Defined at:
   550 ;;		line 3 in file "servo.c"
   551 ;; Parameters:    Size  Location     Type
   552 ;;		None
   553 ;; Auto vars:     Size  Location     Type
   554 ;;		None
   555 ;; Return value:  Size  Location     Type
   556 ;;                  1    wreg      void 
   557 ;; Registers used:
   558 ;;		wreg, status,2
   559 ;; Tracked objects:
   560 ;;		On entry : 0/0
   561 ;;		On exit  : 0/0
   562 ;;		Unchanged: 0/0
   563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   564 ;;      Params:         0       0       0       0       0       0       0       0       0
   565 ;;      Locals:         0       0       0       0       0       0       0       0       0
   566 ;;      Temps:          0       0       0       0       0       0       0       0       0
   567 ;;      Totals:         0       0       0       0       0       0       0       0       0
   568 ;;Total ram usage:        0 bytes
   569 ;; Hardware stack levels used:    1
   570 ;; This function calls:
   571 ;;		Nothing
   572 ;; This function is called by:
   573 ;;		_main
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           	psect	text3
   578  000DB0                     __ptext3:
   579                           	callstack 0
   580  000DB0                     _servoInit:
   581                           	callstack 30
   582  000DB0                     
   583                           ;servo.c: 5:     T0CONbits.T08BIT = 1;
   584  000DB0  8CD5               	bsf	213,6,c	;volatile
   585                           
   586                           ;servo.c: 6:     T0CONbits.T0CS = 0;
   587  000DB2  9AD5               	bcf	213,5,c	;volatile
   588                           
   589                           ;servo.c: 7:     T0CONbits.PSA = 0;
   590  000DB4  96D5               	bcf	213,3,c	;volatile
   591  000DB6                     
   592                           ;servo.c: 8:     T0CONbits.T0PS = 0b111;
   593  000DB6  0E07               	movlw	7
   594  000DB8  12D5               	iorwf	213,f,c	;volatile
   595  000DBA  0012               	return		;funcret
   596  000DBC                     __end_of_servoInit:
   597                           	callstack 0
   598                           
   599 ;; *************** function _adcInit *****************
   600 ;; Defined at:
   601 ;;		line 11 in file "adc.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  ADC_PINs        1    wreg     unsigned char 
   604 ;; Auto vars:     Size  Location     Type
   605 ;;  ADC_PINs        1    1[COMRAM] unsigned char 
   606 ;; Return value:  Size  Location     Type
   607 ;;                  1    wreg      void 
   608 ;; Registers used:
   609 ;;		wreg, status,2, status,0
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   615 ;;      Params:         0       0       0       0       0       0       0       0       0
   616 ;;      Locals:         1       0       0       0       0       0       0       0       0
   617 ;;      Temps:          1       0       0       0       0       0       0       0       0
   618 ;;      Totals:         2       0       0       0       0       0       0       0       0
   619 ;;Total ram usage:        2 bytes
   620 ;; Hardware stack levels used:    1
   621 ;; This function calls:
   622 ;;		Nothing
   623 ;; This function is called by:
   624 ;;		_main
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           	psect	text4
   629  000D32                     __ptext4:
   630                           	callstack 0
   631  000D32                     _adcInit:
   632                           	callstack 30
   633                           
   634                           ;incstack = 0
   635                           ;adcInit@ADC_PINs stored from wreg
   636  000D32  6E14               	movwf	adcInit@ADC_PINs^0,c
   637  000D34                     
   638                           ;adc.c: 11: void adcInit(uint8_t ADC_PINs);adc.c: 12: {;adc.c: 14:     if(ADC_PINs == 0)
   639  000D34  5014               	movf	adcInit@ADC_PINs^0,w,c
   640  000D36  A4D8               	btfss	status,2,c
   641  000D38  EFA0  F006         	goto	u151
   642  000D3C  EFA2  F006         	goto	u150
   643  000D40                     u151:
   644  000D40  EFA8  F006         	goto	l904
   645  000D44                     u150:
   646  000D44                     
   647                           ;adc.c: 15:     {;adc.c: 16:         ADCON1bits.PCFG = 0b1110;
   648  000D44  50C1               	movf	193,w,c	;volatile
   649  000D46  0BF0               	andlw	-16
   650  000D48  090E               	iorlw	14
   651  000D4A  6EC1               	movwf	193,c	;volatile
   652                           
   653                           ;adc.c: 17:     }
   654  000D4C  EFB0  F006         	goto	l906
   655  000D50                     l904:
   656                           
   657                           ;adc.c: 19:     {;adc.c: 20:         ADCON1bits.PCFG = 15 - ADC_PINs;
   658  000D50  5014               	movf	adcInit@ADC_PINs^0,w,c
   659  000D52  080F               	sublw	15
   660  000D54  6E13               	movwf	??_adcInit^0,c
   661  000D56  50C1               	movf	193,w,c	;volatile
   662  000D58  1813               	xorwf	??_adcInit^0,w,c
   663  000D5A  0BF0               	andlw	-16
   664  000D5C  1813               	xorwf	??_adcInit^0,w,c
   665  000D5E  6EC1               	movwf	193,c	;volatile
   666  000D60                     l906:
   667                           
   668                           ;adc.c: 26:     ADCON1bits.VCFG = 0b00;
   669  000D60  0ECF               	movlw	-49
   670  000D62  16C1               	andwf	193,f,c	;volatile
   671  000D64                     
   672                           ;adc.c: 31:     ADCON2bits.ACQT = 0b010;
   673  000D64  50C0               	movf	192,w,c	;volatile
   674  000D66  0BC7               	andlw	-57
   675  000D68  0910               	iorlw	16
   676  000D6A  6EC0               	movwf	192,c	;volatile
   677  000D6C                     
   678                           ;adc.c: 36:     ADCON2bits.ADCS = 3;
   679  000D6C  50C0               	movf	192,w,c	;volatile
   680  000D6E  0BF8               	andlw	-8
   681  000D70  0903               	iorlw	3
   682  000D72  6EC0               	movwf	192,c	;volatile
   683  000D74                     
   684                           ;adc.c: 39:     ADCON2bits.ADFM = 1;
   685  000D74  8EC0               	bsf	192,7,c	;volatile
   686  000D76                     
   687                           ;adc.c: 40:     ADCON0bits.ADON = 1;
   688  000D76  80C2               	bsf	194,0,c	;volatile
   689  000D78  0012               	return		;funcret
   690  000D7A                     __end_of_adcInit:
   691                           	callstack 0
   692                           
   693 ;; *************** function _Lcd_Out *****************
   694 ;; Defined at:
   695 ;;		line 95 in file "flex_lcd.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;  y               1    wreg     unsigned char 
   698 ;;  x               1    3[COMRAM] unsigned char 
   699 ;;  buffer          2    4[COMRAM] PTR const char 
   700 ;;		 -> STR_1(12), 
   701 ;; Auto vars:     Size  Location     Type
   702 ;;  y               1    8[COMRAM] unsigned char 
   703 ;;  data            1    9[COMRAM] unsigned char 
   704 ;; Return value:  Size  Location     Type
   705 ;;                  1    wreg      void 
   706 ;; Registers used:
   707 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   713 ;;      Params:         3       0       0       0       0       0       0       0       0
   714 ;;      Locals:         2       0       0       0       0       0       0       0       0
   715 ;;      Temps:          2       0       0       0       0       0       0       0       0
   716 ;;      Totals:         7       0       0       0       0       0       0       0       0
   717 ;;Total ram usage:        7 bytes
   718 ;; Hardware stack levels used:    1
   719 ;; Hardware stack levels required when called:    1
   720 ;; This function calls:
   721 ;;		_Lcd_Chr_CP
   722 ;;		_Lcd_Cmd
   723 ;; This function is called by:
   724 ;;		_main
   725 ;; This function uses a non-reentrant model
   726 ;;
   727                           
   728                           	psect	text5
   729  000BFE                     __ptext5:
   730                           	callstack 0
   731  000BFE                     _Lcd_Out:
   732                           	callstack 29
   733                           
   734                           ;incstack = 0
   735                           ;Lcd_Out@y stored from wreg
   736  000BFE  6E1B               	movwf	Lcd_Out@y^0,c
   737  000C00                     
   738                           ;flex_lcd.c: 95: void Lcd_Out(uint8_t y, uint8_t x, const int8_t *buffer);flex_lcd.c: 96
      +                          : {;flex_lcd.c: 97:     uint8_t data;;flex_lcd.c: 98:     switch (y)
   739  000C00  EF16  F006         	goto	l1112
   740  000C04                     l1102:
   741                           
   742                           ;flex_lcd.c: 101:             data = 128 + x;
   743  000C04  5016               	movf	Lcd_Out@x^0,w,c
   744  000C06  0F80               	addlw	128
   745  000C08  6E1C               	movwf	Lcd_Out@data^0,c
   746                           
   747                           ;flex_lcd.c: 102:             break;
   748  000C0A  EF33  F006         	goto	l1114
   749  000C0E                     l1104:
   750                           
   751                           ;flex_lcd.c: 104:             data = 192 + x;
   752  000C0E  5016               	movf	Lcd_Out@x^0,w,c
   753  000C10  0FC0               	addlw	192
   754  000C12  6E1C               	movwf	Lcd_Out@data^0,c
   755                           
   756                           ;flex_lcd.c: 105:             break;
   757  000C14  EF33  F006         	goto	l1114
   758  000C18                     l1106:
   759                           
   760                           ;flex_lcd.c: 107:             data = 148 + x;
   761  000C18  5016               	movf	Lcd_Out@x^0,w,c
   762  000C1A  0F94               	addlw	148
   763  000C1C  6E1C               	movwf	Lcd_Out@data^0,c
   764                           
   765                           ;flex_lcd.c: 108:             break;
   766  000C1E  EF33  F006         	goto	l1114
   767  000C22                     l1108:
   768                           
   769                           ;flex_lcd.c: 110:             data = 212 + x;
   770  000C22  5016               	movf	Lcd_Out@x^0,w,c
   771  000C24  0FD4               	addlw	212
   772  000C26  6E1C               	movwf	Lcd_Out@data^0,c
   773                           
   774                           ;flex_lcd.c: 111:             break;
   775  000C28  EF33  F006         	goto	l1114
   776  000C2C                     l1112:
   777  000C2C  501B               	movf	Lcd_Out@y^0,w,c
   778  000C2E  6E19               	movwf	??_Lcd_Out^0,c
   779  000C30  6A1A               	clrf	(??_Lcd_Out+1)^0,c
   780                           
   781                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   782                           ; Switch size 1, requested type "simple"
   783                           ; Number of cases is 1, Range of values is 0 to 0
   784                           ; switch strategies available:
   785                           ; Name         Instructions Cycles
   786                           ; simple_byte            4     3 (average)
   787                           ;	Chosen strategy is simple_byte
   788  000C32  501A               	movf	(??_Lcd_Out+1)^0,w,c
   789  000C34  0A00               	xorlw	0	; case 0
   790  000C36  B4D8               	btfsc	status,2,c
   791  000C38  EF20  F006         	goto	l1154
   792  000C3C  EF33  F006         	goto	l1114
   793  000C40                     l1154:
   794                           
   795                           ; Switch size 1, requested type "simple"
   796                           ; Number of cases is 4, Range of values is 1 to 4
   797                           ; switch strategies available:
   798                           ; Name         Instructions Cycles
   799                           ; simple_byte           13     7 (average)
   800                           ;	Chosen strategy is simple_byte
   801  000C40  5019               	movf	??_Lcd_Out^0,w,c
   802  000C42  0A01               	xorlw	1	; case 1
   803  000C44  B4D8               	btfsc	status,2,c
   804  000C46  EF02  F006         	goto	l1102
   805  000C4A  0A03               	xorlw	3	; case 2
   806  000C4C  B4D8               	btfsc	status,2,c
   807  000C4E  EF07  F006         	goto	l1104
   808  000C52  0A01               	xorlw	1	; case 3
   809  000C54  B4D8               	btfsc	status,2,c
   810  000C56  EF0C  F006         	goto	l1106
   811  000C5A  0A07               	xorlw	7	; case 4
   812  000C5C  B4D8               	btfsc	status,2,c
   813  000C5E  EF11  F006         	goto	l1108
   814  000C62  EF33  F006         	goto	l1114
   815  000C66                     l1114:
   816                           
   817                           ;flex_lcd.c: 115:     Lcd_Cmd(data);
   818  000C66  501C               	movf	Lcd_Out@data^0,w,c
   819  000C68  ECAE  F004         	call	_Lcd_Cmd
   820                           
   821                           ;flex_lcd.c: 116:     while(*buffer)
   822  000C6C  EF42  F006         	goto	l1120
   823  000C70                     l1116:
   824                           
   825                           ;flex_lcd.c: 117:     {;flex_lcd.c: 118:         Lcd_Chr_CP(*buffer);
   826  000C70  C017  FFF6         	movff	Lcd_Out@buffer,tblptrl
   827  000C74  C018  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
   828  000C78                     	if	0	;tblptru may be non-zero
   829  000C78                     	endif
   830  000C78                     	if	0	;tblptru may be non-zero
   831  000C78                     	endif
   832  000C78  0008               	tblrd		*
   833  000C7A  50F5               	movf	tablat,w,c
   834  000C7C  EC07  F004         	call	_Lcd_Chr_CP
   835  000C80                     
   836                           ;flex_lcd.c: 119:         buffer++;
   837  000C80  4A17               	infsnz	Lcd_Out@buffer^0,f,c
   838  000C82  2A18               	incf	(Lcd_Out@buffer+1)^0,f,c
   839  000C84                     l1120:
   840                           
   841                           ;flex_lcd.c: 116:     while(*buffer)
   842  000C84  C017  FFF6         	movff	Lcd_Out@buffer,tblptrl
   843  000C88  C018  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
   844  000C8C                     	if	0	;tblptru may be non-zero
   845  000C8C                     	endif
   846  000C8C                     	if	0	;tblptru may be non-zero
   847  000C8C                     	endif
   848  000C8C  0008               	tblrd		*
   849  000C8E  50F5               	movf	tablat,w,c
   850  000C90  0900               	iorlw	0
   851  000C92  A4D8               	btfss	status,2,c
   852  000C94  EF4E  F006         	goto	u231
   853  000C98  EF50  F006         	goto	u230
   854  000C9C                     u231:
   855  000C9C  EF38  F006         	goto	l1116
   856  000CA0                     u230:
   857  000CA0  0012               	return		;funcret
   858  000CA2                     __end_of_Lcd_Out:
   859                           	callstack 0
   860                           
   861 ;; *************** function _Lcd_Chr_CP *****************
   862 ;; Defined at:
   863 ;;		line 151 in file "flex_lcd.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;  data            1    wreg     char 
   866 ;; Auto vars:     Size  Location     Type
   867 ;;  data            1    2[COMRAM] char 
   868 ;; Return value:  Size  Location     Type
   869 ;;                  1    wreg      void 
   870 ;; Registers used:
   871 ;;		wreg, status,2, status,0
   872 ;; Tracked objects:
   873 ;;		On entry : 0/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   877 ;;      Params:         0       0       0       0       0       0       0       0       0
   878 ;;      Locals:         1       0       0       0       0       0       0       0       0
   879 ;;      Temps:          2       0       0       0       0       0       0       0       0
   880 ;;      Totals:         3       0       0       0       0       0       0       0       0
   881 ;;Total ram usage:        3 bytes
   882 ;; Hardware stack levels used:    1
   883 ;; This function calls:
   884 ;;		Nothing
   885 ;; This function is called by:
   886 ;;		_Lcd_Out
   887 ;;		_Lcd_Out2
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           	psect	text6
   892  00080E                     __ptext6:
   893                           	callstack 0
   894  00080E                     _Lcd_Chr_CP:
   895                           	callstack 29
   896                           
   897                           ;incstack = 0
   898                           ;Lcd_Chr_CP@data stored from wreg
   899  00080E  6E15               	movwf	Lcd_Chr_CP@data^0,c
   900  000810                     
   901                           ;flex_lcd.c: 151: void Lcd_Chr_CP(int8_t data);flex_lcd.c: 152: {;flex_lcd.c: 153:     L
      +                          ATDbits.LD3 = 0;
   902  000810  968C               	bcf	140,3,c	;volatile
   903                           
   904                           ;flex_lcd.c: 154:     LATDbits.LD2 = 1;
   905  000812  848C               	bsf	140,2,c	;volatile
   906  000814                     
   907                           ;flex_lcd.c: 155:     LATDbits.LD7 = (data & 0b10000000)>>7;
   908  000814  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   909  000818  0E07               	movlw	7
   910  00081A  6E14               	movwf	(??_Lcd_Chr_CP+1)^0,c
   911  00081C                     u45:
   912  00081C  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
   913  00081E  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   914  000820  2E14               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
   915  000822  EF0E  F004         	goto	u45
   916  000826  0E01               	movlw	1
   917  000828  1613               	andwf	??_Lcd_Chr_CP^0,f,c
   918  00082A  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   919  00082C  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   920  00082E  508C               	movf	140,w,c	;volatile
   921  000830  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   922  000832  0B7F               	andlw	-129
   923  000834  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   924  000836  6E8C               	movwf	140,c	;volatile
   925                           
   926                           ;flex_lcd.c: 156:     LATDbits.LD6 = (data & 0b01000000)>>6;
   927  000838  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   928  00083C  0E06               	movlw	6
   929  00083E  6E14               	movwf	(??_Lcd_Chr_CP+1)^0,c
   930  000840                     u55:
   931  000840  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
   932  000842  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   933  000844  2E14               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
   934  000846  EF20  F004         	goto	u55
   935  00084A  0E01               	movlw	1
   936  00084C  1613               	andwf	??_Lcd_Chr_CP^0,f,c
   937  00084E  3A13               	swapf	??_Lcd_Chr_CP^0,f,c
   938  000850  4613               	rlncf	??_Lcd_Chr_CP^0,f,c
   939  000852  4613               	rlncf	??_Lcd_Chr_CP^0,f,c
   940  000854  508C               	movf	140,w,c	;volatile
   941  000856  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   942  000858  0BBF               	andlw	-65
   943  00085A  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   944  00085C  6E8C               	movwf	140,c	;volatile
   945                           
   946                           ;flex_lcd.c: 157:     LATDbits.LD5 = (data & 0b00100000)>>5;
   947  00085E  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   948  000862  0E05               	movlw	5
   949  000864  6E14               	movwf	(??_Lcd_Chr_CP+1)^0,c
   950  000866                     u65:
   951  000866  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
   952  000868  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   953  00086A  2E14               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
   954  00086C  EF33  F004         	goto	u65
   955  000870  0E01               	movlw	1
   956  000872  1613               	andwf	??_Lcd_Chr_CP^0,f,c
   957  000874  3A13               	swapf	??_Lcd_Chr_CP^0,f,c
   958  000876  4613               	rlncf	??_Lcd_Chr_CP^0,f,c
   959  000878  508C               	movf	140,w,c	;volatile
   960  00087A  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   961  00087C  0BDF               	andlw	-33
   962  00087E  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   963  000880  6E8C               	movwf	140,c	;volatile
   964                           
   965                           ;flex_lcd.c: 158:     LATDbits.LD4 = (data & 0b00010000)>>4;
   966  000882  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   967  000886  0E04               	movlw	4
   968  000888  6E14               	movwf	(??_Lcd_Chr_CP+1)^0,c
   969  00088A                     u75:
   970  00088A  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
   971  00088C  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   972  00088E  2E14               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
   973  000890  EF45  F004         	goto	u75
   974  000894  0E01               	movlw	1
   975  000896  1613               	andwf	??_Lcd_Chr_CP^0,f,c
   976  000898  3A13               	swapf	??_Lcd_Chr_CP^0,f,c
   977  00089A  508C               	movf	140,w,c	;volatile
   978  00089C  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   979  00089E  0BEF               	andlw	-17
   980  0008A0  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   981  0008A2  6E8C               	movwf	140,c	;volatile
   982  0008A4                     
   983                           ;flex_lcd.c: 159:     _delay(10);
   984  0008A4  0E03               	movlw	3
   985  0008A6                     u317:
   986  0008A6  2EE8               	decfsz	wreg,f,c
   987  0008A8  D7FE               	bra	u317
   988  0008AA  F000               	nop	
   989  0008AC                     
   990                           ;flex_lcd.c: 160:     LATDbits.LD3 = 1;
   991  0008AC  868C               	bsf	140,3,c	;volatile
   992  0008AE                     
   993                           ;flex_lcd.c: 161:     _delay((unsigned long)((5)*(12000000/4000000.0)));
   994  0008AE  0E05               	movlw	5
   995  0008B0                     u327:
   996  0008B0  2EE8               	decfsz	wreg,f,c
   997  0008B2  D7FE               	bra	u327
   998  0008B4                     
   999                           ;flex_lcd.c: 162:     LATDbits.LD3 = 0;
  1000  0008B4  968C               	bcf	140,3,c	;volatile
  1001                           
  1002                           ;flex_lcd.c: 163:     LATDbits.LD7 = (data & 0b00001000)>>3;
  1003  0008B6  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1004  0008BA  0E03               	movlw	3
  1005  0008BC  6E14               	movwf	(??_Lcd_Chr_CP+1)^0,c
  1006  0008BE                     u85:
  1007  0008BE  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
  1008  0008C0  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
  1009  0008C2  2E14               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  1010  0008C4  EF5F  F004         	goto	u85
  1011  0008C8  0E01               	movlw	1
  1012  0008CA  1613               	andwf	??_Lcd_Chr_CP^0,f,c
  1013  0008CC  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
  1014  0008CE  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
  1015  0008D0  508C               	movf	140,w,c	;volatile
  1016  0008D2  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
  1017  0008D4  0B7F               	andlw	-129
  1018  0008D6  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
  1019  0008D8  6E8C               	movwf	140,c	;volatile
  1020                           
  1021                           ;flex_lcd.c: 164:     LATDbits.LD6 = (data & 0b00000100)>>2;
  1022  0008DA  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1023  0008DE  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
  1024  0008E0  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
  1025  0008E2  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
  1026  0008E4  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
  1027  0008E6  0E01               	movlw	1
  1028  0008E8  1613               	andwf	??_Lcd_Chr_CP^0,f,c
  1029  0008EA  3A13               	swapf	??_Lcd_Chr_CP^0,f,c
  1030  0008EC  4613               	rlncf	??_Lcd_Chr_CP^0,f,c
  1031  0008EE  4613               	rlncf	??_Lcd_Chr_CP^0,f,c
  1032  0008F0  508C               	movf	140,w,c	;volatile
  1033  0008F2  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
  1034  0008F4  0BBF               	andlw	-65
  1035  0008F6  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
  1036  0008F8  6E8C               	movwf	140,c	;volatile
  1037                           
  1038                           ;flex_lcd.c: 165:     LATDbits.LD5 = (data & 0b00000010)>>1;
  1039  0008FA  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1040  0008FE  0E01               	movlw	1
  1041  000900  6E14               	movwf	(??_Lcd_Chr_CP+1)^0,c
  1042  000902                     u95:
  1043  000902  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
  1044  000904  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
  1045  000906  2E14               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  1046  000908  EF81  F004         	goto	u95
  1047  00090C  0E01               	movlw	1
  1048  00090E  1613               	andwf	??_Lcd_Chr_CP^0,f,c
  1049  000910  3A13               	swapf	??_Lcd_Chr_CP^0,f,c
  1050  000912  4613               	rlncf	??_Lcd_Chr_CP^0,f,c
  1051  000914  508C               	movf	140,w,c	;volatile
  1052  000916  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
  1053  000918  0BDF               	andlw	-33
  1054  00091A  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
  1055  00091C  6E8C               	movwf	140,c	;volatile
  1056                           
  1057                           ;flex_lcd.c: 166:     LATDbits.LD4 = (data & 0b00000001);
  1058  00091E  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1059  000922  0E01               	movlw	1
  1060  000924  1613               	andwf	??_Lcd_Chr_CP^0,f,c
  1061  000926  3A13               	swapf	??_Lcd_Chr_CP^0,f,c
  1062  000928  508C               	movf	140,w,c	;volatile
  1063  00092A  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
  1064  00092C  0BEF               	andlw	-17
  1065  00092E  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
  1066  000930  6E8C               	movwf	140,c	;volatile
  1067  000932                     
  1068                           ;flex_lcd.c: 167:     _delay(10);
  1069  000932  0E03               	movlw	3
  1070  000934                     u337:
  1071  000934  2EE8               	decfsz	wreg,f,c
  1072  000936  D7FE               	bra	u337
  1073  000938  F000               	nop	
  1074  00093A                     
  1075                           ;flex_lcd.c: 168:     LATDbits.LD3 = 1;
  1076  00093A  868C               	bsf	140,3,c	;volatile
  1077  00093C                     
  1078                           ;flex_lcd.c: 169:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  1079  00093C  0E05               	movlw	5
  1080  00093E                     u347:
  1081  00093E  2EE8               	decfsz	wreg,f,c
  1082  000940  D7FE               	bra	u347
  1083  000942                     
  1084                           ;flex_lcd.c: 170:     LATDbits.LD3 = 0;
  1085  000942  968C               	bcf	140,3,c	;volatile
  1086  000944                     
  1087                           ;flex_lcd.c: 171:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  1088  000944  0E05               	movlw	5
  1089  000946                     u357:
  1090  000946  2EE8               	decfsz	wreg,f,c
  1091  000948  D7FE               	bra	u357
  1092  00094A                     
  1093                           ;flex_lcd.c: 172:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  1094  00094A  0E16               	movlw	22
  1095  00094C  6E13               	movwf	??_Lcd_Chr_CP^0,c
  1096  00094E  0E6C               	movlw	108
  1097  000950                     u367:
  1098  000950  2EE8               	decfsz	wreg,f,c
  1099  000952  D7FE               	bra	u367
  1100  000954  2E13               	decfsz	??_Lcd_Chr_CP^0,f,c
  1101  000956  D7FC               	bra	u367
  1102  000958  D000               	nop2	
  1103  00095A  0012               	return		;funcret
  1104  00095C                     __end_of_Lcd_Chr_CP:
  1105                           	callstack 0
  1106                           
  1107 ;; *************** function _Lcd_Init *****************
  1108 ;; Defined at:
  1109 ;;		line 31 in file "flex_lcd.c"
  1110 ;; Parameters:    Size  Location     Type
  1111 ;;		None
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;  i               1    4[COMRAM] unsigned char 
  1114 ;;  data            1    0        unsigned char 
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  1    wreg      void 
  1117 ;; Registers used:
  1118 ;;		wreg, status,2, status,0, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1124 ;;      Params:         0       0       0       0       0       0       0       0       0
  1125 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1126 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1127 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1128 ;;Total ram usage:        3 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; Hardware stack levels required when called:    1
  1131 ;; This function calls:
  1132 ;;		_Lcd_Cmd
  1133 ;; This function is called by:
  1134 ;;		_main
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           	psect	text7
  1139  000A86                     __ptext7:
  1140                           	callstack 0
  1141  000A86                     _Lcd_Init:
  1142                           	callstack 29
  1143  000A86                     
  1144                           ;flex_lcd.c: 33:     TRISDbits.TRISD7 = 0;
  1145  000A86  9E95               	bcf	149,7,c	;volatile
  1146                           
  1147                           ;flex_lcd.c: 34:     TRISDbits.TRISD6 = 0;
  1148  000A88  9C95               	bcf	149,6,c	;volatile
  1149                           
  1150                           ;flex_lcd.c: 35:     TRISDbits.TRISD5 = 0;
  1151  000A8A  9A95               	bcf	149,5,c	;volatile
  1152                           
  1153                           ;flex_lcd.c: 36:     TRISDbits.TRISD4 = 0;
  1154  000A8C  9895               	bcf	149,4,c	;volatile
  1155                           
  1156                           ;flex_lcd.c: 37:     TRISDbits.TRISD3 = 0;
  1157  000A8E  9695               	bcf	149,3,c	;volatile
  1158                           
  1159                           ;flex_lcd.c: 38:     TRISDbits.TRISD2 = 0;
  1160  000A90  9495               	bcf	149,2,c	;volatile
  1161  000A92                     
  1162                           ;flex_lcd.c: 39:     _delay((unsigned long)((34)*(12000000/4000.0)));
  1163  000A92  0E85               	movlw	133
  1164  000A94  6E16               	movwf	??_Lcd_Init^0,c
  1165  000A96  0E76               	movlw	118
  1166  000A98                     u377:
  1167  000A98  2EE8               	decfsz	wreg,f,c
  1168  000A9A  D7FE               	bra	u377
  1169  000A9C  2E16               	decfsz	??_Lcd_Init^0,f,c
  1170  000A9E  D7FC               	bra	u377
  1171  000AA0  D000               	nop2	
  1172  000AA2                     
  1173                           ;flex_lcd.c: 40:     for (uint8_t i = 0; i < 4; i++) {
  1174  000AA2  0E00               	movlw	0
  1175  000AA4  6E17               	movwf	Lcd_Init@i^0,c
  1176  000AA6                     l89:
  1177                           
  1178                           ;flex_lcd.c: 41:         LATDbits.LD7 = 0;
  1179  000AA6  9E8C               	bcf	140,7,c	;volatile
  1180                           
  1181                           ;flex_lcd.c: 42:         LATDbits.LD6 = 0;
  1182  000AA8  9C8C               	bcf	140,6,c	;volatile
  1183                           
  1184                           ;flex_lcd.c: 43:         LATDbits.LD5 = 1;
  1185  000AAA  8A8C               	bsf	140,5,c	;volatile
  1186                           
  1187                           ;flex_lcd.c: 44:         LATDbits.LD4 = 1;
  1188  000AAC  888C               	bsf	140,4,c	;volatile
  1189                           
  1190                           ;flex_lcd.c: 45:         LATDbits.LD3 = 0;
  1191  000AAE  968C               	bcf	140,3,c	;volatile
  1192                           
  1193                           ;flex_lcd.c: 46:         LATDbits.LD2 = 0;
  1194  000AB0  948C               	bcf	140,2,c	;volatile
  1195                           
  1196                           ;flex_lcd.c: 47:         LATDbits.LD7 = 0;
  1197  000AB2  9E8C               	bcf	140,7,c	;volatile
  1198                           
  1199                           ;flex_lcd.c: 48:         LATDbits.LD6 = 0;
  1200  000AB4  9C8C               	bcf	140,6,c	;volatile
  1201                           
  1202                           ;flex_lcd.c: 49:         LATDbits.LD5 = 1;
  1203  000AB6  8A8C               	bsf	140,5,c	;volatile
  1204                           
  1205                           ;flex_lcd.c: 50:         LATDbits.LD4 = 1;
  1206  000AB8  888C               	bsf	140,4,c	;volatile
  1207                           
  1208                           ;flex_lcd.c: 51:         LATDbits.LD3 = 1;
  1209  000ABA  868C               	bsf	140,3,c	;volatile
  1210                           
  1211                           ;flex_lcd.c: 52:         LATDbits.LD2 = 0;
  1212  000ABC  948C               	bcf	140,2,c	;volatile
  1213  000ABE                     
  1214                           ;flex_lcd.c: 53:         _delay((unsigned long)((5)*(12000000/4000000.0)));
  1215  000ABE  0E05               	movlw	5
  1216  000AC0                     u387:
  1217  000AC0  2EE8               	decfsz	wreg,f,c
  1218  000AC2  D7FE               	bra	u387
  1219  000AC4                     
  1220                           ;flex_lcd.c: 54:         LATDbits.LD7 = 0;
  1221  000AC4  9E8C               	bcf	140,7,c	;volatile
  1222  000AC6                     
  1223                           ;flex_lcd.c: 55:         LATDbits.LD6 = 0;
  1224  000AC6  9C8C               	bcf	140,6,c	;volatile
  1225  000AC8                     
  1226                           ;flex_lcd.c: 56:         LATDbits.LD5 = 1;
  1227  000AC8  8A8C               	bsf	140,5,c	;volatile
  1228  000ACA                     
  1229                           ;flex_lcd.c: 57:         LATDbits.LD4 = 1;
  1230  000ACA  888C               	bsf	140,4,c	;volatile
  1231  000ACC                     
  1232                           ;flex_lcd.c: 58:         LATDbits.LD3 = 0;
  1233  000ACC  968C               	bcf	140,3,c	;volatile
  1234  000ACE                     
  1235                           ;flex_lcd.c: 59:         LATDbits.LD2 = 0;
  1236  000ACE  948C               	bcf	140,2,c	;volatile
  1237                           
  1238                           ;flex_lcd.c: 60:         _delay((unsigned long)((5500)*(12000000/4000000.0)));
  1239  000AD0  0E16               	movlw	22
  1240  000AD2  6E16               	movwf	??_Lcd_Init^0,c
  1241  000AD4  0E6C               	movlw	108
  1242  000AD6                     u397:
  1243  000AD6  2EE8               	decfsz	wreg,f,c
  1244  000AD8  D7FE               	bra	u397
  1245  000ADA  2E16               	decfsz	??_Lcd_Init^0,f,c
  1246  000ADC  D7FC               	bra	u397
  1247  000ADE  D000               	nop2	
  1248  000AE0                     
  1249                           ;flex_lcd.c: 61:     }
  1250  000AE0  2A17               	incf	Lcd_Init@i^0,f,c
  1251  000AE2  0E03               	movlw	3
  1252  000AE4  6417               	cpfsgt	Lcd_Init@i^0,c
  1253  000AE6  EF77  F005         	goto	u161
  1254  000AEA  EF79  F005         	goto	u160
  1255  000AEE                     u161:
  1256  000AEE  EF53  F005         	goto	l89
  1257  000AF2                     u160:
  1258  000AF2                     
  1259                           ;flex_lcd.c: 62:     LATDbits.LD7 = 0;
  1260  000AF2  9E8C               	bcf	140,7,c	;volatile
  1261                           
  1262                           ;flex_lcd.c: 63:     LATDbits.LD6 = 0;
  1263  000AF4  9C8C               	bcf	140,6,c	;volatile
  1264                           
  1265                           ;flex_lcd.c: 64:     LATDbits.LD5 = 1;
  1266  000AF6  8A8C               	bsf	140,5,c	;volatile
  1267                           
  1268                           ;flex_lcd.c: 65:     LATDbits.LD4 = 0;
  1269  000AF8  988C               	bcf	140,4,c	;volatile
  1270                           
  1271                           ;flex_lcd.c: 66:     LATDbits.LD3 = 0;
  1272  000AFA  968C               	bcf	140,3,c	;volatile
  1273                           
  1274                           ;flex_lcd.c: 67:     LATDbits.LD2 = 0;
  1275  000AFC  948C               	bcf	140,2,c	;volatile
  1276                           
  1277                           ;flex_lcd.c: 68:     LATDbits.LD7 = 0;
  1278  000AFE  9E8C               	bcf	140,7,c	;volatile
  1279                           
  1280                           ;flex_lcd.c: 69:     LATDbits.LD6 = 0;
  1281  000B00  9C8C               	bcf	140,6,c	;volatile
  1282                           
  1283                           ;flex_lcd.c: 70:     LATDbits.LD5 = 1;
  1284  000B02  8A8C               	bsf	140,5,c	;volatile
  1285                           
  1286                           ;flex_lcd.c: 71:     LATDbits.LD4 = 0;
  1287  000B04  988C               	bcf	140,4,c	;volatile
  1288                           
  1289                           ;flex_lcd.c: 72:     LATDbits.LD3 = 1;
  1290  000B06  868C               	bsf	140,3,c	;volatile
  1291                           
  1292                           ;flex_lcd.c: 73:     LATDbits.LD2 = 0;
  1293  000B08  948C               	bcf	140,2,c	;volatile
  1294  000B0A                     
  1295                           ;flex_lcd.c: 74:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  1296  000B0A  0E05               	movlw	5
  1297  000B0C                     u407:
  1298  000B0C  2EE8               	decfsz	wreg,f,c
  1299  000B0E  D7FE               	bra	u407
  1300  000B10                     
  1301                           ;flex_lcd.c: 75:     LATDbits.LD7 = 0;
  1302  000B10  9E8C               	bcf	140,7,c	;volatile
  1303  000B12                     
  1304                           ;flex_lcd.c: 76:     LATDbits.LD6 = 0;
  1305  000B12  9C8C               	bcf	140,6,c	;volatile
  1306  000B14                     
  1307                           ;flex_lcd.c: 77:     LATDbits.LD5 = 1;
  1308  000B14  8A8C               	bsf	140,5,c	;volatile
  1309  000B16                     
  1310                           ;flex_lcd.c: 78:     LATDbits.LD4 = 0;
  1311  000B16  988C               	bcf	140,4,c	;volatile
  1312  000B18                     
  1313                           ;flex_lcd.c: 79:     LATDbits.LD3 = 0;
  1314  000B18  968C               	bcf	140,3,c	;volatile
  1315  000B1A                     
  1316                           ;flex_lcd.c: 80:     LATDbits.LD2 = 0;
  1317  000B1A  948C               	bcf	140,2,c	;volatile
  1318                           
  1319                           ;flex_lcd.c: 81:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  1320  000B1C  0E16               	movlw	22
  1321  000B1E  6E16               	movwf	??_Lcd_Init^0,c
  1322  000B20  0E6C               	movlw	108
  1323  000B22                     u417:
  1324  000B22  2EE8               	decfsz	wreg,f,c
  1325  000B24  D7FE               	bra	u417
  1326  000B26  2E16               	decfsz	??_Lcd_Init^0,f,c
  1327  000B28  D7FC               	bra	u417
  1328  000B2A  D000               	nop2	
  1329  000B2C                     
  1330                           ;flex_lcd.c: 85:     Lcd_Cmd(data);
  1331  000B2C  0E28               	movlw	40
  1332  000B2E  ECAE  F004         	call	_Lcd_Cmd
  1333  000B32                     
  1334                           ;flex_lcd.c: 87:     Lcd_Cmd(data);
  1335  000B32  0E10               	movlw	16
  1336  000B34  ECAE  F004         	call	_Lcd_Cmd
  1337  000B38                     
  1338                           ;flex_lcd.c: 89:     Lcd_Cmd(data);
  1339  000B38  0E01               	movlw	1
  1340  000B3A  ECAE  F004         	call	_Lcd_Cmd
  1341  000B3E                     
  1342                           ;flex_lcd.c: 91:     Lcd_Cmd(data);
  1343  000B3E  0E0F               	movlw	15
  1344  000B40  ECAE  F004         	call	_Lcd_Cmd
  1345  000B44  0012               	return		;funcret
  1346  000B46                     __end_of_Lcd_Init:
  1347                           	callstack 0
  1348                           
  1349 ;; *************** function _Lcd_Cmd *****************
  1350 ;; Defined at:
  1351 ;;		line 175 in file "flex_lcd.c"
  1352 ;; Parameters:    Size  Location     Type
  1353 ;;  data            1    wreg     unsigned char 
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;  data            1    2[COMRAM] unsigned char 
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  1    wreg      void 
  1358 ;; Registers used:
  1359 ;;		wreg, status,2, status,0
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1365 ;;      Params:         0       0       0       0       0       0       0       0       0
  1366 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1367 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1368 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1369 ;;Total ram usage:        3 bytes
  1370 ;; Hardware stack levels used:    1
  1371 ;; This function calls:
  1372 ;;		Nothing
  1373 ;; This function is called by:
  1374 ;;		_main
  1375 ;;		_Lcd_Init
  1376 ;;		_Lcd_Out
  1377 ;;		_Lcd_Out2
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text8
  1382  00095C                     __ptext8:
  1383                           	callstack 0
  1384  00095C                     _Lcd_Cmd:
  1385                           	callstack 29
  1386                           
  1387                           ;incstack = 0
  1388                           ;Lcd_Cmd@data stored from wreg
  1389  00095C  6E15               	movwf	Lcd_Cmd@data^0,c
  1390  00095E                     
  1391                           ;flex_lcd.c: 175: void Lcd_Cmd(uint8_t data);flex_lcd.c: 176: {;flex_lcd.c: 177:     LAT
      +                          Dbits.LD3 = 0; LATDbits.LD2 = 0;
  1392  00095E  968C               	bcf	140,3,c	;volatile
  1393  000960  948C               	bcf	140,2,c	;volatile
  1394  000962                     
  1395                           ;flex_lcd.c: 178:     LATDbits.LD7 = (data & 0b10000000)>>7;
  1396  000962  6A13               	clrf	??_Lcd_Cmd^0,c
  1397  000964  AE15               	btfss	Lcd_Cmd@data^0,7,c
  1398  000966  D001               	bra	u15
  1399  000968  2A13               	incf	??_Lcd_Cmd^0,f,c
  1400  00096A                     u15:
  1401  00096A  0E01               	movlw	1
  1402  00096C  1613               	andwf	??_Lcd_Cmd^0,f,c
  1403  00096E  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1404  000970  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1405  000972  508C               	movf	140,w,c	;volatile
  1406  000974  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1407  000976  0B7F               	andlw	-129
  1408  000978  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1409  00097A  6E8C               	movwf	140,c	;volatile
  1410                           
  1411                           ;flex_lcd.c: 179:     LATDbits.LD6 = (data & 0b01000000)>>6;
  1412  00097C  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1413  000980  0E06               	movlw	6
  1414  000982  6E14               	movwf	(??_Lcd_Cmd+1)^0,c
  1415  000984                     u25:
  1416  000984  90D8               	bcf	status,0,c
  1417  000986  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1418  000988  2E14               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  1419  00098A  EFC2  F004         	goto	u25
  1420  00098E  0E01               	movlw	1
  1421  000990  1613               	andwf	??_Lcd_Cmd^0,f,c
  1422  000992  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1423  000994  4613               	rlncf	??_Lcd_Cmd^0,f,c
  1424  000996  4613               	rlncf	??_Lcd_Cmd^0,f,c
  1425  000998  508C               	movf	140,w,c	;volatile
  1426  00099A  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1427  00099C  0BBF               	andlw	-65
  1428  00099E  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1429  0009A0  6E8C               	movwf	140,c	;volatile
  1430                           
  1431                           ;flex_lcd.c: 180:     LATDbits.LD5 = (data & 0b00100000)>>5;
  1432  0009A2  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1433  0009A6  0E05               	movlw	5
  1434  0009A8  6E14               	movwf	(??_Lcd_Cmd+1)^0,c
  1435  0009AA                     u35:
  1436  0009AA  90D8               	bcf	status,0,c
  1437  0009AC  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1438  0009AE  2E14               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  1439  0009B0  EFD5  F004         	goto	u35
  1440  0009B4  0E01               	movlw	1
  1441  0009B6  1613               	andwf	??_Lcd_Cmd^0,f,c
  1442  0009B8  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1443  0009BA  4613               	rlncf	??_Lcd_Cmd^0,f,c
  1444  0009BC  508C               	movf	140,w,c	;volatile
  1445  0009BE  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1446  0009C0  0BDF               	andlw	-33
  1447  0009C2  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1448  0009C4  6E8C               	movwf	140,c	;volatile
  1449                           
  1450                           ;flex_lcd.c: 181:     LATDbits.LD4 = (data & 0b00010000)>>4;
  1451  0009C6  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1452  0009CA  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1453  0009CC  0E0F               	movlw	15
  1454  0009CE  1613               	andwf	??_Lcd_Cmd^0,f,c
  1455  0009D0  0E01               	movlw	1
  1456  0009D2  1613               	andwf	??_Lcd_Cmd^0,f,c
  1457  0009D4  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1458  0009D6  508C               	movf	140,w,c	;volatile
  1459  0009D8  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1460  0009DA  0BEF               	andlw	-17
  1461  0009DC  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1462  0009DE  6E8C               	movwf	140,c	;volatile
  1463  0009E0                     
  1464                           ;flex_lcd.c: 182:     _delay(10);
  1465  0009E0  0E03               	movlw	3
  1466  0009E2                     u427:
  1467  0009E2  2EE8               	decfsz	wreg,f,c
  1468  0009E4  D7FE               	bra	u427
  1469  0009E6  F000               	nop	
  1470  0009E8                     
  1471                           ;flex_lcd.c: 183:     LATDbits.LD3 = 1;
  1472  0009E8  868C               	bsf	140,3,c	;volatile
  1473  0009EA                     
  1474                           ;flex_lcd.c: 184:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  1475  0009EA  0E05               	movlw	5
  1476  0009EC                     u437:
  1477  0009EC  2EE8               	decfsz	wreg,f,c
  1478  0009EE  D7FE               	bra	u437
  1479  0009F0                     
  1480                           ;flex_lcd.c: 185:     LATDbits.LD3 = 0;
  1481  0009F0  968C               	bcf	140,3,c	;volatile
  1482                           
  1483                           ;flex_lcd.c: 186:     LATDbits.LD7 = (data & 0b00001000)>>3;
  1484  0009F2  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1485  0009F6  90D8               	bcf	status,0,c
  1486  0009F8  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1487  0009FA  90D8               	bcf	status,0,c
  1488  0009FC  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1489  0009FE  90D8               	bcf	status,0,c
  1490  000A00  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1491  000A02  0E01               	movlw	1
  1492  000A04  1613               	andwf	??_Lcd_Cmd^0,f,c
  1493  000A06  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1494  000A08  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1495  000A0A  508C               	movf	140,w,c	;volatile
  1496  000A0C  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1497  000A0E  0B7F               	andlw	-129
  1498  000A10  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1499  000A12  6E8C               	movwf	140,c	;volatile
  1500                           
  1501                           ;flex_lcd.c: 187:     LATDbits.LD6 = (data & 0b00000100)>>2;
  1502  000A14  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1503  000A18  90D8               	bcf	status,0,c
  1504  000A1A  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1505  000A1C  90D8               	bcf	status,0,c
  1506  000A1E  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1507  000A20  0E01               	movlw	1
  1508  000A22  1613               	andwf	??_Lcd_Cmd^0,f,c
  1509  000A24  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1510  000A26  4613               	rlncf	??_Lcd_Cmd^0,f,c
  1511  000A28  4613               	rlncf	??_Lcd_Cmd^0,f,c
  1512  000A2A  508C               	movf	140,w,c	;volatile
  1513  000A2C  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1514  000A2E  0BBF               	andlw	-65
  1515  000A30  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1516  000A32  6E8C               	movwf	140,c	;volatile
  1517                           
  1518                           ;flex_lcd.c: 188:     LATDbits.LD5 = (data & 0b00000010)>>1;
  1519  000A34  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1520  000A38  90D8               	bcf	status,0,c
  1521  000A3A  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1522  000A3C  0E01               	movlw	1
  1523  000A3E  1613               	andwf	??_Lcd_Cmd^0,f,c
  1524  000A40  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1525  000A42  4613               	rlncf	??_Lcd_Cmd^0,f,c
  1526  000A44  508C               	movf	140,w,c	;volatile
  1527  000A46  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1528  000A48  0BDF               	andlw	-33
  1529  000A4A  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1530  000A4C  6E8C               	movwf	140,c	;volatile
  1531                           
  1532                           ;flex_lcd.c: 189:     LATDbits.LD4 = (data & 0b00000001);
  1533  000A4E  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1534  000A52  0E01               	movlw	1
  1535  000A54  1613               	andwf	??_Lcd_Cmd^0,f,c
  1536  000A56  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1537  000A58  508C               	movf	140,w,c	;volatile
  1538  000A5A  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1539  000A5C  0BEF               	andlw	-17
  1540  000A5E  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1541  000A60  6E8C               	movwf	140,c	;volatile
  1542  000A62                     
  1543                           ;flex_lcd.c: 190:     _delay(10);
  1544  000A62  0E03               	movlw	3
  1545  000A64                     u447:
  1546  000A64  2EE8               	decfsz	wreg,f,c
  1547  000A66  D7FE               	bra	u447
  1548  000A68  F000               	nop	
  1549  000A6A                     
  1550                           ;flex_lcd.c: 191:     LATDbits.LD3 = 1;
  1551  000A6A  868C               	bsf	140,3,c	;volatile
  1552  000A6C                     
  1553                           ;flex_lcd.c: 192:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  1554  000A6C  0E05               	movlw	5
  1555  000A6E                     u457:
  1556  000A6E  2EE8               	decfsz	wreg,f,c
  1557  000A70  D7FE               	bra	u457
  1558  000A72                     
  1559                           ;flex_lcd.c: 193:     LATDbits.LD3 = 0;
  1560  000A72  968C               	bcf	140,3,c	;volatile
  1561  000A74                     
  1562                           ;flex_lcd.c: 194:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  1563  000A74  0E16               	movlw	22
  1564  000A76  6E13               	movwf	??_Lcd_Cmd^0,c
  1565  000A78  0E6C               	movlw	108
  1566  000A7A                     u467:
  1567  000A7A  2EE8               	decfsz	wreg,f,c
  1568  000A7C  D7FE               	bra	u467
  1569  000A7E  2E13               	decfsz	??_Lcd_Cmd^0,f,c
  1570  000A80  D7FC               	bra	u467
  1571  000A82  D000               	nop2	
  1572  000A84  0012               	return		;funcret
  1573  000A86                     __end_of_Lcd_Cmd:
  1574                           	callstack 0
  1575                           
  1576                           	psect	rparam
  1577  0000                     
  1578                           	psect	idloc
  1579                           
  1580                           ;Config register IDLOC0 @ 0x200000
  1581                           ;	unspecified, using default values
  1582  200000                     	org	2097152
  1583  200000  FF                 	db	255
  1584                           
  1585                           ;Config register IDLOC1 @ 0x200001
  1586                           ;	unspecified, using default values
  1587  200001                     	org	2097153
  1588  200001  FF                 	db	255
  1589                           
  1590                           ;Config register IDLOC2 @ 0x200002
  1591                           ;	unspecified, using default values
  1592  200002                     	org	2097154
  1593  200002  FF                 	db	255
  1594                           
  1595                           ;Config register IDLOC3 @ 0x200003
  1596                           ;	unspecified, using default values
  1597  200003                     	org	2097155
  1598  200003  FF                 	db	255
  1599                           
  1600                           ;Config register IDLOC4 @ 0x200004
  1601                           ;	unspecified, using default values
  1602  200004                     	org	2097156
  1603  200004  FF                 	db	255
  1604                           
  1605                           ;Config register IDLOC5 @ 0x200005
  1606                           ;	unspecified, using default values
  1607  200005                     	org	2097157
  1608  200005  FF                 	db	255
  1609                           
  1610                           ;Config register IDLOC6 @ 0x200006
  1611                           ;	unspecified, using default values
  1612  200006                     	org	2097158
  1613  200006  FF                 	db	255
  1614                           
  1615                           ;Config register IDLOC7 @ 0x200007
  1616                           ;	unspecified, using default values
  1617  200007                     	org	2097159
  1618  200007  FF                 	db	255
  1619                           
  1620                           	psect	config
  1621                           
  1622                           ;Config register CONFIG1L @ 0x300000
  1623                           ;	PLL Prescaler Selection bits
  1624                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1625                           ;	System Clock Postscaler Selection bits
  1626                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1627                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1628                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1629  300000                     	org	3145728
  1630  300000  00                 	db	0
  1631                           
  1632                           ;Config register CONFIG1H @ 0x300001
  1633                           ;	Oscillator Selection bits
  1634                           ;	FOSC = HS, HS oscillator (HS)
  1635                           ;	Fail-Safe Clock Monitor Enable bit
  1636                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1637                           ;	Internal/External Oscillator Switchover bit
  1638                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1639  300001                     	org	3145729
  1640  300001  0C                 	db	12
  1641                           
  1642                           ;Config register CONFIG2L @ 0x300002
  1643                           ;	Power-up Timer Enable bit
  1644                           ;	PWRT = OFF, PWRT disabled
  1645                           ;	Brown-out Reset Enable bits
  1646                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1647                           ;	Brown-out Reset Voltage bits
  1648                           ;	BORV = 3, Minimum setting 2.05V
  1649                           ;	USB Voltage Regulator Enable bit
  1650                           ;	VREGEN = OFF, USB voltage regulator disabled
  1651  300002                     	org	3145730
  1652  300002  19                 	db	25
  1653                           
  1654                           ;Config register CONFIG2H @ 0x300003
  1655                           ;	Watchdog Timer Enable bit
  1656                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1657                           ;	Watchdog Timer Postscale Select bits
  1658                           ;	WDTPS = 32768, 1:32768
  1659  300003                     	org	3145731
  1660  300003  1E                 	db	30
  1661                           
  1662                           ; Padding undefined space
  1663  300004                     	org	3145732
  1664  300004  FF                 	db	255
  1665                           
  1666                           ;Config register CONFIG3H @ 0x300005
  1667                           ;	CCP2 MUX bit
  1668                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1669                           ;	PORTB A/D Enable bit
  1670                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1671                           ;	Low-Power Timer 1 Oscillator Enable bit
  1672                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1673                           ;	MCLR Pin Enable bit
  1674                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1675  300005                     	org	3145733
  1676  300005  81                 	db	129
  1677                           
  1678                           ;Config register CONFIG4L @ 0x300006
  1679                           ;	Stack Full/Underflow Reset Enable bit
  1680                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1681                           ;	Single-Supply ICSP Enable bit
  1682                           ;	LVP = OFF, Single-Supply ICSP disabled
  1683                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1684                           ;	ICPRT = OFF, ICPORT disabled
  1685                           ;	Extended Instruction Set Enable bit
  1686                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1687                           ;	Background Debugger Enable bit
  1688                           ;	DEBUG = 0x1, unprogrammed default
  1689  300006                     	org	3145734
  1690  300006  81                 	db	129
  1691                           
  1692                           ; Padding undefined space
  1693  300007                     	org	3145735
  1694  300007  FF                 	db	255
  1695                           
  1696                           ;Config register CONFIG5L @ 0x300008
  1697                           ;	Code Protection bit
  1698                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1699                           ;	Code Protection bit
  1700                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1701                           ;	Code Protection bit
  1702                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1703                           ;	Code Protection bit
  1704                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1705  300008                     	org	3145736
  1706  300008  0F                 	db	15
  1707                           
  1708                           ;Config register CONFIG5H @ 0x300009
  1709                           ;	Boot Block Code Protection bit
  1710                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1711                           ;	Data EEPROM Code Protection bit
  1712                           ;	CPD = OFF, Data EEPROM is not code-protected
  1713  300009                     	org	3145737
  1714  300009  C0                 	db	192
  1715                           
  1716                           ;Config register CONFIG6L @ 0x30000A
  1717                           ;	Write Protection bit
  1718                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1719                           ;	Write Protection bit
  1720                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1721                           ;	Write Protection bit
  1722                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1723                           ;	Write Protection bit
  1724                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1725  30000A                     	org	3145738
  1726  30000A  0F                 	db	15
  1727                           
  1728                           ;Config register CONFIG6H @ 0x30000B
  1729                           ;	Configuration Register Write Protection bit
  1730                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1731                           ;	Boot Block Write Protection bit
  1732                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1733                           ;	Data EEPROM Write Protection bit
  1734                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1735  30000B                     	org	3145739
  1736  30000B  E0                 	db	224
  1737                           
  1738                           ;Config register CONFIG7L @ 0x30000C
  1739                           ;	Table Read Protection bit
  1740                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1741                           ;	Table Read Protection bit
  1742                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1743                           ;	Table Read Protection bit
  1744                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1745                           ;	Table Read Protection bit
  1746                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1747  30000C                     	org	3145740
  1748  30000C  0F                 	db	15
  1749                           
  1750                           ;Config register CONFIG7H @ 0x30000D
  1751                           ;	Boot Block Table Read Protection bit
  1752                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1753  30000D                     	org	3145741
  1754  30000D  40                 	db	64
  1755                           tosu	equ	0xFFF
  1756                           tosh	equ	0xFFE
  1757                           tosl	equ	0xFFD
  1758                           stkptr	equ	0xFFC
  1759                           pclatu	equ	0xFFB
  1760                           pclath	equ	0xFFA
  1761                           pcl	equ	0xFF9
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           prodh	equ	0xFF4
  1767                           prodl	equ	0xFF3
  1768                           indf0	equ	0xFEF
  1769                           postinc0	equ	0xFEE
  1770                           postdec0	equ	0xFED
  1771                           preinc0	equ	0xFEC
  1772                           plusw0	equ	0xFEB
  1773                           fsr0h	equ	0xFEA
  1774                           fsr0l	equ	0xFE9
  1775                           wreg	equ	0xFE8
  1776                           indf1	equ	0xFE7
  1777                           postinc1	equ	0xFE6
  1778                           postdec1	equ	0xFE5
  1779                           preinc1	equ	0xFE4
  1780                           plusw1	equ	0xFE3
  1781                           fsr1h	equ	0xFE2
  1782                           fsr1l	equ	0xFE1
  1783                           bsr	equ	0xFE0
  1784                           indf2	equ	0xFDF
  1785                           postinc2	equ	0xFDE
  1786                           postdec2	equ	0xFDD
  1787                           preinc2	equ	0xFDC
  1788                           plusw2	equ	0xFDB
  1789                           fsr2h	equ	0xFDA
  1790                           fsr2l	equ	0xFD9
  1791                           status	equ	0xFD8

Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      30
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_Out@buffer	PTR const char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Out
    _setServo->_setServoAngle
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1053
                                             10 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                            _adcInit
                          _servoInit
                           _setServo
 ---------------------------------------------------------------------------------
 (1) _setServo                                             2     2      0     120
                                              2 COMRAM     2     2      0
                      _setServoAngle
 ---------------------------------------------------------------------------------
 (2) _setServoAngle                                        2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _servoInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              7     4      3     573
                                              3 COMRAM     7     4      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             3     3      0     210
                                              3 COMRAM     3     3      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _adcInit
   _servoInit
   _setServo
     _setServoAngle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C      1E       1       31.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1E      20        0.0%
DATA                 0      0      1E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu May 27 16:30:42 2021

                     l17 0D78                       l90 0AF2                       l91 0B44  
                     l89 0AA6                       u15 096A                       u25 0984  
                     u35 09AA                       u45 081C                       u55 0840  
                     u65 0866                       u75 088A                       u85 08BE  
                     u95 0902                      l120 095A                      l104 0CA0  
                    l123 0A84                      l150 0D2C                      l151 0D30  
                    l138 0DBA                      l148 0D1E                      l156 0D98  
                    l149 0D1C                      l900 0D34                      l910 0D6C  
                    l902 0D44                      l840 09EA                      l832 095E  
                    l920 0AA2                      l912 0D74                      l904 0D50  
                    l850 0A72                      l842 09F0                      l834 0962  
                    l930 0AC6                      l914 0D76                      l906 0D60  
                    l852 0A74                      l844 0A62                      l836 09E0  
                    l940 0AE0                      l932 0AC8                      l916 0A86  
                    l860 08AC                      l908 0D64                      l846 0A6A  
                    l838 09E8                      l950 0B16                      l942 0B0A  
                    l934 0ACA                      l926 0ABE                      l918 0A92  
                    l870 093C                      l862 08AE                      l854 0810  
                    l848 0A6C                      l960 0B2C                      l952 0B18  
                    l944 0B10                      l936 0ACC                      l928 0AC4  
                    l872 0942                      l864 08B4                      l856 0814  
                    l880 0CA6                      l970 0B3E                      l962 0B32  
                    l954 0B1A                      l946 0B12                      l938 0ACE  
                    l874 0944                      l866 0932                      l858 08A4  
                    l890 0CD2                      l882 0CAC                      l972 0B3E  
                    l964 0B32                      l956 0B2C                      l948 0B14  
                    l876 094A                      l868 093A                      l892 0CE4  
                    l884 0CAE                      l966 0B38                      l958 0B2C  
                    l894 0CF6                      l886 0CB0                      l878 0CA4  
                    l968 0B38                      l896 0D06                      l888 0CC2  
                    l898 0D16          adcInit@ADC_PINs 0014                      u100 0CC2  
                    u101 0CBE                      u110 0CD2                      u111 0CCE  
                    u120 0CF6                      u121 0CF2                      u130 0D06  
                    u131 0D02                      u140 0D2C                      u141 0D28  
                    u230 0CA0                      u150 0D44                      u231 0C9C  
                    u151 0D40                      u160 0AF2                      u161 0AEE  
                    u307 0D0C                      u180 0D98                      u317 08A6  
                    u181 0D94                      u407 0B0C                      u327 08B0  
                    u247 0B60                      u417 0B22                      u337 0934  
                    u257 0B8A                      u427 09E2                      u347 093E  
                    u267 0BA6                      u437 09EC                      u357 0946  
                    u277 0BCE                      u447 0A64                      u367 0950  
                    u287 0BEA                      u457 0A6E                      u377 0A98  
                    u297 0CD8                      u467 0A7A                      u387 0AC0  
                    u397 0AD6                      wreg 000FE8                     l1000 0DB0  
                   l1002 0DB6                     l1010 0D80                     l1100 0C00  
                   l1012 0D86                     l1004 0D7C                     l1102 0C04  
                   l1014 0D88                     l1120 0C84                     l1104 0C0E  
                   l1112 0C2C                     l1106 0C18                     l1114 0C66  
                   l1130 0B6E                     l1116 0C70                     l1108 0C22  
                   l1140 0BBA                     l1132 0B80                     l1118 0C80  
                   l1142 0BBE                     l1134 0B96                     l1126 0B46  
                   l1144 0BC4                     l1136 0B9C                     l1128 0B56  
                   l1154 0C40                     l1146 0BDA                     l1138 0BB4  
                   l1148 0BE0                     STR_1 0801                     _TMR0 000FD6  
                   _main 0B46                     start 0000          __end_of_Lcd_Cmd 0A86  
        __end_of_Lcd_Out 0CA2             ___param_bank 000000               _Lcd_Chr_CP 080E  
                  ?_main 0013          __end_of_adcInit 0D7A                    _ADRES 000FC3  
                  _PORTB 000F81                    tablat 000FF5                    status 000FD8  
       __end_of_Lcd_Init 0B46          __initialization 0D9A             __end_of_main 0BFE  
                 ??_main 001D            __activetblptr 000002    __end_of_setServoAngle 0D32  
              ??_Lcd_Cmd 0013                ??_Lcd_Out 0019              ?_Lcd_Chr_CP 0013  
              ??_adcInit 0013                   _entero 0011                   clear_0 0DA0  
       __end_of_setServo 0D9A             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8       setServoAngle@angle 0014  
             __accesstop 0060  __end_of__initialization 0DA6            ___rparam_used 000001  
         __pcstackCOMRAM 0013                ?_Lcd_Init 0013      __size_of_Lcd_Chr_CP 014E  
     __size_of_servoInit 000C               _buffer_lcd 0001               ??_Lcd_Init 0016  
                _Lcd_Cmd 095C                  _Lcd_Out 0BFE                  __Hparam 0000  
              ?_setServo 0013                  __Lparam 0000                  _adcInit 0D32  
           __psmallconst 0800                  __pcinit 0D9A                  __ramtop 0800  
                __ptext0 0B46                  __ptext1 0D7A                  __ptext2 0CA2  
                __ptext3 0DB0                  __ptext4 0D32                  __ptext5 0BFE  
                __ptext6 080E                  __ptext7 0A86                  __ptext8 095C  
              _T0CONbits 000FD5     end_of_initialization 0DA6            __Lmediumconst 0000  
      __end_of_servoInit 0DBC               ??_setServo 0015                Lcd_Init@i 0017  
           ??_Lcd_Chr_CP 0013                  postinc0 000FEE                _PORTBbits 000F81  
              _TRISBbits 000F93                _TRISDbits 000F95       __end_of_Lcd_Chr_CP 095C  
 __size_of_setServoAngle 0090            setServo@angle 0015      start_initialization 0D9A  
          Lcd_Out@buffer 0017        __size_of_Lcd_Init 00C0              __pbssCOMRAM 0001  
          _setServoAngle 0CA2                 ?_Lcd_Cmd 0013                 ?_Lcd_Out 0016  
      __size_of_setServo 0020                 ?_adcInit 0013              __smallconst 0800  
         ?_setServoAngle 0013                 _LATBbits 000F8A                 _LATDbits 000F8C  
               _GO_nDONE 007E11                 Lcd_Out@x 0016                 Lcd_Out@y 001B  
              _servoInit 0DB0               _ADCON0bits 000FC2               _ADCON1bits 000FC1  
             _ADCON2bits 000FC0                 _Lcd_Init 0A86         __size_of_Lcd_Cmd 012A  
       __size_of_Lcd_Out 00A4                 __Hrparam 0000                 __Lrparam 0000  
             ?_servoInit 0013         __size_of_adcInit 0048          ??_setServoAngle 0013  
         Lcd_Chr_CP@data 0015                setServo@i 0016              Lcd_Cmd@data 0015  
          __size_of_main 00B8                 _setServo 0D7A              Lcd_Out@data 001C  
             _INTCONbits 000FF2              ??_servoInit 0013  
