

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu May 27 15:49:51 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21  0000                     
    22                           ; Version 2.20
    23                           ; Generated 12/02/2020 GMT
    24                           ; 
    25                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _TMR0	set	4054
    57  0000                     _ADRES	set	4035
    58  0000                     _LATBbits	set	3978
    59  0000                     _INTCONbits	set	4082
    60  0000                     _TRISBbits	set	3987
    61  0000                     _T0CONbits	set	4053
    62  0000                     _LATDbits	set	3980
    63  0000                     _TRISDbits	set	3989
    64  0000                     _PORTBbits	set	3969
    65  0000                     _PORTB	set	3969
    66  0000                     _ADCON0bits	set	4034
    67  0000                     _ADCON2bits	set	4032
    68  0000                     _ADCON1bits	set	4033
    69  0000                     _GO_nDONE	set	32273
    70                           
    71                           	psect	smallconst
    72  000800                     __psmallconst:
    73                           	callstack 0
    74  000800  00                 	db	0
    75  000801                     STR_1:
    76  000801  42                 	db	66	;'B'
    77  000802  69                 	db	105	;'i'
    78  000803  65                 	db	101	;'e'
    79  000804  6E                 	db	110	;'n'
    80  000805  76                 	db	118	;'v'
    81  000806  65                 	db	101	;'e'
    82  000807  6E                 	db	110	;'n'
    83  000808  69                 	db	105	;'i'
    84  000809  64                 	db	100	;'d'
    85  00080A  6F                 	db	111	;'o'
    86  00080B  73                 	db	115	;'s'
    87  00080C  00                 	db	0
    88  00080D  00                 	db	0	; dummy byte at the end
    89  0000                     
    90                           ; #config settings
    91                           
    92                           	psect	cinit
    93  000CE0                     __pcinit:
    94                           	callstack 0
    95  000CE0                     start_initialization:
    96                           	callstack 0
    97  000CE0                     __initialization:
    98                           	callstack 0
    99                           
   100                           ; Clear objects allocated to COMRAM (18 bytes)
   101  000CE0  EE00  F001         	lfsr	0,__pbssCOMRAM
   102  000CE4  0E12               	movlw	18
   103  000CE6                     clear_0:
   104  000CE6  6AEE               	clrf	postinc0,c
   105  000CE8  06E8               	decf	wreg,f,c
   106  000CEA  E1FD               	bnz	clear_0
   107  000CEC                     end_of_initialization:
   108                           	callstack 0
   109  000CEC                     __end_of__initialization:
   110                           	callstack 0
   111  000CEC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   112  000CEE  6EF8               	movwf	tblptru,c
   113  000CF0  0100               	movlb	0
   114  000CF2  EFF5  F005         	goto	_main	;jump to C main() function
   115                           
   116                           	psect	bssCOMRAM
   117  000001                     __pbssCOMRAM:
   118                           	callstack 0
   119  000001                     _buffer_lcd:
   120                           	callstack 0
   121  000001                     	ds	16
   122  000011                     _entero:
   123                           	callstack 0
   124  000011                     	ds	2
   125                           
   126                           	psect	cstackCOMRAM
   127  000013                     __pcstackCOMRAM:
   128                           	callstack 0
   129  000013                     ??_Lcd_Cmd:
   130  000013                     ??_Lcd_Chr_CP:
   131  000013                     ??_adcInit:
   132  000013                     
   133                           ; 1 bytes @ 0x0
   134  000013                     	ds	1
   135  000014                     adcInit@ADC_PINs:
   136                           	callstack 0
   137                           
   138                           ; 1 bytes @ 0x1
   139  000014                     	ds	1
   140  000015                     Lcd_Chr_CP@data:
   141                           	callstack 0
   142  000015                     Lcd_Cmd@data:
   143                           	callstack 0
   144                           
   145                           ; 1 bytes @ 0x2
   146  000015                     	ds	1
   147  000016                     ??_Lcd_Init:
   148  000016                     Lcd_Out@x:
   149                           	callstack 0
   150                           
   151                           ; 1 bytes @ 0x3
   152  000016                     	ds	1
   153  000017                     Lcd_Init@i:
   154                           	callstack 0
   155  000017                     Lcd_Out@buffer:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x4
   159  000017                     	ds	2
   160  000019                     ??_Lcd_Out:
   161                           
   162                           ; 1 bytes @ 0x6
   163  000019                     	ds	2
   164  00001B                     Lcd_Out@y:
   165                           	callstack 0
   166                           
   167                           ; 1 bytes @ 0x8
   168  00001B                     	ds	1
   169  00001C                     Lcd_Out@data:
   170                           	callstack 0
   171                           
   172                           ; 1 bytes @ 0x9
   173  00001C                     	ds	1
   174  00001D                     ??_main:
   175                           
   176                           ; 1 bytes @ 0xA
   177  00001D                     	ds	2
   178                           
   179 ;;
   180 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   181 ;;
   182 ;; *************** function _main *****************
   183 ;; Defined at:
   184 ;;		line 18 in file "main.c"
   185 ;; Parameters:    Size  Location     Type
   186 ;;		None
   187 ;; Auto vars:     Size  Location     Type
   188 ;;		None
   189 ;; Return value:  Size  Location     Type
   190 ;;                  1    wreg      void 
   191 ;; Registers used:
   192 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   193 ;; Tracked objects:
   194 ;;		On entry : 0/0
   195 ;;		On exit  : 0/0
   196 ;;		Unchanged: 0/0
   197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   198 ;;      Params:         0       0       0       0       0       0       0       0       0
   199 ;;      Locals:         0       0       0       0       0       0       0       0       0
   200 ;;      Temps:          2       0       0       0       0       0       0       0       0
   201 ;;      Totals:         2       0       0       0       0       0       0       0       0
   202 ;;Total ram usage:        2 bytes
   203 ;; Hardware stack levels required when called:    2
   204 ;; This function calls:
   205 ;;		_Lcd_Cmd
   206 ;;		_Lcd_Init
   207 ;;		_Lcd_Out
   208 ;;		_adcInit
   209 ;;		_iniciarTest
   210 ;;		_servoInit
   211 ;; This function is called by:
   212 ;;		Startup code after reset
   213 ;; This function uses a non-reentrant model
   214 ;;
   215                           
   216                           	psect	text0
   217  000BEA                     __ptext0:
   218                           	callstack 0
   219  000BEA                     _main:
   220                           	callstack 29
   221  000BEA                     
   222                           ;main.c: 20:     Lcd_Init();
   223  000BEA  EC43  F005         	call	_Lcd_Init	;wreg free
   224                           
   225                           ;main.c: 21:     Lcd_Cmd(1);
   226  000BEE  0E01               	movlw	1
   227  000BF0  ECAE  F004         	call	_Lcd_Cmd
   228                           
   229                           ;main.c: 22:     Lcd_Cmd(12);
   230  000BF4  0E0C               	movlw	12
   231  000BF6  ECAE  F004         	call	_Lcd_Cmd
   232  000BFA                     
   233                           ;main.c: 23:      _delay((unsigned long)((100)*(12000000/4000.0)));
   234  000BFA  0E02               	movlw	2
   235  000BFC  6E1E               	movwf	(??_main+1)^0,c
   236  000BFE  0E86               	movlw	134
   237  000C00  6E1D               	movwf	??_main^0,c
   238  000C02  0E99               	movlw	153
   239  000C04                     u197:
   240  000C04  2EE8               	decfsz	wreg,f,c
   241  000C06  D7FE               	bra	u197
   242  000C08  2E1D               	decfsz	??_main^0,f,c
   243  000C0A  D7FC               	bra	u197
   244  000C0C  2E1E               	decfsz	(??_main+1)^0,f,c
   245  000C0E  D7FA               	bra	u197
   246  000C10  F000               	nop	
   247  000C12                     
   248                           ;main.c: 24:     Lcd_Out(1,0, (const int8_t*)"Bienvenidos");
   249  000C12  0E00               	movlw	0
   250  000C14  6E16               	movwf	Lcd_Out@x^0,c
   251  000C16  0E01               	movlw	low STR_1
   252  000C18  6E17               	movwf	Lcd_Out@buffer^0,c
   253  000C1A  0E08               	movlw	high STR_1
   254  000C1C  6E18               	movwf	(Lcd_Out@buffer+1)^0,c
   255  000C1E  0E01               	movlw	1
   256  000C20  ECA3  F005         	call	_Lcd_Out
   257  000C24                     
   258                           ;main.c: 25:     _delay((unsigned long)((1000)*(12000000/4000.0)));
   259  000C24  0E10               	movlw	16
   260  000C26  6E1E               	movwf	(??_main+1)^0,c
   261  000C28  0E39               	movlw	57
   262  000C2A  6E1D               	movwf	??_main^0,c
   263  000C2C  0E0E               	movlw	14
   264  000C2E                     u207:
   265  000C2E  2EE8               	decfsz	wreg,f,c
   266  000C30  D7FE               	bra	u207
   267  000C32  2E1D               	decfsz	??_main^0,f,c
   268  000C34  D7FC               	bra	u207
   269  000C36  2E1E               	decfsz	(??_main+1)^0,f,c
   270  000C38  D7FA               	bra	u207
   271  000C3A                     
   272                           ;main.c: 26:     (Lcd_Cmd(1),_delay((unsigned long)((100)*(12000000/4000.0))));
   273  000C3A  0E01               	movlw	1
   274  000C3C  ECAE  F004         	call	_Lcd_Cmd
   275  000C40  0E02               	movlw	2
   276  000C42  6E1E               	movwf	(??_main+1)^0,c
   277  000C44  0E86               	movlw	134
   278  000C46  6E1D               	movwf	??_main^0,c
   279  000C48  0E99               	movlw	153
   280  000C4A                     u217:
   281  000C4A  2EE8               	decfsz	wreg,f,c
   282  000C4C  D7FE               	bra	u217
   283  000C4E  2E1D               	decfsz	??_main^0,f,c
   284  000C50  D7FC               	bra	u217
   285  000C52  2E1E               	decfsz	(??_main+1)^0,f,c
   286  000C54  D7FA               	bra	u217
   287  000C56  F000               	nop	
   288  000C58                     
   289                           ;main.c: 27:     adcInit(2);
   290  000C58  0E02               	movlw	2
   291  000C5A  EC37  F006         	call	_adcInit
   292  000C5E                     
   293                           ;main.c: 28:     servoInit();
   294  000C5E  EC7B  F006         	call	_servoInit	;wreg free
   295  000C62                     l1096:
   296                           
   297                           ;main.c: 30:     {;main.c: 39:         iniciarTest();
   298  000C62  EC5B  F006         	call	_iniciarTest	;wreg free
   299  000C66  EF31  F006         	goto	l1096
   300  000C6A  EF00  F000         	goto	start
   301  000C6E                     __end_of_main:
   302                           	callstack 0
   303                           
   304 ;; *************** function _servoInit *****************
   305 ;; Defined at:
   306 ;;		line 3 in file "servo.c"
   307 ;; Parameters:    Size  Location     Type
   308 ;;		None
   309 ;; Auto vars:     Size  Location     Type
   310 ;;		None
   311 ;; Return value:  Size  Location     Type
   312 ;;                  1    wreg      void 
   313 ;; Registers used:
   314 ;;		wreg, status,2
   315 ;; Tracked objects:
   316 ;;		On entry : 0/0
   317 ;;		On exit  : 0/0
   318 ;;		Unchanged: 0/0
   319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   320 ;;      Params:         0       0       0       0       0       0       0       0       0
   321 ;;      Locals:         0       0       0       0       0       0       0       0       0
   322 ;;      Temps:          0       0       0       0       0       0       0       0       0
   323 ;;      Totals:         0       0       0       0       0       0       0       0       0
   324 ;;Total ram usage:        0 bytes
   325 ;; Hardware stack levels used:    1
   326 ;; This function calls:
   327 ;;		Nothing
   328 ;; This function is called by:
   329 ;;		_main
   330 ;; This function uses a non-reentrant model
   331 ;;
   332                           
   333                           	psect	text1
   334  000CF6                     __ptext1:
   335                           	callstack 0
   336  000CF6                     _servoInit:
   337                           	callstack 30
   338  000CF6                     
   339                           ;servo.c: 5:     T0CONbits.T08BIT = 1;
   340  000CF6  8CD5               	bsf	213,6,c	;volatile
   341                           
   342                           ;servo.c: 6:     T0CONbits.T0CS = 0;
   343  000CF8  9AD5               	bcf	213,5,c	;volatile
   344                           
   345                           ;servo.c: 7:     T0CONbits.PSA = 0;
   346  000CFA  96D5               	bcf	213,3,c	;volatile
   347  000CFC                     
   348                           ;servo.c: 8:     T0CONbits.T0PS = 0b111;
   349  000CFC  0E07               	movlw	7
   350  000CFE  12D5               	iorwf	213,f,c	;volatile
   351                           
   352                           ;servo.c: 9:     TMR0 = 235;
   353  000D00  0E00               	movlw	0
   354  000D02  6ED7               	movwf	215,c	;volatile
   355  000D04  0EEB               	movlw	235
   356  000D06  6ED6               	movwf	214,c	;volatile
   357  000D08  0012               	return		;funcret
   358  000D0A                     __end_of_servoInit:
   359                           	callstack 0
   360                           
   361 ;; *************** function _iniciarTest *****************
   362 ;; Defined at:
   363 ;;		line 16 in file "servo.c"
   364 ;; Parameters:    Size  Location     Type
   365 ;;		None
   366 ;; Auto vars:     Size  Location     Type
   367 ;;		None
   368 ;; Return value:  Size  Location     Type
   369 ;;                  1    wreg      void 
   370 ;; Registers used:
   371 ;;		wreg, status,2
   372 ;; Tracked objects:
   373 ;;		On entry : 0/0
   374 ;;		On exit  : 0/0
   375 ;;		Unchanged: 0/0
   376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   377 ;;      Params:         0       0       0       0       0       0       0       0       0
   378 ;;      Locals:         0       0       0       0       0       0       0       0       0
   379 ;;      Temps:          0       0       0       0       0       0       0       0       0
   380 ;;      Totals:         0       0       0       0       0       0       0       0       0
   381 ;;Total ram usage:        0 bytes
   382 ;; Hardware stack levels used:    1
   383 ;; This function calls:
   384 ;;		Nothing
   385 ;; This function is called by:
   386 ;;		_main
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390                           	psect	text2
   391  000CB6                     __ptext2:
   392                           	callstack 0
   393  000CB6                     _iniciarTest:
   394                           	callstack 30
   395  000CB6                     
   396                           ;servo.c: 18:     TRISBbits.TRISB1 = 0;
   397  000CB6  9293               	bcf	147,1,c	;volatile
   398  000CB8                     
   399                           ;servo.c: 19:     TMR0 = 20;
   400  000CB8  0E00               	movlw	0
   401  000CBA  6ED7               	movwf	215,c	;volatile
   402  000CBC  0E14               	movlw	20
   403  000CBE  6ED6               	movwf	214,c	;volatile
   404  000CC0                     
   405                           ;servo.c: 20:     INTCONbits.TMR0IF = 0;
   406  000CC0  94F2               	bcf	242,2,c	;volatile
   407  000CC2                     
   408                           ;servo.c: 21:     T0CONbits.TMR0ON =1;
   409  000CC2  8ED5               	bsf	213,7,c	;volatile
   410                           
   411                           ;servo.c: 22:     while(!INTCONbits.TMR0IF)
   412  000CC4  EF65  F006         	goto	l139
   413  000CC8                     l140:
   414                           
   415                           ;servo.c: 23:     {;servo.c: 24:         LATBbits.LATB1 = 1;
   416  000CC8  828A               	bsf	138,1,c	;volatile
   417  000CCA                     l139:
   418                           
   419                           ;servo.c: 22:     while(!INTCONbits.TMR0IF)
   420  000CCA  A4F2               	btfss	242,2,c	;volatile
   421  000CCC  EF6A  F006         	goto	u131
   422  000CD0  EF6C  F006         	goto	u130
   423  000CD4                     u131:
   424  000CD4  EF64  F006         	goto	l140
   425  000CD8                     u130:
   426  000CD8                     
   427                           ;servo.c: 26:     LATBbits.LATB1 = 0;
   428  000CD8  928A               	bcf	138,1,c	;volatile
   429                           
   430                           ;servo.c: 27:     INTCONbits.TMR0IF = 0;
   431  000CDA  94F2               	bcf	242,2,c	;volatile
   432                           
   433                           ;servo.c: 28:     T0CONbits.TMR0ON =0;
   434  000CDC  9ED5               	bcf	213,7,c	;volatile
   435  000CDE  0012               	return		;funcret
   436  000CE0                     __end_of_iniciarTest:
   437                           	callstack 0
   438                           
   439 ;; *************** function _adcInit *****************
   440 ;; Defined at:
   441 ;;		line 11 in file "adc.c"
   442 ;; Parameters:    Size  Location     Type
   443 ;;  ADC_PINs        1    wreg     unsigned char 
   444 ;; Auto vars:     Size  Location     Type
   445 ;;  ADC_PINs        1    1[COMRAM] unsigned char 
   446 ;; Return value:  Size  Location     Type
   447 ;;                  1    wreg      void 
   448 ;; Registers used:
   449 ;;		wreg, status,2, status,0
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   455 ;;      Params:         0       0       0       0       0       0       0       0       0
   456 ;;      Locals:         1       0       0       0       0       0       0       0       0
   457 ;;      Temps:          1       0       0       0       0       0       0       0       0
   458 ;;      Totals:         2       0       0       0       0       0       0       0       0
   459 ;;Total ram usage:        2 bytes
   460 ;; Hardware stack levels used:    1
   461 ;; This function calls:
   462 ;;		Nothing
   463 ;; This function is called by:
   464 ;;		_main
   465 ;; This function uses a non-reentrant model
   466 ;;
   467                           
   468                           	psect	text3
   469  000C6E                     __ptext3:
   470                           	callstack 0
   471  000C6E                     _adcInit:
   472                           	callstack 30
   473                           
   474                           ;incstack = 0
   475                           ;adcInit@ADC_PINs stored from wreg
   476  000C6E  6E14               	movwf	adcInit@ADC_PINs^0,c
   477  000C70                     
   478                           ;adc.c: 11: void adcInit(uint8_t ADC_PINs);adc.c: 12: {;adc.c: 14:     if(ADC_PINs == 0)
   479  000C70  5014               	movf	adcInit@ADC_PINs^0,w,c
   480  000C72  A4D8               	btfss	status,2,c
   481  000C74  EF3E  F006         	goto	u101
   482  000C78  EF40  F006         	goto	u100
   483  000C7C                     u101:
   484  000C7C  EF46  F006         	goto	l868
   485  000C80                     u100:
   486  000C80                     
   487                           ;adc.c: 15:     {;adc.c: 16:         ADCON1bits.PCFG = 0b1110;
   488  000C80  50C1               	movf	193,w,c	;volatile
   489  000C82  0BF0               	andlw	-16
   490  000C84  090E               	iorlw	14
   491  000C86  6EC1               	movwf	193,c	;volatile
   492                           
   493                           ;adc.c: 17:     }
   494  000C88  EF4E  F006         	goto	l870
   495  000C8C                     l868:
   496                           
   497                           ;adc.c: 19:     {;adc.c: 20:         ADCON1bits.PCFG = 15 - ADC_PINs;
   498  000C8C  5014               	movf	adcInit@ADC_PINs^0,w,c
   499  000C8E  080F               	sublw	15
   500  000C90  6E13               	movwf	??_adcInit^0,c
   501  000C92  50C1               	movf	193,w,c	;volatile
   502  000C94  1813               	xorwf	??_adcInit^0,w,c
   503  000C96  0BF0               	andlw	-16
   504  000C98  1813               	xorwf	??_adcInit^0,w,c
   505  000C9A  6EC1               	movwf	193,c	;volatile
   506  000C9C                     l870:
   507                           
   508                           ;adc.c: 26:     ADCON1bits.VCFG = 0b00;
   509  000C9C  0ECF               	movlw	-49
   510  000C9E  16C1               	andwf	193,f,c	;volatile
   511  000CA0                     
   512                           ;adc.c: 31:     ADCON2bits.ACQT = 0b010;
   513  000CA0  50C0               	movf	192,w,c	;volatile
   514  000CA2  0BC7               	andlw	-57
   515  000CA4  0910               	iorlw	16
   516  000CA6  6EC0               	movwf	192,c	;volatile
   517  000CA8                     
   518                           ;adc.c: 36:     ADCON2bits.ADCS = 3;
   519  000CA8  50C0               	movf	192,w,c	;volatile
   520  000CAA  0BF8               	andlw	-8
   521  000CAC  0903               	iorlw	3
   522  000CAE  6EC0               	movwf	192,c	;volatile
   523  000CB0                     
   524                           ;adc.c: 39:     ADCON2bits.ADFM = 1;
   525  000CB0  8EC0               	bsf	192,7,c	;volatile
   526  000CB2                     
   527                           ;adc.c: 40:     ADCON0bits.ADON = 1;
   528  000CB2  80C2               	bsf	194,0,c	;volatile
   529  000CB4  0012               	return		;funcret
   530  000CB6                     __end_of_adcInit:
   531                           	callstack 0
   532                           
   533 ;; *************** function _Lcd_Out *****************
   534 ;; Defined at:
   535 ;;		line 95 in file "flex_lcd.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;  y               1    wreg     unsigned char 
   538 ;;  x               1    3[COMRAM] unsigned char 
   539 ;;  buffer          2    4[COMRAM] PTR const char 
   540 ;;		 -> STR_1(12), 
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  y               1    8[COMRAM] unsigned char 
   543 ;;  data            1    9[COMRAM] unsigned char 
   544 ;; Return value:  Size  Location     Type
   545 ;;                  1    wreg      void 
   546 ;; Registers used:
   547 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   548 ;; Tracked objects:
   549 ;;		On entry : 0/0
   550 ;;		On exit  : 0/0
   551 ;;		Unchanged: 0/0
   552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   553 ;;      Params:         3       0       0       0       0       0       0       0       0
   554 ;;      Locals:         2       0       0       0       0       0       0       0       0
   555 ;;      Temps:          2       0       0       0       0       0       0       0       0
   556 ;;      Totals:         7       0       0       0       0       0       0       0       0
   557 ;;Total ram usage:        7 bytes
   558 ;; Hardware stack levels used:    1
   559 ;; Hardware stack levels required when called:    1
   560 ;; This function calls:
   561 ;;		_Lcd_Chr_CP
   562 ;;		_Lcd_Cmd
   563 ;; This function is called by:
   564 ;;		_main
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           	psect	text4
   569  000B46                     __ptext4:
   570                           	callstack 0
   571  000B46                     _Lcd_Out:
   572                           	callstack 29
   573                           
   574                           ;incstack = 0
   575                           ;Lcd_Out@y stored from wreg
   576  000B46  6E1B               	movwf	Lcd_Out@y^0,c
   577  000B48                     
   578                           ;flex_lcd.c: 95: void Lcd_Out(uint8_t y, uint8_t x, const int8_t *buffer);flex_lcd.c: 96
      +                          : {;flex_lcd.c: 97:     uint8_t data;;flex_lcd.c: 98:     switch (y)
   579  000B48  EFBA  F005         	goto	l1066
   580  000B4C                     l1056:
   581                           
   582                           ;flex_lcd.c: 101:             data = 128 + x;
   583  000B4C  5016               	movf	Lcd_Out@x^0,w,c
   584  000B4E  0F80               	addlw	128
   585  000B50  6E1C               	movwf	Lcd_Out@data^0,c
   586                           
   587                           ;flex_lcd.c: 102:             break;
   588  000B52  EFD7  F005         	goto	l1068
   589  000B56                     l1058:
   590                           
   591                           ;flex_lcd.c: 104:             data = 192 + x;
   592  000B56  5016               	movf	Lcd_Out@x^0,w,c
   593  000B58  0FC0               	addlw	192
   594  000B5A  6E1C               	movwf	Lcd_Out@data^0,c
   595                           
   596                           ;flex_lcd.c: 105:             break;
   597  000B5C  EFD7  F005         	goto	l1068
   598  000B60                     l1060:
   599                           
   600                           ;flex_lcd.c: 107:             data = 148 + x;
   601  000B60  5016               	movf	Lcd_Out@x^0,w,c
   602  000B62  0F94               	addlw	148
   603  000B64  6E1C               	movwf	Lcd_Out@data^0,c
   604                           
   605                           ;flex_lcd.c: 108:             break;
   606  000B66  EFD7  F005         	goto	l1068
   607  000B6A                     l1062:
   608                           
   609                           ;flex_lcd.c: 110:             data = 212 + x;
   610  000B6A  5016               	movf	Lcd_Out@x^0,w,c
   611  000B6C  0FD4               	addlw	212
   612  000B6E  6E1C               	movwf	Lcd_Out@data^0,c
   613                           
   614                           ;flex_lcd.c: 111:             break;
   615  000B70  EFD7  F005         	goto	l1068
   616  000B74                     l1066:
   617  000B74  501B               	movf	Lcd_Out@y^0,w,c
   618  000B76  6E19               	movwf	??_Lcd_Out^0,c
   619  000B78  6A1A               	clrf	(??_Lcd_Out+1)^0,c
   620                           
   621                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   622                           ; Switch size 1, requested type "simple"
   623                           ; Number of cases is 1, Range of values is 0 to 0
   624                           ; switch strategies available:
   625                           ; Name         Instructions Cycles
   626                           ; simple_byte            4     3 (average)
   627                           ;	Chosen strategy is simple_byte
   628  000B7A  501A               	movf	(??_Lcd_Out+1)^0,w,c
   629  000B7C  0A00               	xorlw	0	; case 0
   630  000B7E  B4D8               	btfsc	status,2,c
   631  000B80  EFC4  F005         	goto	l1102
   632  000B84  EFD7  F005         	goto	l1068
   633  000B88                     l1102:
   634                           
   635                           ; Switch size 1, requested type "simple"
   636                           ; Number of cases is 4, Range of values is 1 to 4
   637                           ; switch strategies available:
   638                           ; Name         Instructions Cycles
   639                           ; simple_byte           13     7 (average)
   640                           ;	Chosen strategy is simple_byte
   641  000B88  5019               	movf	??_Lcd_Out^0,w,c
   642  000B8A  0A01               	xorlw	1	; case 1
   643  000B8C  B4D8               	btfsc	status,2,c
   644  000B8E  EFA6  F005         	goto	l1056
   645  000B92  0A03               	xorlw	3	; case 2
   646  000B94  B4D8               	btfsc	status,2,c
   647  000B96  EFAB  F005         	goto	l1058
   648  000B9A  0A01               	xorlw	1	; case 3
   649  000B9C  B4D8               	btfsc	status,2,c
   650  000B9E  EFB0  F005         	goto	l1060
   651  000BA2  0A07               	xorlw	7	; case 4
   652  000BA4  B4D8               	btfsc	status,2,c
   653  000BA6  EFB5  F005         	goto	l1062
   654  000BAA  EFD7  F005         	goto	l1068
   655  000BAE                     l1068:
   656                           
   657                           ;flex_lcd.c: 115:     Lcd_Cmd(data);
   658  000BAE  501C               	movf	Lcd_Out@data^0,w,c
   659  000BB0  ECAE  F004         	call	_Lcd_Cmd
   660                           
   661                           ;flex_lcd.c: 116:     while(*buffer)
   662  000BB4  EFE6  F005         	goto	l1074
   663  000BB8                     l1070:
   664                           
   665                           ;flex_lcd.c: 117:     {;flex_lcd.c: 118:         Lcd_Chr_CP(*buffer);
   666  000BB8  C017  FFF6         	movff	Lcd_Out@buffer,tblptrl
   667  000BBC  C018  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
   668  000BC0                     	if	0	;tblptru may be non-zero
   669  000BC0                     	endif
   670  000BC0                     	if	0	;tblptru may be non-zero
   671  000BC0                     	endif
   672  000BC0  0008               	tblrd		*
   673  000BC2  50F5               	movf	tablat,w,c
   674  000BC4  EC07  F004         	call	_Lcd_Chr_CP
   675  000BC8                     
   676                           ;flex_lcd.c: 119:         buffer++;
   677  000BC8  4A17               	infsnz	Lcd_Out@buffer^0,f,c
   678  000BCA  2A18               	incf	(Lcd_Out@buffer+1)^0,f,c
   679  000BCC                     l1074:
   680                           
   681                           ;flex_lcd.c: 116:     while(*buffer)
   682  000BCC  C017  FFF6         	movff	Lcd_Out@buffer,tblptrl
   683  000BD0  C018  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
   684  000BD4                     	if	0	;tblptru may be non-zero
   685  000BD4                     	endif
   686  000BD4                     	if	0	;tblptru may be non-zero
   687  000BD4                     	endif
   688  000BD4  0008               	tblrd		*
   689  000BD6  50F5               	movf	tablat,w,c
   690  000BD8  0900               	iorlw	0
   691  000BDA  A4D8               	btfss	status,2,c
   692  000BDC  EFF2  F005         	goto	u181
   693  000BE0  EFF4  F005         	goto	u180
   694  000BE4                     u181:
   695  000BE4  EFDC  F005         	goto	l1070
   696  000BE8                     u180:
   697  000BE8  0012               	return		;funcret
   698  000BEA                     __end_of_Lcd_Out:
   699                           	callstack 0
   700                           
   701 ;; *************** function _Lcd_Chr_CP *****************
   702 ;; Defined at:
   703 ;;		line 151 in file "flex_lcd.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;  data            1    wreg     char 
   706 ;; Auto vars:     Size  Location     Type
   707 ;;  data            1    2[COMRAM] char 
   708 ;; Return value:  Size  Location     Type
   709 ;;                  1    wreg      void 
   710 ;; Registers used:
   711 ;;		wreg, status,2, status,0
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   717 ;;      Params:         0       0       0       0       0       0       0       0       0
   718 ;;      Locals:         1       0       0       0       0       0       0       0       0
   719 ;;      Temps:          2       0       0       0       0       0       0       0       0
   720 ;;      Totals:         3       0       0       0       0       0       0       0       0
   721 ;;Total ram usage:        3 bytes
   722 ;; Hardware stack levels used:    1
   723 ;; This function calls:
   724 ;;		Nothing
   725 ;; This function is called by:
   726 ;;		_Lcd_Out
   727 ;;		_Lcd_Out2
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text5
   732  00080E                     __ptext5:
   733                           	callstack 0
   734  00080E                     _Lcd_Chr_CP:
   735                           	callstack 29
   736                           
   737                           ;incstack = 0
   738                           ;Lcd_Chr_CP@data stored from wreg
   739  00080E  6E15               	movwf	Lcd_Chr_CP@data^0,c
   740  000810                     
   741                           ;flex_lcd.c: 151: void Lcd_Chr_CP(int8_t data);flex_lcd.c: 152: {;flex_lcd.c: 153:     L
      +                          ATDbits.LD3 = 0;
   742  000810  968C               	bcf	140,3,c	;volatile
   743                           
   744                           ;flex_lcd.c: 154:     LATDbits.LD2 = 1;
   745  000812  848C               	bsf	140,2,c	;volatile
   746  000814                     
   747                           ;flex_lcd.c: 155:     LATDbits.LD7 = (data & 0b10000000)>>7;
   748  000814  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   749  000818  0E07               	movlw	7
   750  00081A  6E14               	movwf	(??_Lcd_Chr_CP+1)^0,c
   751  00081C                     u45:
   752  00081C  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
   753  00081E  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   754  000820  2E14               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
   755  000822  EF0E  F004         	goto	u45
   756  000826  0E01               	movlw	1
   757  000828  1613               	andwf	??_Lcd_Chr_CP^0,f,c
   758  00082A  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   759  00082C  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   760  00082E  508C               	movf	140,w,c	;volatile
   761  000830  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   762  000832  0B7F               	andlw	-129
   763  000834  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   764  000836  6E8C               	movwf	140,c	;volatile
   765                           
   766                           ;flex_lcd.c: 156:     LATDbits.LD6 = (data & 0b01000000)>>6;
   767  000838  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   768  00083C  0E06               	movlw	6
   769  00083E  6E14               	movwf	(??_Lcd_Chr_CP+1)^0,c
   770  000840                     u55:
   771  000840  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
   772  000842  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   773  000844  2E14               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
   774  000846  EF20  F004         	goto	u55
   775  00084A  0E01               	movlw	1
   776  00084C  1613               	andwf	??_Lcd_Chr_CP^0,f,c
   777  00084E  3A13               	swapf	??_Lcd_Chr_CP^0,f,c
   778  000850  4613               	rlncf	??_Lcd_Chr_CP^0,f,c
   779  000852  4613               	rlncf	??_Lcd_Chr_CP^0,f,c
   780  000854  508C               	movf	140,w,c	;volatile
   781  000856  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   782  000858  0BBF               	andlw	-65
   783  00085A  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   784  00085C  6E8C               	movwf	140,c	;volatile
   785                           
   786                           ;flex_lcd.c: 157:     LATDbits.LD5 = (data & 0b00100000)>>5;
   787  00085E  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   788  000862  0E05               	movlw	5
   789  000864  6E14               	movwf	(??_Lcd_Chr_CP+1)^0,c
   790  000866                     u65:
   791  000866  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
   792  000868  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   793  00086A  2E14               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
   794  00086C  EF33  F004         	goto	u65
   795  000870  0E01               	movlw	1
   796  000872  1613               	andwf	??_Lcd_Chr_CP^0,f,c
   797  000874  3A13               	swapf	??_Lcd_Chr_CP^0,f,c
   798  000876  4613               	rlncf	??_Lcd_Chr_CP^0,f,c
   799  000878  508C               	movf	140,w,c	;volatile
   800  00087A  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   801  00087C  0BDF               	andlw	-33
   802  00087E  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   803  000880  6E8C               	movwf	140,c	;volatile
   804                           
   805                           ;flex_lcd.c: 158:     LATDbits.LD4 = (data & 0b00010000)>>4;
   806  000882  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   807  000886  0E04               	movlw	4
   808  000888  6E14               	movwf	(??_Lcd_Chr_CP+1)^0,c
   809  00088A                     u75:
   810  00088A  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
   811  00088C  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   812  00088E  2E14               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
   813  000890  EF45  F004         	goto	u75
   814  000894  0E01               	movlw	1
   815  000896  1613               	andwf	??_Lcd_Chr_CP^0,f,c
   816  000898  3A13               	swapf	??_Lcd_Chr_CP^0,f,c
   817  00089A  508C               	movf	140,w,c	;volatile
   818  00089C  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   819  00089E  0BEF               	andlw	-17
   820  0008A0  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   821  0008A2  6E8C               	movwf	140,c	;volatile
   822  0008A4                     
   823                           ;flex_lcd.c: 159:     _delay(10);
   824  0008A4  0E03               	movlw	3
   825  0008A6                     u227:
   826  0008A6  2EE8               	decfsz	wreg,f,c
   827  0008A8  D7FE               	bra	u227
   828  0008AA  F000               	nop	
   829  0008AC                     
   830                           ;flex_lcd.c: 160:     LATDbits.LD3 = 1;
   831  0008AC  868C               	bsf	140,3,c	;volatile
   832  0008AE                     
   833                           ;flex_lcd.c: 161:     _delay((unsigned long)((5)*(12000000/4000000.0)));
   834  0008AE  0E05               	movlw	5
   835  0008B0                     u237:
   836  0008B0  2EE8               	decfsz	wreg,f,c
   837  0008B2  D7FE               	bra	u237
   838  0008B4                     
   839                           ;flex_lcd.c: 162:     LATDbits.LD3 = 0;
   840  0008B4  968C               	bcf	140,3,c	;volatile
   841                           
   842                           ;flex_lcd.c: 163:     LATDbits.LD7 = (data & 0b00001000)>>3;
   843  0008B6  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   844  0008BA  0E03               	movlw	3
   845  0008BC  6E14               	movwf	(??_Lcd_Chr_CP+1)^0,c
   846  0008BE                     u85:
   847  0008BE  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
   848  0008C0  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   849  0008C2  2E14               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
   850  0008C4  EF5F  F004         	goto	u85
   851  0008C8  0E01               	movlw	1
   852  0008CA  1613               	andwf	??_Lcd_Chr_CP^0,f,c
   853  0008CC  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   854  0008CE  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   855  0008D0  508C               	movf	140,w,c	;volatile
   856  0008D2  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   857  0008D4  0B7F               	andlw	-129
   858  0008D6  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   859  0008D8  6E8C               	movwf	140,c	;volatile
   860                           
   861                           ;flex_lcd.c: 164:     LATDbits.LD6 = (data & 0b00000100)>>2;
   862  0008DA  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   863  0008DE  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
   864  0008E0  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   865  0008E2  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
   866  0008E4  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   867  0008E6  0E01               	movlw	1
   868  0008E8  1613               	andwf	??_Lcd_Chr_CP^0,f,c
   869  0008EA  3A13               	swapf	??_Lcd_Chr_CP^0,f,c
   870  0008EC  4613               	rlncf	??_Lcd_Chr_CP^0,f,c
   871  0008EE  4613               	rlncf	??_Lcd_Chr_CP^0,f,c
   872  0008F0  508C               	movf	140,w,c	;volatile
   873  0008F2  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   874  0008F4  0BBF               	andlw	-65
   875  0008F6  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   876  0008F8  6E8C               	movwf	140,c	;volatile
   877                           
   878                           ;flex_lcd.c: 165:     LATDbits.LD5 = (data & 0b00000010)>>1;
   879  0008FA  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   880  0008FE  0E01               	movlw	1
   881  000900  6E14               	movwf	(??_Lcd_Chr_CP+1)^0,c
   882  000902                     u95:
   883  000902  3413               	rlcf	??_Lcd_Chr_CP^0,w,c
   884  000904  3213               	rrcf	??_Lcd_Chr_CP^0,f,c
   885  000906  2E14               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
   886  000908  EF81  F004         	goto	u95
   887  00090C  0E01               	movlw	1
   888  00090E  1613               	andwf	??_Lcd_Chr_CP^0,f,c
   889  000910  3A13               	swapf	??_Lcd_Chr_CP^0,f,c
   890  000912  4613               	rlncf	??_Lcd_Chr_CP^0,f,c
   891  000914  508C               	movf	140,w,c	;volatile
   892  000916  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   893  000918  0BDF               	andlw	-33
   894  00091A  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   895  00091C  6E8C               	movwf	140,c	;volatile
   896                           
   897                           ;flex_lcd.c: 166:     LATDbits.LD4 = (data & 0b00000001);
   898  00091E  C015  F013         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
   899  000922  0E01               	movlw	1
   900  000924  1613               	andwf	??_Lcd_Chr_CP^0,f,c
   901  000926  3A13               	swapf	??_Lcd_Chr_CP^0,f,c
   902  000928  508C               	movf	140,w,c	;volatile
   903  00092A  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   904  00092C  0BEF               	andlw	-17
   905  00092E  1813               	xorwf	??_Lcd_Chr_CP^0,w,c
   906  000930  6E8C               	movwf	140,c	;volatile
   907  000932                     
   908                           ;flex_lcd.c: 167:     _delay(10);
   909  000932  0E03               	movlw	3
   910  000934                     u247:
   911  000934  2EE8               	decfsz	wreg,f,c
   912  000936  D7FE               	bra	u247
   913  000938  F000               	nop	
   914  00093A                     
   915                           ;flex_lcd.c: 168:     LATDbits.LD3 = 1;
   916  00093A  868C               	bsf	140,3,c	;volatile
   917  00093C                     
   918                           ;flex_lcd.c: 169:     _delay((unsigned long)((5)*(12000000/4000000.0)));
   919  00093C  0E05               	movlw	5
   920  00093E                     u257:
   921  00093E  2EE8               	decfsz	wreg,f,c
   922  000940  D7FE               	bra	u257
   923  000942                     
   924                           ;flex_lcd.c: 170:     LATDbits.LD3 = 0;
   925  000942  968C               	bcf	140,3,c	;volatile
   926  000944                     
   927                           ;flex_lcd.c: 171:     _delay((unsigned long)((5)*(12000000/4000000.0)));
   928  000944  0E05               	movlw	5
   929  000946                     u267:
   930  000946  2EE8               	decfsz	wreg,f,c
   931  000948  D7FE               	bra	u267
   932  00094A                     
   933                           ;flex_lcd.c: 172:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
   934  00094A  0E16               	movlw	22
   935  00094C  6E13               	movwf	??_Lcd_Chr_CP^0,c
   936  00094E  0E6C               	movlw	108
   937  000950                     u277:
   938  000950  2EE8               	decfsz	wreg,f,c
   939  000952  D7FE               	bra	u277
   940  000954  2E13               	decfsz	??_Lcd_Chr_CP^0,f,c
   941  000956  D7FC               	bra	u277
   942  000958  D000               	nop2	
   943  00095A  0012               	return		;funcret
   944  00095C                     __end_of_Lcd_Chr_CP:
   945                           	callstack 0
   946                           
   947 ;; *************** function _Lcd_Init *****************
   948 ;; Defined at:
   949 ;;		line 31 in file "flex_lcd.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;		None
   952 ;; Auto vars:     Size  Location     Type
   953 ;;  i               1    4[COMRAM] unsigned char 
   954 ;;  data            1    0        unsigned char 
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      void 
   957 ;; Registers used:
   958 ;;		wreg, status,2, status,0, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   964 ;;      Params:         0       0       0       0       0       0       0       0       0
   965 ;;      Locals:         2       0       0       0       0       0       0       0       0
   966 ;;      Temps:          1       0       0       0       0       0       0       0       0
   967 ;;      Totals:         3       0       0       0       0       0       0       0       0
   968 ;;Total ram usage:        3 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    1
   971 ;; This function calls:
   972 ;;		_Lcd_Cmd
   973 ;; This function is called by:
   974 ;;		_main
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text6
   979  000A86                     __ptext6:
   980                           	callstack 0
   981  000A86                     _Lcd_Init:
   982                           	callstack 29
   983  000A86                     
   984                           ;flex_lcd.c: 33:     TRISDbits.TRISD7 = 0;
   985  000A86  9E95               	bcf	149,7,c	;volatile
   986                           
   987                           ;flex_lcd.c: 34:     TRISDbits.TRISD6 = 0;
   988  000A88  9C95               	bcf	149,6,c	;volatile
   989                           
   990                           ;flex_lcd.c: 35:     TRISDbits.TRISD5 = 0;
   991  000A8A  9A95               	bcf	149,5,c	;volatile
   992                           
   993                           ;flex_lcd.c: 36:     TRISDbits.TRISD4 = 0;
   994  000A8C  9895               	bcf	149,4,c	;volatile
   995                           
   996                           ;flex_lcd.c: 37:     TRISDbits.TRISD3 = 0;
   997  000A8E  9695               	bcf	149,3,c	;volatile
   998                           
   999                           ;flex_lcd.c: 38:     TRISDbits.TRISD2 = 0;
  1000  000A90  9495               	bcf	149,2,c	;volatile
  1001  000A92                     
  1002                           ;flex_lcd.c: 39:     _delay((unsigned long)((34)*(12000000/4000.0)));
  1003  000A92  0E85               	movlw	133
  1004  000A94  6E16               	movwf	??_Lcd_Init^0,c
  1005  000A96  0E76               	movlw	118
  1006  000A98                     u287:
  1007  000A98  2EE8               	decfsz	wreg,f,c
  1008  000A9A  D7FE               	bra	u287
  1009  000A9C  2E16               	decfsz	??_Lcd_Init^0,f,c
  1010  000A9E  D7FC               	bra	u287
  1011  000AA0  D000               	nop2	
  1012  000AA2                     
  1013                           ;flex_lcd.c: 40:     for (uint8_t i = 0; i < 4; i++) {
  1014  000AA2  0E00               	movlw	0
  1015  000AA4  6E17               	movwf	Lcd_Init@i^0,c
  1016  000AA6                     l89:
  1017                           
  1018                           ;flex_lcd.c: 41:         LATDbits.LD7 = 0;
  1019  000AA6  9E8C               	bcf	140,7,c	;volatile
  1020                           
  1021                           ;flex_lcd.c: 42:         LATDbits.LD6 = 0;
  1022  000AA8  9C8C               	bcf	140,6,c	;volatile
  1023                           
  1024                           ;flex_lcd.c: 43:         LATDbits.LD5 = 1;
  1025  000AAA  8A8C               	bsf	140,5,c	;volatile
  1026                           
  1027                           ;flex_lcd.c: 44:         LATDbits.LD4 = 1;
  1028  000AAC  888C               	bsf	140,4,c	;volatile
  1029                           
  1030                           ;flex_lcd.c: 45:         LATDbits.LD3 = 0;
  1031  000AAE  968C               	bcf	140,3,c	;volatile
  1032                           
  1033                           ;flex_lcd.c: 46:         LATDbits.LD2 = 0;
  1034  000AB0  948C               	bcf	140,2,c	;volatile
  1035                           
  1036                           ;flex_lcd.c: 47:         LATDbits.LD7 = 0;
  1037  000AB2  9E8C               	bcf	140,7,c	;volatile
  1038                           
  1039                           ;flex_lcd.c: 48:         LATDbits.LD6 = 0;
  1040  000AB4  9C8C               	bcf	140,6,c	;volatile
  1041                           
  1042                           ;flex_lcd.c: 49:         LATDbits.LD5 = 1;
  1043  000AB6  8A8C               	bsf	140,5,c	;volatile
  1044                           
  1045                           ;flex_lcd.c: 50:         LATDbits.LD4 = 1;
  1046  000AB8  888C               	bsf	140,4,c	;volatile
  1047                           
  1048                           ;flex_lcd.c: 51:         LATDbits.LD3 = 1;
  1049  000ABA  868C               	bsf	140,3,c	;volatile
  1050                           
  1051                           ;flex_lcd.c: 52:         LATDbits.LD2 = 0;
  1052  000ABC  948C               	bcf	140,2,c	;volatile
  1053  000ABE                     
  1054                           ;flex_lcd.c: 53:         _delay((unsigned long)((5)*(12000000/4000000.0)));
  1055  000ABE  0E05               	movlw	5
  1056  000AC0                     u297:
  1057  000AC0  2EE8               	decfsz	wreg,f,c
  1058  000AC2  D7FE               	bra	u297
  1059  000AC4                     
  1060                           ;flex_lcd.c: 54:         LATDbits.LD7 = 0;
  1061  000AC4  9E8C               	bcf	140,7,c	;volatile
  1062  000AC6                     
  1063                           ;flex_lcd.c: 55:         LATDbits.LD6 = 0;
  1064  000AC6  9C8C               	bcf	140,6,c	;volatile
  1065  000AC8                     
  1066                           ;flex_lcd.c: 56:         LATDbits.LD5 = 1;
  1067  000AC8  8A8C               	bsf	140,5,c	;volatile
  1068  000ACA                     
  1069                           ;flex_lcd.c: 57:         LATDbits.LD4 = 1;
  1070  000ACA  888C               	bsf	140,4,c	;volatile
  1071  000ACC                     
  1072                           ;flex_lcd.c: 58:         LATDbits.LD3 = 0;
  1073  000ACC  968C               	bcf	140,3,c	;volatile
  1074  000ACE                     
  1075                           ;flex_lcd.c: 59:         LATDbits.LD2 = 0;
  1076  000ACE  948C               	bcf	140,2,c	;volatile
  1077                           
  1078                           ;flex_lcd.c: 60:         _delay((unsigned long)((5500)*(12000000/4000000.0)));
  1079  000AD0  0E16               	movlw	22
  1080  000AD2  6E16               	movwf	??_Lcd_Init^0,c
  1081  000AD4  0E6C               	movlw	108
  1082  000AD6                     u307:
  1083  000AD6  2EE8               	decfsz	wreg,f,c
  1084  000AD8  D7FE               	bra	u307
  1085  000ADA  2E16               	decfsz	??_Lcd_Init^0,f,c
  1086  000ADC  D7FC               	bra	u307
  1087  000ADE  D000               	nop2	
  1088  000AE0                     
  1089                           ;flex_lcd.c: 61:     }
  1090  000AE0  2A17               	incf	Lcd_Init@i^0,f,c
  1091  000AE2  0E03               	movlw	3
  1092  000AE4  6417               	cpfsgt	Lcd_Init@i^0,c
  1093  000AE6  EF77  F005         	goto	u111
  1094  000AEA  EF79  F005         	goto	u110
  1095  000AEE                     u111:
  1096  000AEE  EF53  F005         	goto	l89
  1097  000AF2                     u110:
  1098  000AF2                     
  1099                           ;flex_lcd.c: 62:     LATDbits.LD7 = 0;
  1100  000AF2  9E8C               	bcf	140,7,c	;volatile
  1101                           
  1102                           ;flex_lcd.c: 63:     LATDbits.LD6 = 0;
  1103  000AF4  9C8C               	bcf	140,6,c	;volatile
  1104                           
  1105                           ;flex_lcd.c: 64:     LATDbits.LD5 = 1;
  1106  000AF6  8A8C               	bsf	140,5,c	;volatile
  1107                           
  1108                           ;flex_lcd.c: 65:     LATDbits.LD4 = 0;
  1109  000AF8  988C               	bcf	140,4,c	;volatile
  1110                           
  1111                           ;flex_lcd.c: 66:     LATDbits.LD3 = 0;
  1112  000AFA  968C               	bcf	140,3,c	;volatile
  1113                           
  1114                           ;flex_lcd.c: 67:     LATDbits.LD2 = 0;
  1115  000AFC  948C               	bcf	140,2,c	;volatile
  1116                           
  1117                           ;flex_lcd.c: 68:     LATDbits.LD7 = 0;
  1118  000AFE  9E8C               	bcf	140,7,c	;volatile
  1119                           
  1120                           ;flex_lcd.c: 69:     LATDbits.LD6 = 0;
  1121  000B00  9C8C               	bcf	140,6,c	;volatile
  1122                           
  1123                           ;flex_lcd.c: 70:     LATDbits.LD5 = 1;
  1124  000B02  8A8C               	bsf	140,5,c	;volatile
  1125                           
  1126                           ;flex_lcd.c: 71:     LATDbits.LD4 = 0;
  1127  000B04  988C               	bcf	140,4,c	;volatile
  1128                           
  1129                           ;flex_lcd.c: 72:     LATDbits.LD3 = 1;
  1130  000B06  868C               	bsf	140,3,c	;volatile
  1131                           
  1132                           ;flex_lcd.c: 73:     LATDbits.LD2 = 0;
  1133  000B08  948C               	bcf	140,2,c	;volatile
  1134  000B0A                     
  1135                           ;flex_lcd.c: 74:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  1136  000B0A  0E05               	movlw	5
  1137  000B0C                     u317:
  1138  000B0C  2EE8               	decfsz	wreg,f,c
  1139  000B0E  D7FE               	bra	u317
  1140  000B10                     
  1141                           ;flex_lcd.c: 75:     LATDbits.LD7 = 0;
  1142  000B10  9E8C               	bcf	140,7,c	;volatile
  1143  000B12                     
  1144                           ;flex_lcd.c: 76:     LATDbits.LD6 = 0;
  1145  000B12  9C8C               	bcf	140,6,c	;volatile
  1146  000B14                     
  1147                           ;flex_lcd.c: 77:     LATDbits.LD5 = 1;
  1148  000B14  8A8C               	bsf	140,5,c	;volatile
  1149  000B16                     
  1150                           ;flex_lcd.c: 78:     LATDbits.LD4 = 0;
  1151  000B16  988C               	bcf	140,4,c	;volatile
  1152  000B18                     
  1153                           ;flex_lcd.c: 79:     LATDbits.LD3 = 0;
  1154  000B18  968C               	bcf	140,3,c	;volatile
  1155  000B1A                     
  1156                           ;flex_lcd.c: 80:     LATDbits.LD2 = 0;
  1157  000B1A  948C               	bcf	140,2,c	;volatile
  1158                           
  1159                           ;flex_lcd.c: 81:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  1160  000B1C  0E16               	movlw	22
  1161  000B1E  6E16               	movwf	??_Lcd_Init^0,c
  1162  000B20  0E6C               	movlw	108
  1163  000B22                     u327:
  1164  000B22  2EE8               	decfsz	wreg,f,c
  1165  000B24  D7FE               	bra	u327
  1166  000B26  2E16               	decfsz	??_Lcd_Init^0,f,c
  1167  000B28  D7FC               	bra	u327
  1168  000B2A  D000               	nop2	
  1169  000B2C                     
  1170                           ;flex_lcd.c: 85:     Lcd_Cmd(data);
  1171  000B2C  0E28               	movlw	40
  1172  000B2E  ECAE  F004         	call	_Lcd_Cmd
  1173  000B32                     
  1174                           ;flex_lcd.c: 87:     Lcd_Cmd(data);
  1175  000B32  0E10               	movlw	16
  1176  000B34  ECAE  F004         	call	_Lcd_Cmd
  1177  000B38                     
  1178                           ;flex_lcd.c: 89:     Lcd_Cmd(data);
  1179  000B38  0E01               	movlw	1
  1180  000B3A  ECAE  F004         	call	_Lcd_Cmd
  1181  000B3E                     
  1182                           ;flex_lcd.c: 91:     Lcd_Cmd(data);
  1183  000B3E  0E0F               	movlw	15
  1184  000B40  ECAE  F004         	call	_Lcd_Cmd
  1185  000B44  0012               	return		;funcret
  1186  000B46                     __end_of_Lcd_Init:
  1187                           	callstack 0
  1188                           
  1189 ;; *************** function _Lcd_Cmd *****************
  1190 ;; Defined at:
  1191 ;;		line 175 in file "flex_lcd.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;  data            1    wreg     unsigned char 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;  data            1    2[COMRAM] unsigned char 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  1    wreg      void 
  1198 ;; Registers used:
  1199 ;;		wreg, status,2, status,0
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1205 ;;      Params:         0       0       0       0       0       0       0       0       0
  1206 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1207 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1208 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1209 ;;Total ram usage:        3 bytes
  1210 ;; Hardware stack levels used:    1
  1211 ;; This function calls:
  1212 ;;		Nothing
  1213 ;; This function is called by:
  1214 ;;		_main
  1215 ;;		_Lcd_Init
  1216 ;;		_Lcd_Out
  1217 ;;		_Lcd_Out2
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221                           	psect	text7
  1222  00095C                     __ptext7:
  1223                           	callstack 0
  1224  00095C                     _Lcd_Cmd:
  1225                           	callstack 29
  1226                           
  1227                           ;incstack = 0
  1228                           ;Lcd_Cmd@data stored from wreg
  1229  00095C  6E15               	movwf	Lcd_Cmd@data^0,c
  1230  00095E                     
  1231                           ;flex_lcd.c: 175: void Lcd_Cmd(uint8_t data);flex_lcd.c: 176: {;flex_lcd.c: 177:     LAT
      +                          Dbits.LD3 = 0; LATDbits.LD2 = 0;
  1232  00095E  968C               	bcf	140,3,c	;volatile
  1233  000960  948C               	bcf	140,2,c	;volatile
  1234  000962                     
  1235                           ;flex_lcd.c: 178:     LATDbits.LD7 = (data & 0b10000000)>>7;
  1236  000962  6A13               	clrf	??_Lcd_Cmd^0,c
  1237  000964  AE15               	btfss	Lcd_Cmd@data^0,7,c
  1238  000966  D001               	bra	u15
  1239  000968  2A13               	incf	??_Lcd_Cmd^0,f,c
  1240  00096A                     u15:
  1241  00096A  0E01               	movlw	1
  1242  00096C  1613               	andwf	??_Lcd_Cmd^0,f,c
  1243  00096E  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1244  000970  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1245  000972  508C               	movf	140,w,c	;volatile
  1246  000974  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1247  000976  0B7F               	andlw	-129
  1248  000978  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1249  00097A  6E8C               	movwf	140,c	;volatile
  1250                           
  1251                           ;flex_lcd.c: 179:     LATDbits.LD6 = (data & 0b01000000)>>6;
  1252  00097C  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1253  000980  0E06               	movlw	6
  1254  000982  6E14               	movwf	(??_Lcd_Cmd+1)^0,c
  1255  000984                     u25:
  1256  000984  90D8               	bcf	status,0,c
  1257  000986  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1258  000988  2E14               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  1259  00098A  EFC2  F004         	goto	u25
  1260  00098E  0E01               	movlw	1
  1261  000990  1613               	andwf	??_Lcd_Cmd^0,f,c
  1262  000992  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1263  000994  4613               	rlncf	??_Lcd_Cmd^0,f,c
  1264  000996  4613               	rlncf	??_Lcd_Cmd^0,f,c
  1265  000998  508C               	movf	140,w,c	;volatile
  1266  00099A  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1267  00099C  0BBF               	andlw	-65
  1268  00099E  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1269  0009A0  6E8C               	movwf	140,c	;volatile
  1270                           
  1271                           ;flex_lcd.c: 180:     LATDbits.LD5 = (data & 0b00100000)>>5;
  1272  0009A2  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1273  0009A6  0E05               	movlw	5
  1274  0009A8  6E14               	movwf	(??_Lcd_Cmd+1)^0,c
  1275  0009AA                     u35:
  1276  0009AA  90D8               	bcf	status,0,c
  1277  0009AC  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1278  0009AE  2E14               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  1279  0009B0  EFD5  F004         	goto	u35
  1280  0009B4  0E01               	movlw	1
  1281  0009B6  1613               	andwf	??_Lcd_Cmd^0,f,c
  1282  0009B8  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1283  0009BA  4613               	rlncf	??_Lcd_Cmd^0,f,c
  1284  0009BC  508C               	movf	140,w,c	;volatile
  1285  0009BE  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1286  0009C0  0BDF               	andlw	-33
  1287  0009C2  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1288  0009C4  6E8C               	movwf	140,c	;volatile
  1289                           
  1290                           ;flex_lcd.c: 181:     LATDbits.LD4 = (data & 0b00010000)>>4;
  1291  0009C6  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1292  0009CA  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1293  0009CC  0E0F               	movlw	15
  1294  0009CE  1613               	andwf	??_Lcd_Cmd^0,f,c
  1295  0009D0  0E01               	movlw	1
  1296  0009D2  1613               	andwf	??_Lcd_Cmd^0,f,c
  1297  0009D4  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1298  0009D6  508C               	movf	140,w,c	;volatile
  1299  0009D8  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1300  0009DA  0BEF               	andlw	-17
  1301  0009DC  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1302  0009DE  6E8C               	movwf	140,c	;volatile
  1303  0009E0                     
  1304                           ;flex_lcd.c: 182:     _delay(10);
  1305  0009E0  0E03               	movlw	3
  1306  0009E2                     u337:
  1307  0009E2  2EE8               	decfsz	wreg,f,c
  1308  0009E4  D7FE               	bra	u337
  1309  0009E6  F000               	nop	
  1310  0009E8                     
  1311                           ;flex_lcd.c: 183:     LATDbits.LD3 = 1;
  1312  0009E8  868C               	bsf	140,3,c	;volatile
  1313  0009EA                     
  1314                           ;flex_lcd.c: 184:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  1315  0009EA  0E05               	movlw	5
  1316  0009EC                     u347:
  1317  0009EC  2EE8               	decfsz	wreg,f,c
  1318  0009EE  D7FE               	bra	u347
  1319  0009F0                     
  1320                           ;flex_lcd.c: 185:     LATDbits.LD3 = 0;
  1321  0009F0  968C               	bcf	140,3,c	;volatile
  1322                           
  1323                           ;flex_lcd.c: 186:     LATDbits.LD7 = (data & 0b00001000)>>3;
  1324  0009F2  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1325  0009F6  90D8               	bcf	status,0,c
  1326  0009F8  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1327  0009FA  90D8               	bcf	status,0,c
  1328  0009FC  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1329  0009FE  90D8               	bcf	status,0,c
  1330  000A00  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1331  000A02  0E01               	movlw	1
  1332  000A04  1613               	andwf	??_Lcd_Cmd^0,f,c
  1333  000A06  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1334  000A08  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1335  000A0A  508C               	movf	140,w,c	;volatile
  1336  000A0C  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1337  000A0E  0B7F               	andlw	-129
  1338  000A10  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1339  000A12  6E8C               	movwf	140,c	;volatile
  1340                           
  1341                           ;flex_lcd.c: 187:     LATDbits.LD6 = (data & 0b00000100)>>2;
  1342  000A14  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1343  000A18  90D8               	bcf	status,0,c
  1344  000A1A  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1345  000A1C  90D8               	bcf	status,0,c
  1346  000A1E  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1347  000A20  0E01               	movlw	1
  1348  000A22  1613               	andwf	??_Lcd_Cmd^0,f,c
  1349  000A24  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1350  000A26  4613               	rlncf	??_Lcd_Cmd^0,f,c
  1351  000A28  4613               	rlncf	??_Lcd_Cmd^0,f,c
  1352  000A2A  508C               	movf	140,w,c	;volatile
  1353  000A2C  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1354  000A2E  0BBF               	andlw	-65
  1355  000A30  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1356  000A32  6E8C               	movwf	140,c	;volatile
  1357                           
  1358                           ;flex_lcd.c: 188:     LATDbits.LD5 = (data & 0b00000010)>>1;
  1359  000A34  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1360  000A38  90D8               	bcf	status,0,c
  1361  000A3A  3213               	rrcf	??_Lcd_Cmd^0,f,c
  1362  000A3C  0E01               	movlw	1
  1363  000A3E  1613               	andwf	??_Lcd_Cmd^0,f,c
  1364  000A40  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1365  000A42  4613               	rlncf	??_Lcd_Cmd^0,f,c
  1366  000A44  508C               	movf	140,w,c	;volatile
  1367  000A46  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1368  000A48  0BDF               	andlw	-33
  1369  000A4A  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1370  000A4C  6E8C               	movwf	140,c	;volatile
  1371                           
  1372                           ;flex_lcd.c: 189:     LATDbits.LD4 = (data & 0b00000001);
  1373  000A4E  C015  F013         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1374  000A52  0E01               	movlw	1
  1375  000A54  1613               	andwf	??_Lcd_Cmd^0,f,c
  1376  000A56  3A13               	swapf	??_Lcd_Cmd^0,f,c
  1377  000A58  508C               	movf	140,w,c	;volatile
  1378  000A5A  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1379  000A5C  0BEF               	andlw	-17
  1380  000A5E  1813               	xorwf	??_Lcd_Cmd^0,w,c
  1381  000A60  6E8C               	movwf	140,c	;volatile
  1382  000A62                     
  1383                           ;flex_lcd.c: 190:     _delay(10);
  1384  000A62  0E03               	movlw	3
  1385  000A64                     u357:
  1386  000A64  2EE8               	decfsz	wreg,f,c
  1387  000A66  D7FE               	bra	u357
  1388  000A68  F000               	nop	
  1389  000A6A                     
  1390                           ;flex_lcd.c: 191:     LATDbits.LD3 = 1;
  1391  000A6A  868C               	bsf	140,3,c	;volatile
  1392  000A6C                     
  1393                           ;flex_lcd.c: 192:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  1394  000A6C  0E05               	movlw	5
  1395  000A6E                     u367:
  1396  000A6E  2EE8               	decfsz	wreg,f,c
  1397  000A70  D7FE               	bra	u367
  1398  000A72                     
  1399                           ;flex_lcd.c: 193:     LATDbits.LD3 = 0;
  1400  000A72  968C               	bcf	140,3,c	;volatile
  1401  000A74                     
  1402                           ;flex_lcd.c: 194:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  1403  000A74  0E16               	movlw	22
  1404  000A76  6E13               	movwf	??_Lcd_Cmd^0,c
  1405  000A78  0E6C               	movlw	108
  1406  000A7A                     u377:
  1407  000A7A  2EE8               	decfsz	wreg,f,c
  1408  000A7C  D7FE               	bra	u377
  1409  000A7E  2E13               	decfsz	??_Lcd_Cmd^0,f,c
  1410  000A80  D7FC               	bra	u377
  1411  000A82  D000               	nop2	
  1412  000A84  0012               	return		;funcret
  1413  000A86                     __end_of_Lcd_Cmd:
  1414                           	callstack 0
  1415                           
  1416                           	psect	rparam
  1417  0000                     
  1418                           	psect	idloc
  1419                           
  1420                           ;Config register IDLOC0 @ 0x200000
  1421                           ;	unspecified, using default values
  1422  200000                     	org	2097152
  1423  200000  FF                 	db	255
  1424                           
  1425                           ;Config register IDLOC1 @ 0x200001
  1426                           ;	unspecified, using default values
  1427  200001                     	org	2097153
  1428  200001  FF                 	db	255
  1429                           
  1430                           ;Config register IDLOC2 @ 0x200002
  1431                           ;	unspecified, using default values
  1432  200002                     	org	2097154
  1433  200002  FF                 	db	255
  1434                           
  1435                           ;Config register IDLOC3 @ 0x200003
  1436                           ;	unspecified, using default values
  1437  200003                     	org	2097155
  1438  200003  FF                 	db	255
  1439                           
  1440                           ;Config register IDLOC4 @ 0x200004
  1441                           ;	unspecified, using default values
  1442  200004                     	org	2097156
  1443  200004  FF                 	db	255
  1444                           
  1445                           ;Config register IDLOC5 @ 0x200005
  1446                           ;	unspecified, using default values
  1447  200005                     	org	2097157
  1448  200005  FF                 	db	255
  1449                           
  1450                           ;Config register IDLOC6 @ 0x200006
  1451                           ;	unspecified, using default values
  1452  200006                     	org	2097158
  1453  200006  FF                 	db	255
  1454                           
  1455                           ;Config register IDLOC7 @ 0x200007
  1456                           ;	unspecified, using default values
  1457  200007                     	org	2097159
  1458  200007  FF                 	db	255
  1459                           
  1460                           	psect	config
  1461                           
  1462                           ;Config register CONFIG1L @ 0x300000
  1463                           ;	PLL Prescaler Selection bits
  1464                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1465                           ;	System Clock Postscaler Selection bits
  1466                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1467                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1468                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1469  300000                     	org	3145728
  1470  300000  00                 	db	0
  1471                           
  1472                           ;Config register CONFIG1H @ 0x300001
  1473                           ;	Oscillator Selection bits
  1474                           ;	FOSC = HS, HS oscillator (HS)
  1475                           ;	Fail-Safe Clock Monitor Enable bit
  1476                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1477                           ;	Internal/External Oscillator Switchover bit
  1478                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1479  300001                     	org	3145729
  1480  300001  0C                 	db	12
  1481                           
  1482                           ;Config register CONFIG2L @ 0x300002
  1483                           ;	Power-up Timer Enable bit
  1484                           ;	PWRT = OFF, PWRT disabled
  1485                           ;	Brown-out Reset Enable bits
  1486                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1487                           ;	Brown-out Reset Voltage bits
  1488                           ;	BORV = 3, Minimum setting 2.05V
  1489                           ;	USB Voltage Regulator Enable bit
  1490                           ;	VREGEN = OFF, USB voltage regulator disabled
  1491  300002                     	org	3145730
  1492  300002  19                 	db	25
  1493                           
  1494                           ;Config register CONFIG2H @ 0x300003
  1495                           ;	Watchdog Timer Enable bit
  1496                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1497                           ;	Watchdog Timer Postscale Select bits
  1498                           ;	WDTPS = 32768, 1:32768
  1499  300003                     	org	3145731
  1500  300003  1E                 	db	30
  1501                           
  1502                           ; Padding undefined space
  1503  300004                     	org	3145732
  1504  300004  FF                 	db	255
  1505                           
  1506                           ;Config register CONFIG3H @ 0x300005
  1507                           ;	CCP2 MUX bit
  1508                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1509                           ;	PORTB A/D Enable bit
  1510                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1511                           ;	Low-Power Timer 1 Oscillator Enable bit
  1512                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1513                           ;	MCLR Pin Enable bit
  1514                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1515  300005                     	org	3145733
  1516  300005  81                 	db	129
  1517                           
  1518                           ;Config register CONFIG4L @ 0x300006
  1519                           ;	Stack Full/Underflow Reset Enable bit
  1520                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1521                           ;	Single-Supply ICSP Enable bit
  1522                           ;	LVP = OFF, Single-Supply ICSP disabled
  1523                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1524                           ;	ICPRT = OFF, ICPORT disabled
  1525                           ;	Extended Instruction Set Enable bit
  1526                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1527                           ;	Background Debugger Enable bit
  1528                           ;	DEBUG = 0x1, unprogrammed default
  1529  300006                     	org	3145734
  1530  300006  81                 	db	129
  1531                           
  1532                           ; Padding undefined space
  1533  300007                     	org	3145735
  1534  300007  FF                 	db	255
  1535                           
  1536                           ;Config register CONFIG5L @ 0x300008
  1537                           ;	Code Protection bit
  1538                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1539                           ;	Code Protection bit
  1540                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1541                           ;	Code Protection bit
  1542                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1543                           ;	Code Protection bit
  1544                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1545  300008                     	org	3145736
  1546  300008  0F                 	db	15
  1547                           
  1548                           ;Config register CONFIG5H @ 0x300009
  1549                           ;	Boot Block Code Protection bit
  1550                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1551                           ;	Data EEPROM Code Protection bit
  1552                           ;	CPD = OFF, Data EEPROM is not code-protected
  1553  300009                     	org	3145737
  1554  300009  C0                 	db	192
  1555                           
  1556                           ;Config register CONFIG6L @ 0x30000A
  1557                           ;	Write Protection bit
  1558                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1559                           ;	Write Protection bit
  1560                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1561                           ;	Write Protection bit
  1562                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1563                           ;	Write Protection bit
  1564                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1565  30000A                     	org	3145738
  1566  30000A  0F                 	db	15
  1567                           
  1568                           ;Config register CONFIG6H @ 0x30000B
  1569                           ;	Configuration Register Write Protection bit
  1570                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1571                           ;	Boot Block Write Protection bit
  1572                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1573                           ;	Data EEPROM Write Protection bit
  1574                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1575  30000B                     	org	3145739
  1576  30000B  E0                 	db	224
  1577                           
  1578                           ;Config register CONFIG7L @ 0x30000C
  1579                           ;	Table Read Protection bit
  1580                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1581                           ;	Table Read Protection bit
  1582                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1583                           ;	Table Read Protection bit
  1584                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1585                           ;	Table Read Protection bit
  1586                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1587  30000C                     	org	3145740
  1588  30000C  0F                 	db	15
  1589                           
  1590                           ;Config register CONFIG7H @ 0x30000D
  1591                           ;	Boot Block Table Read Protection bit
  1592                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1593  30000D                     	org	3145741
  1594  30000D  40                 	db	64
  1595                           tosu	equ	0xFFF
  1596                           tosh	equ	0xFFE
  1597                           tosl	equ	0xFFD
  1598                           stkptr	equ	0xFFC
  1599                           pclatu	equ	0xFFB
  1600                           pclath	equ	0xFFA
  1601                           pcl	equ	0xFF9
  1602                           tblptru	equ	0xFF8
  1603                           tblptrh	equ	0xFF7
  1604                           tblptrl	equ	0xFF6
  1605                           tablat	equ	0xFF5
  1606                           prodh	equ	0xFF4
  1607                           prodl	equ	0xFF3
  1608                           indf0	equ	0xFEF
  1609                           postinc0	equ	0xFEE
  1610                           postdec0	equ	0xFED
  1611                           preinc0	equ	0xFEC
  1612                           plusw0	equ	0xFEB
  1613                           fsr0h	equ	0xFEA
  1614                           fsr0l	equ	0xFE9
  1615                           wreg	equ	0xFE8
  1616                           indf1	equ	0xFE7
  1617                           postinc1	equ	0xFE6
  1618                           postdec1	equ	0xFE5
  1619                           preinc1	equ	0xFE4
  1620                           plusw1	equ	0xFE3
  1621                           fsr1h	equ	0xFE2
  1622                           fsr1l	equ	0xFE1
  1623                           bsr	equ	0xFE0
  1624                           indf2	equ	0xFDF
  1625                           postinc2	equ	0xFDE
  1626                           postdec2	equ	0xFDD
  1627                           preinc2	equ	0xFDC
  1628                           plusw2	equ	0xFDB
  1629                           fsr2h	equ	0xFDA
  1630                           fsr2l	equ	0xFD9
  1631                           status	equ	0xFD8

Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      30
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_Out@buffer	PTR const char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Out
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     933
                                             10 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                            _adcInit
                        _iniciarTest
                          _servoInit
 ---------------------------------------------------------------------------------
 (1) _servoInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _iniciarTest                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              7     4      3     573
                                              3 COMRAM     7     4      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             3     3      0     210
                                              3 COMRAM     3     3      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _adcInit
   _iniciarTest
   _servoInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C      1E       1       31.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1E      20        0.0%
DATA                 0      0      1E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu May 27 15:49:51 2021

                     l17 0CB4                       l90 0AF2                       l91 0B44  
                     l89 0AA6                       u15 096A                       u25 0984  
                     u35 09AA                       u45 081C                       u55 0840  
                     u65 0866                       u75 088A                       u85 08BE  
                     u95 0902                      l120 095A                      l104 0BE8  
                    l123 0A84                      l140 0CC8                      l141 0CD8  
                    l142 0CDE                      l136 0D08                      l139 0CCA  
                    l820 0962                      l900 0ACC                      l830 0A62  
                    l822 09E0                      l910 0B12                      l902 0ACE  
                    l832 0A6A                      l824 09E8                      l920 0B2C  
                    l912 0B14                      l904 0AE0                      l840 0810  
                    l834 0A6C                      l826 09EA                      l818 095E  
                    l930 0B38                      l922 0B2C                      l914 0B16  
                    l906 0B0A                      l850 08B4                      l842 0814  
                    l836 0A72                      l828 09F0                      l932 0B38  
                    l924 0B2C                      l916 0B18                      l908 0B10  
                    l860 0944                      l852 0932                      l844 08A4  
                    l838 0A74                      l934 0B3E                      l926 0B32  
                    l918 0B1A                      l862 094A                      l854 093A  
                    l846 08AC                      l870 0C9C                      l936 0B3E  
                    l928 0B32                      l880 0A86                      l856 093C  
                    l848 08AE                      l872 0CA0                      l864 0C70  
                    l890 0ABE                      l882 0A92                      l858 0942  
                    l874 0CA8                      l866 0C80                      l970 0CB8  
                    l892 0AC4                      l884 0AA2                      l876 0CB0  
                    l868 0C8C                      l972 0CC0                      l964 0CF6  
                    l894 0AC6                      l878 0CB2                      l974 0CC2  
                    l966 0CFC                      l896 0AC8                      l968 0CB6  
                    l898 0ACA          adcInit@ADC_PINs 0014                      u100 0C80  
                    u101 0C7C                      u110 0AF2                      u111 0AEE  
                    u130 0CD8                      u131 0CD4                      u207 0C2E  
                    u217 0C4A                      u307 0AD6                      u227 08A6  
                    u180 0BE8                      u317 0B0C                      u237 08B0  
                    u181 0BE4                      u327 0B22                      u247 0934  
                    u337 09E2                      u257 093E                      u347 09EC  
                    u267 0946                      u357 0A64                      u277 0950  
                    u197 0C04                      u367 0A6E                      u287 0A98  
                    u377 0A7A                      u297 0AC0                      wreg 000FE8  
                   l1102 0B88                     l1060 0B60                     l1070 0BB8  
                   l1062 0B6A                     l1054 0B48                     l1072 0BC8  
                   l1056 0B4C                     l1080 0BEA                     l1074 0BCC  
                   l1058 0B56                     l1066 0B74                     l1090 0C40  
                   l1082 0BFA                     l1068 0BAE                     l1092 0C58  
                   l1084 0C12                     l1094 0C5E                     l1086 0C24  
                   l1096 0C62                     l1088 0C3A                     STR_1 0801  
                   _TMR0 000FD6                     _main 0BEA                     start 0000  
           ?_iniciarTest 0013          __end_of_Lcd_Cmd 0A86          __end_of_Lcd_Out 0BEA  
           ___param_bank 000000               _Lcd_Chr_CP 080E                    ?_main 0013  
        __end_of_adcInit 0CB6                    _ADRES 000FC3                    _PORTB 000F81  
                  tablat 000FF5                    status 000FD8         __end_of_Lcd_Init 0B46  
        __initialization 0CE0             __end_of_main 0C6E                   ??_main 001D  
          __activetblptr 000002                ??_Lcd_Cmd 0013                ??_Lcd_Out 0019  
            ?_Lcd_Chr_CP 0013                ??_adcInit 0013                   _entero 0011  
                 clear_0 0CE6             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 0CEC            ___rparam_used 000001           __pcstackCOMRAM 0013  
   __size_of_iniciarTest 002A                ?_Lcd_Init 0013      __size_of_Lcd_Chr_CP 014E  
     __size_of_servoInit 0014               _buffer_lcd 0001               ??_Lcd_Init 0016  
                _Lcd_Cmd 095C                  _Lcd_Out 0B46                  __Hparam 0000  
                __Lparam 0000                  _adcInit 0C6E             __psmallconst 0800  
                __pcinit 0CE0                  __ramtop 0800                  __ptext0 0BEA  
                __ptext1 0CF6                  __ptext2 0CB6                  __ptext3 0C6E  
                __ptext4 0B46                  __ptext5 080E                  __ptext6 0A86  
                __ptext7 095C                _T0CONbits 000FD5     end_of_initialization 0CEC  
          __Lmediumconst 0000        __end_of_servoInit 0D0A                Lcd_Init@i 0017  
           ??_Lcd_Chr_CP 0013                  postinc0 000FEE                _PORTBbits 000F81  
              _TRISBbits 000F93                _TRISDbits 000F95       __end_of_Lcd_Chr_CP 095C  
    start_initialization 0CE0            Lcd_Out@buffer 0017        __size_of_Lcd_Init 00C0  
          ??_iniciarTest 0013              __pbssCOMRAM 0001                 ?_Lcd_Cmd 0013  
               ?_Lcd_Out 0016                 ?_adcInit 0013      __end_of_iniciarTest 0CE0  
            __smallconst 0800                 _LATBbits 000F8A                 _LATDbits 000F8C  
               _GO_nDONE 007E11                 Lcd_Out@x 0016                 Lcd_Out@y 001B  
              _servoInit 0CF6               _ADCON0bits 000FC2               _ADCON1bits 000FC1  
             _ADCON2bits 000FC0                 _Lcd_Init 0A86         __size_of_Lcd_Cmd 012A  
       __size_of_Lcd_Out 00A4                 __Hrparam 0000              _iniciarTest 0CB6  
               __Lrparam 0000               ?_servoInit 0013         __size_of_adcInit 0048  
         Lcd_Chr_CP@data 0015              Lcd_Cmd@data 0015            __size_of_main 0084  
            Lcd_Out@data 001C               _INTCONbits 000FF2              ??_servoInit 0013  
