

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu May 27 00:14:41 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4550 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     _ADRES	set	4035
    70  0000                     _LATDbits	set	3980
    71  0000                     _TRISDbits	set	3989
    72  0000                     _PORTBbits	set	3969
    73  0000                     _PORTB	set	3969
    74  0000                     _ADCON0bits	set	4034
    75  0000                     _ADCON2bits	set	4032
    76  0000                     _ADCON1bits	set	4033
    77  0000                     _GO_nDONE	set	32273
    78                           
    79                           	psect	smallconst
    80  000800                     __psmallconst:
    81                           	callstack 0
    82  000800  00                 	db	0
    83  000801                     STR_1:
    84  000801  42                 	db	66	;'B'
    85  000802  69                 	db	105	;'i'
    86  000803  65                 	db	101	;'e'
    87  000804  6E                 	db	110	;'n'
    88  000805  76                 	db	118	;'v'
    89  000806  65                 	db	101	;'e'
    90  000807  6E                 	db	110	;'n'
    91  000808  69                 	db	105	;'i'
    92  000809  64                 	db	100	;'d'
    93  00080A  6F                 	db	111	;'o'
    94  00080B  73                 	db	115	;'s'
    95  00080C  00                 	db	0
    96  00080D                     STR_2:
    97  00080D  41                 	db	65	;'A'
    98  00080E  44                 	db	68	;'D'
    99  00080F  43                 	db	67	;'C'
   100  000810  31                 	db	49	;'1'
   101  000811  3A                 	db	58	;':'
   102  000812  25                 	db	37
   103  000813  64                 	db	100	;'d'
   104  000814  00                 	db	0
   105  000815                     STR_3:
   106  000815  41                 	db	65	;'A'
   107  000816  44                 	db	68	;'D'
   108  000817  43                 	db	67	;'C'
   109  000818  32                 	db	50	;'2'
   110  000819  3A                 	db	58	;':'
   111  00081A  25                 	db	37
   112  00081B  64                 	db	100	;'d'
   113  00081C  00                 	db	0
   114  00081D  00                 	db	0	; dummy byte at the end
   115  0000                     
   116                           ; #config settings
   117                           
   118                           	psect	cinit
   119  0018C0                     __pcinit:
   120                           	callstack 0
   121  0018C0                     start_initialization:
   122                           	callstack 0
   123  0018C0                     __initialization:
   124                           	callstack 0
   125                           
   126                           ; Clear objects allocated to BANK0 (58 bytes)
   127  0018C0  EE00  F060         	lfsr	0,__pbssBANK0
   128  0018C4  0E3A               	movlw	58
   129  0018C6                     clear_0:
   130  0018C6  6AEE               	clrf	postinc0,c
   131  0018C8  06E8               	decf	wreg,f,c
   132  0018CA  E1FD               	bnz	clear_0
   133  0018CC                     end_of_initialization:
   134                           	callstack 0
   135  0018CC                     __end_of__initialization:
   136                           	callstack 0
   137  0018CC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   138  0018CE  6EF8               	movwf	tblptru,c
   139  0018D0  0100               	movlb	0
   140  0018D2  EF0C  F009         	goto	_main	;jump to C main() function
   141                           
   142                           	psect	bssBANK0
   143  000060                     __pbssBANK0:
   144                           	callstack 0
   145  000060                     _nout:
   146                           	callstack 0
   147  000060                     	ds	2
   148  000062                     _width:
   149                           	callstack 0
   150  000062                     	ds	2
   151  000064                     _prec:
   152                           	callstack 0
   153  000064                     	ds	2
   154  000066                     _flags:
   155                           	callstack 0
   156  000066                     	ds	2
   157  000068                     _entero:
   158                           	callstack 0
   159  000068                     	ds	2
   160  00006A                     _dbuf:
   161                           	callstack 0
   162  00006A                     	ds	32
   163  00008A                     _buffer_lcd:
   164                           	callstack 0
   165  00008A                     	ds	16
   166                           
   167                           	psect	cstackBANK0
   168  00009A                     __pcstackBANK0:
   169                           	callstack 0
   170  00009A                     	ds	2
   171  00009C                     sprintf@ap:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0x2
   175  00009C                     	ds	2
   176  00009E                     sprintf@f:
   177                           	callstack 0
   178                           
   179                           ; 6 bytes @ 0x4
   180  00009E                     	ds	6
   181                           
   182                           	psect	cstackCOMRAM
   183  000001                     __pcstackCOMRAM:
   184                           	callstack 0
   185  000001                     ??_Lcd_Cmd:
   186  000001                     ??_Lcd_Chr_CP:
   187  000001                     ??_adcInit:
   188  000001                     ?_strlen:
   189                           	callstack 0
   190  000001                     ?_adcGetValue:
   191                           	callstack 0
   192  000001                     ?___aodiv:
   193                           	callstack 0
   194  000001                     ?___aomod:
   195                           	callstack 0
   196  000001                     fputc@c:
   197                           	callstack 0
   198  000001                     strlen@s:
   199                           	callstack 0
   200  000001                     ___aodiv@dividend:
   201                           	callstack 0
   202  000001                     ___aomod@dividend:
   203                           	callstack 0
   204                           
   205                           ; 8 bytes @ 0x0
   206  000001                     	ds	1
   207  000002                     adcInit@ADC_PINs:
   208                           	callstack 0
   209                           
   210                           ; 1 bytes @ 0x1
   211  000002                     	ds	1
   212  000003                     ??_adcGetValue:
   213  000003                     Lcd_Chr_CP@data:
   214                           	callstack 0
   215  000003                     Lcd_Cmd@data:
   216                           	callstack 0
   217  000003                     fputc@fp:
   218                           	callstack 0
   219  000003                     strlen@a:
   220                           	callstack 0
   221                           
   222                           ; 2 bytes @ 0x2
   223  000003                     	ds	1
   224  000004                     ??_Lcd_Init:
   225  000004                     adcGetValue@PinADC:
   226                           	callstack 0
   227  000004                     Lcd_Out@x:
   228                           	callstack 0
   229  000004                     Lcd_Out2@x:
   230                           	callstack 0
   231                           
   232                           ; 1 bytes @ 0x3
   233  000004                     	ds	1
   234  000005                     ??_fputc:
   235  000005                     Lcd_Init@i:
   236                           	callstack 0
   237  000005                     Lcd_Out@buffer:
   238                           	callstack 0
   239  000005                     Lcd_Out2@buffer:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0x4
   243  000005                     	ds	2
   244  000007                     ??_Lcd_Out:
   245  000007                     ??_Lcd_Out2:
   246                           
   247                           ; 1 bytes @ 0x6
   248  000007                     	ds	2
   249  000009                     Lcd_Out@y:
   250                           	callstack 0
   251  000009                     Lcd_Out2@y:
   252                           	callstack 0
   253  000009                     ___aodiv@divisor:
   254                           	callstack 0
   255  000009                     ___aomod@divisor:
   256                           	callstack 0
   257                           
   258                           ; 8 bytes @ 0x8
   259  000009                     	ds	1
   260  00000A                     Lcd_Out@data:
   261                           	callstack 0
   262  00000A                     Lcd_Out2@data:
   263                           	callstack 0
   264  00000A                     fputs@s:
   265                           	callstack 0
   266                           
   267                           ; 2 bytes @ 0x9
   268  00000A                     	ds	2
   269  00000C                     fputs@fp:
   270                           	callstack 0
   271                           
   272                           ; 2 bytes @ 0xB
   273  00000C                     	ds	2
   274  00000E                     fputs@c:
   275                           	callstack 0
   276                           
   277                           ; 1 bytes @ 0xD
   278  00000E                     	ds	1
   279  00000F                     fputs@i:
   280                           	callstack 0
   281                           
   282                           ; 2 bytes @ 0xE
   283  00000F                     	ds	2
   284  000011                     ?_pad:
   285                           	callstack 0
   286  000011                     ___aodiv@counter:
   287                           	callstack 0
   288  000011                     ___aomod@counter:
   289                           	callstack 0
   290  000011                     pad@fp:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x10
   294  000011                     	ds	1
   295  000012                     ___aodiv@sign:
   296                           	callstack 0
   297  000012                     ___aomod@sign:
   298                           	callstack 0
   299                           
   300                           ; 1 bytes @ 0x11
   301  000012                     	ds	1
   302  000013                     ?_abs:
   303                           	callstack 0
   304  000013                     pad@buf:
   305                           	callstack 0
   306  000013                     abs@a:
   307                           	callstack 0
   308  000013                     ___aodiv@quotient:
   309                           	callstack 0
   310                           
   311                           ; 8 bytes @ 0x12
   312  000013                     	ds	2
   313  000015                     ??_abs:
   314  000015                     pad@p:
   315                           	callstack 0
   316                           
   317                           ; 2 bytes @ 0x14
   318  000015                     	ds	2
   319  000017                     ??_pad:
   320                           
   321                           ; 1 bytes @ 0x16
   322  000017                     	ds	1
   323  000018                     pad@i:
   324                           	callstack 0
   325                           
   326                           ; 2 bytes @ 0x17
   327  000018                     	ds	2
   328  00001A                     pad@w:
   329                           	callstack 0
   330                           
   331                           ; 2 bytes @ 0x19
   332  00001A                     	ds	2
   333  00001C                     ?_dtoa:
   334                           	callstack 0
   335  00001C                     dtoa@fp:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x1B
   339  00001C                     	ds	2
   340  00001E                     dtoa@d:
   341                           	callstack 0
   342                           
   343                           ; 8 bytes @ 0x1D
   344  00001E                     	ds	8
   345  000026                     ??_dtoa:
   346                           
   347                           ; 1 bytes @ 0x25
   348  000026                     	ds	8
   349  00002E                     _dtoa$914:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0x2D
   353  00002E                     	ds	2
   354  000030                     dtoa@p:
   355                           	callstack 0
   356                           
   357                           ; 2 bytes @ 0x2F
   358  000030                     	ds	2
   359  000032                     dtoa@w:
   360                           	callstack 0
   361                           
   362                           ; 2 bytes @ 0x31
   363  000032                     	ds	2
   364  000034                     dtoa@s:
   365                           	callstack 0
   366                           
   367                           ; 2 bytes @ 0x33
   368  000034                     	ds	2
   369  000036                     dtoa@n:
   370                           	callstack 0
   371                           
   372                           ; 8 bytes @ 0x35
   373  000036                     	ds	8
   374  00003E                     dtoa@i:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0x3D
   378  00003E                     	ds	2
   379  000040                     ?_vfpfcnvrt:
   380                           	callstack 0
   381  000040                     vfpfcnvrt@fp:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0x3F
   385  000040                     	ds	2
   386  000042                     vfpfcnvrt@fmt:
   387                           	callstack 0
   388                           
   389                           ; 2 bytes @ 0x41
   390  000042                     	ds	2
   391  000044                     vfpfcnvrt@ap:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x43
   395  000044                     	ds	2
   396  000046                     ??_vfpfcnvrt:
   397                           
   398                           ; 1 bytes @ 0x45
   399  000046                     	ds	2
   400  000048                     vfpfcnvrt@ll:
   401                           	callstack 0
   402                           
   403                           ; 8 bytes @ 0x47
   404  000048                     	ds	8
   405  000050                     ?_vfprintf:
   406                           	callstack 0
   407  000050                     vfprintf@fp:
   408                           	callstack 0
   409                           
   410                           ; 2 bytes @ 0x4F
   411  000050                     	ds	2
   412  000052                     vfprintf@fmt:
   413                           	callstack 0
   414                           
   415                           ; 2 bytes @ 0x51
   416  000052                     	ds	2
   417  000054                     vfprintf@ap:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0x53
   421  000054                     	ds	2
   422  000056                     vfprintf@cfmt:
   423                           	callstack 0
   424                           
   425                           ; 2 bytes @ 0x55
   426  000056                     	ds	2
   427  000058                     ?_sprintf:
   428                           	callstack 0
   429  000058                     sprintf@s:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x57
   433  000058                     	ds	2
   434  00005A                     sprintf@fmt:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x59
   438  00005A                     	ds	4
   439  00005E                     ??_main:
   440                           
   441                           ; 1 bytes @ 0x5D
   442  00005E                     	ds	2
   443                           
   444 ;;
   445 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   446 ;;
   447 ;; *************** function _main *****************
   448 ;; Defined at:
   449 ;;		line 17 in file "main.c"
   450 ;; Parameters:    Size  Location     Type
   451 ;;		None
   452 ;; Auto vars:     Size  Location     Type
   453 ;;		None
   454 ;; Return value:  Size  Location     Type
   455 ;;                  1    wreg      void 
   456 ;; Registers used:
   457 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   458 ;; Tracked objects:
   459 ;;		On entry : 0/0
   460 ;;		On exit  : 0/0
   461 ;;		Unchanged: 0/0
   462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   463 ;;      Params:         0       0       0       0       0       0       0       0       0
   464 ;;      Locals:         0       0       0       0       0       0       0       0       0
   465 ;;      Temps:          2       0       0       0       0       0       0       0       0
   466 ;;      Totals:         2       0       0       0       0       0       0       0       0
   467 ;;Total ram usage:        2 bytes
   468 ;; Hardware stack levels required when called:    8
   469 ;; This function calls:
   470 ;;		_Lcd_Cmd
   471 ;;		_Lcd_Init
   472 ;;		_Lcd_Out
   473 ;;		_Lcd_Out2
   474 ;;		_adcGetValue
   475 ;;		_adcInit
   476 ;;		_sprintf
   477 ;; This function is called by:
   478 ;;		Startup code after reset
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482                           	psect	text0
   483  001218                     __ptext0:
   484                           	callstack 0
   485  001218                     _main:
   486                           	callstack 23
   487  001218                     
   488                           ;main.c: 19:     Lcd_Init();
   489  001218  EC66  F00A         	call	_Lcd_Init	;wreg free
   490                           
   491                           ;main.c: 20:     Lcd_Cmd(1);
   492  00121C  0E01               	movlw	1
   493  00121E  EC77  F008         	call	_Lcd_Cmd
   494                           
   495                           ;main.c: 21:     Lcd_Cmd(12);
   496  001222  0E0C               	movlw	12
   497  001224  EC77  F008         	call	_Lcd_Cmd
   498  001228                     
   499                           ;main.c: 22:      _delay((unsigned long)((100)*(12000000/4000.0)));
   500  001228  0E02               	movlw	2
   501  00122A  6E5F               	movwf	(??_main+1)^0,c
   502  00122C  0E86               	movlw	134
   503  00122E  6E5E               	movwf	??_main^0,c
   504  001230  0E99               	movlw	153
   505  001232                     u1197:
   506  001232  2EE8               	decfsz	wreg,f,c
   507  001234  D7FE               	bra	u1197
   508  001236  2E5E               	decfsz	??_main^0,f,c
   509  001238  D7FC               	bra	u1197
   510  00123A  2E5F               	decfsz	(??_main+1)^0,f,c
   511  00123C  D7FA               	bra	u1197
   512  00123E  F000               	nop	
   513  001240                     
   514                           ;main.c: 23:     Lcd_Out(1,0, (const int8_t*)"Bienvenidos");
   515  001240  0E00               	movlw	0
   516  001242  6E04               	movwf	Lcd_Out@x^0,c
   517  001244  0E01               	movlw	low STR_1
   518  001246  6E05               	movwf	Lcd_Out@buffer^0,c
   519  001248  0E08               	movlw	high STR_1
   520  00124A  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   521  00124C  0E01               	movlw	1
   522  00124E  ECC6  F00A         	call	_Lcd_Out
   523  001252                     
   524                           ;main.c: 24:     _delay((unsigned long)((1000)*(12000000/4000.0)));
   525  001252  0E10               	movlw	16
   526  001254  6E5F               	movwf	(??_main+1)^0,c
   527  001256  0E39               	movlw	57
   528  001258  6E5E               	movwf	??_main^0,c
   529  00125A  0E0E               	movlw	14
   530  00125C                     u1207:
   531  00125C  2EE8               	decfsz	wreg,f,c
   532  00125E  D7FE               	bra	u1207
   533  001260  2E5E               	decfsz	??_main^0,f,c
   534  001262  D7FC               	bra	u1207
   535  001264  2E5F               	decfsz	(??_main+1)^0,f,c
   536  001266  D7FA               	bra	u1207
   537  001268                     
   538                           ;main.c: 25:     (Lcd_Cmd(1),_delay((unsigned long)((100)*(12000000/4000.0))));
   539  001268  0E01               	movlw	1
   540  00126A  EC77  F008         	call	_Lcd_Cmd
   541  00126E  0E02               	movlw	2
   542  001270  6E5F               	movwf	(??_main+1)^0,c
   543  001272  0E86               	movlw	134
   544  001274  6E5E               	movwf	??_main^0,c
   545  001276  0E99               	movlw	153
   546  001278                     u1217:
   547  001278  2EE8               	decfsz	wreg,f,c
   548  00127A  D7FE               	bra	u1217
   549  00127C  2E5E               	decfsz	??_main^0,f,c
   550  00127E  D7FC               	bra	u1217
   551  001280  2E5F               	decfsz	(??_main+1)^0,f,c
   552  001282  D7FA               	bra	u1217
   553  001284  F000               	nop	
   554  001286                     
   555                           ;main.c: 26:     adcInit(2);
   556  001286  0E02               	movlw	2
   557  001288  ECC1  F00B         	call	_adcInit
   558  00128C                     l1872:
   559                           
   560                           ;main.c: 28:     {;main.c: 29:         entero = adcGetValue(0);
   561  00128C  0E00               	movlw	0
   562  00128E  EC27  F00C         	call	_adcGetValue
   563  001292  C001  F068         	movff	?_adcGetValue,_entero
   564  001296  C002  F069         	movff	?_adcGetValue+1,_entero+1
   565  00129A                     
   566                           ;main.c: 30:         sprintf((char *)buffer_lcd,"ADC1:%d",entero);
   567  00129A  0E8A               	movlw	low _buffer_lcd
   568  00129C  6E58               	movwf	sprintf@s^0,c
   569  00129E  0E00               	movlw	high _buffer_lcd
   570  0012A0  6E59               	movwf	(sprintf@s+1)^0,c
   571  0012A2  0E0D               	movlw	low STR_2
   572  0012A4  6E5A               	movwf	sprintf@fmt^0,c
   573  0012A6  0E08               	movlw	high STR_2
   574  0012A8  6E5B               	movwf	(sprintf@fmt+1)^0,c
   575  0012AA  C068  F05C         	movff	_entero,?_sprintf+4
   576  0012AE  C069  F05D         	movff	_entero+1,?_sprintf+5
   577  0012B2  EC98  F00B         	call	_sprintf	;wreg free
   578  0012B6                     
   579                           ;main.c: 31:         Lcd_Out2(1,0,(int8_t*)buffer_lcd);
   580  0012B6  0E00               	movlw	0
   581  0012B8  6E04               	movwf	Lcd_Out2@x^0,c
   582  0012BA  0E8A               	movlw	low _buffer_lcd
   583  0012BC  6E05               	movwf	Lcd_Out2@buffer^0,c
   584  0012BE  0E00               	movlw	high _buffer_lcd
   585  0012C0  6E06               	movwf	(Lcd_Out2@buffer+1)^0,c
   586  0012C2  0E01               	movlw	1
   587  0012C4  EC18  F00B         	call	_Lcd_Out2
   588  0012C8                     
   589                           ;main.c: 32:         _delay((unsigned long)((100)*(12000000/4000.0)));
   590  0012C8  0E02               	movlw	2
   591  0012CA  6E5F               	movwf	(??_main+1)^0,c
   592  0012CC  0E86               	movlw	134
   593  0012CE  6E5E               	movwf	??_main^0,c
   594  0012D0  0E99               	movlw	153
   595  0012D2                     u1227:
   596  0012D2  2EE8               	decfsz	wreg,f,c
   597  0012D4  D7FE               	bra	u1227
   598  0012D6  2E5E               	decfsz	??_main^0,f,c
   599  0012D8  D7FC               	bra	u1227
   600  0012DA  2E5F               	decfsz	(??_main+1)^0,f,c
   601  0012DC  D7FA               	bra	u1227
   602  0012DE  F000               	nop	
   603  0012E0                     
   604                           ;main.c: 33:         entero = adcGetValue(1);
   605  0012E0  0E01               	movlw	1
   606  0012E2  EC27  F00C         	call	_adcGetValue
   607  0012E6  C001  F068         	movff	?_adcGetValue,_entero
   608  0012EA  C002  F069         	movff	?_adcGetValue+1,_entero+1
   609  0012EE                     
   610                           ;main.c: 34:         sprintf((char *)buffer_lcd,"ADC2:%d",entero);
   611  0012EE  0E8A               	movlw	low _buffer_lcd
   612  0012F0  6E58               	movwf	sprintf@s^0,c
   613  0012F2  0E00               	movlw	high _buffer_lcd
   614  0012F4  6E59               	movwf	(sprintf@s+1)^0,c
   615  0012F6  0E15               	movlw	low STR_3
   616  0012F8  6E5A               	movwf	sprintf@fmt^0,c
   617  0012FA  0E08               	movlw	high STR_3
   618  0012FC  6E5B               	movwf	(sprintf@fmt+1)^0,c
   619  0012FE  C068  F05C         	movff	_entero,?_sprintf+4
   620  001302  C069  F05D         	movff	_entero+1,?_sprintf+5
   621  001306  EC98  F00B         	call	_sprintf	;wreg free
   622  00130A                     
   623                           ;main.c: 35:         Lcd_Out2(2,0,(int8_t*)buffer_lcd);
   624  00130A  0E00               	movlw	0
   625  00130C  6E04               	movwf	Lcd_Out2@x^0,c
   626  00130E  0E8A               	movlw	low _buffer_lcd
   627  001310  6E05               	movwf	Lcd_Out2@buffer^0,c
   628  001312  0E00               	movlw	high _buffer_lcd
   629  001314  6E06               	movwf	(Lcd_Out2@buffer+1)^0,c
   630  001316  0E02               	movlw	2
   631  001318  EC18  F00B         	call	_Lcd_Out2
   632  00131C                     
   633                           ;main.c: 36:         _delay((unsigned long)((100)*(12000000/4000.0)));
   634  00131C  0E02               	movlw	2
   635  00131E  6E5F               	movwf	(??_main+1)^0,c
   636  001320  0E86               	movlw	134
   637  001322  6E5E               	movwf	??_main^0,c
   638  001324  0E99               	movlw	153
   639  001326                     u1237:
   640  001326  2EE8               	decfsz	wreg,f,c
   641  001328  D7FE               	bra	u1237
   642  00132A  2E5E               	decfsz	??_main^0,f,c
   643  00132C  D7FC               	bra	u1237
   644  00132E  2E5F               	decfsz	(??_main+1)^0,f,c
   645  001330  D7FA               	bra	u1237
   646  001332  F000               	nop	
   647  001334  EF46  F009         	goto	l1872
   648  001338  EF00  F000         	goto	start
   649  00133C                     __end_of_main:
   650                           	callstack 0
   651                           
   652 ;; *************** function _sprintf *****************
   653 ;; Defined at:
   654 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_sprintf.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;  s               2   87[COMRAM] PTR unsigned char 
   657 ;;		 -> buffer_lcd(16), 
   658 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   659 ;;		 -> STR_3(8), STR_2(8), 
   660 ;; Auto vars:     Size  Location     Type
   661 ;;  f               6    4[BANK0 ] struct _IO_FILE
   662 ;;  ap              2    2[BANK0 ] PTR void [1]
   663 ;;		 -> ?_sprintf(2), 
   664 ;;  ret             2    0        int 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  2   87[COMRAM] int 
   667 ;; Registers used:
   668 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   674 ;;      Params:         6       0       0       0       0       0       0       0       0
   675 ;;      Locals:         0      10       0       0       0       0       0       0       0
   676 ;;      Temps:          0       0       0       0       0       0       0       0       0
   677 ;;      Totals:         6      10       0       0       0       0       0       0       0
   678 ;;Total ram usage:       16 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; Hardware stack levels required when called:    7
   681 ;; This function calls:
   682 ;;		_vfprintf
   683 ;; This function is called by:
   684 ;;		_main
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text1
   689  001730                     __ptext1:
   690                           	callstack 0
   691  001730                     _sprintf:
   692                           	callstack 23
   693  001730  0E5C               	movlw	low (?_sprintf+4)
   694  001732  0100               	movlb	0	; () banked
   695  001734  6F9C               	movwf	sprintf@ap& (0+255),b
   696  001736  0E00               	movlw	high (?_sprintf+4)
   697  001738  6F9D               	movwf	(sprintf@ap+1)& (0+255),b
   698  00173A  C058  F09E         	movff	sprintf@s,sprintf@f
   699  00173E  C059  F09F         	movff	sprintf@s+1,sprintf@f+1
   700  001742                     
   701                           ; BSR set to: 0
   702  001742  0E00               	movlw	0
   703  001744  6FA1               	movwf	(sprintf@f+3)& (0+255),b
   704  001746  0E00               	movlw	0
   705  001748  6FA0               	movwf	(sprintf@f+2)& (0+255),b
   706  00174A                     
   707                           ; BSR set to: 0
   708  00174A  0E00               	movlw	0
   709  00174C  6FA3               	movwf	(sprintf@f+5)& (0+255),b
   710  00174E  0E00               	movlw	0
   711  001750  6FA2               	movwf	(sprintf@f+4)& (0+255),b
   712  001752                     
   713                           ; BSR set to: 0
   714  001752  0E9E               	movlw	low sprintf@f
   715  001754  6E50               	movwf	vfprintf@fp^0,c
   716  001756  0E00               	movlw	high sprintf@f
   717  001758  6E51               	movwf	(vfprintf@fp+1)^0,c
   718  00175A  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
   719  00175E  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   720  001762  0E9C               	movlw	low sprintf@ap
   721  001764  6E54               	movwf	vfprintf@ap^0,c
   722  001766  0E00               	movlw	high sprintf@ap
   723  001768  6E55               	movwf	(vfprintf@ap+1)^0,c
   724  00176A  EC67  F00B         	call	_vfprintf	;wreg free
   725  00176E  0100               	movlb	0	; () banked
   726  001770  51A0               	movf	(sprintf@f+2)& (0+255),w,b
   727  001772  2458               	addwf	sprintf@s^0,w,c
   728  001774  6ED9               	movwf	fsr2l,c
   729  001776  51A1               	movf	(sprintf@f+3)& (0+255),w,b
   730  001778  2059               	addwfc	(sprintf@s+1)^0,w,c
   731  00177A  6EDA               	movwf	fsr2h,c
   732  00177C  0E00               	movlw	0
   733  00177E  6EDF               	movwf	indf2,c
   734  001780                     
   735                           ; BSR set to: 0
   736  001780  0012               	return		;funcret
   737  001782                     __end_of_sprintf:
   738                           	callstack 0
   739                           
   740 ;; *************** function _vfprintf *****************
   741 ;; Defined at:
   742 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   745 ;;		 -> sprintf@f(6), 
   746 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   747 ;;		 -> STR_3(8), STR_2(8), 
   748 ;;  ap              2   83[COMRAM] PTR PTR void 
   749 ;;		 -> sprintf@ap(2), 
   750 ;; Auto vars:     Size  Location     Type
   751 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   752 ;;		 -> STR_3(8), STR_2(8), 
   753 ;; Return value:  Size  Location     Type
   754 ;;                  2   79[COMRAM] int 
   755 ;; Registers used:
   756 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   762 ;;      Params:         6       0       0       0       0       0       0       0       0
   763 ;;      Locals:         2       0       0       0       0       0       0       0       0
   764 ;;      Temps:          0       0       0       0       0       0       0       0       0
   765 ;;      Totals:         8       0       0       0       0       0       0       0       0
   766 ;;Total ram usage:        8 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    6
   769 ;; This function calls:
   770 ;;		_vfpfcnvrt
   771 ;; This function is called by:
   772 ;;		_sprintf
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           	psect	text2
   777  0016CE                     __ptext2:
   778                           	callstack 0
   779  0016CE                     _vfprintf:
   780                           	callstack 23
   781  0016CE                     
   782                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.31\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   783  0016CE  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   784  0016D2  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   785  0016D6                     
   786                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   787  0016D6  0E00               	movlw	0
   788  0016D8  0100               	movlb	0	; () banked
   789  0016DA  6F61               	movwf	(_nout+1)& (0+255),b
   790  0016DC  0E00               	movlw	0
   791  0016DE  6F60               	movwf	_nout& (0+255),b
   792                           
   793                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   794  0016E0  EF85  F00B         	goto	l1712
   795  0016E4                     l1710:
   796                           
   797                           ; BSR set to: 0
   798                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   799  0016E4  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   800  0016E8  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   801  0016EC  0E56               	movlw	low vfprintf@cfmt
   802  0016EE  6E42               	movwf	vfpfcnvrt@fmt^0,c
   803  0016F0  0E00               	movlw	high vfprintf@cfmt
   804  0016F2  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
   805  0016F4  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   806  0016F8  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   807  0016FC  EC80  F005         	call	_vfpfcnvrt	;wreg free
   808  001700  5040               	movf	?_vfpfcnvrt^0,w,c
   809  001702  0100               	movlb	0	; () banked
   810  001704  2760               	addwf	_nout& (0+255),f,b
   811  001706  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
   812  001708  2361               	addwfc	(_nout+1)& (0+255),f,b
   813  00170A                     l1712:
   814                           
   815                           ; BSR set to: 0
   816                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   817  00170A  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   818  00170E  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   819  001712                     	if	0	;tblptru may be non-zero
   820  001712                     	endif
   821  001712                     	if	0	;tblptru may be non-zero
   822  001712                     	endif
   823  001712  0008               	tblrd		*
   824  001714  50F5               	movf	tablat,w,c
   825  001716  0900               	iorlw	0
   826  001718  A4D8               	btfss	status,2,c
   827  00171A  EF91  F00B         	goto	u1131
   828  00171E  EF93  F00B         	goto	u1130
   829  001722                     u1131:
   830  001722  EF72  F00B         	goto	l1710
   831  001726                     u1130:
   832  001726                     
   833                           ; BSR set to: 0
   834                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   835  001726  C060  F050         	movff	_nout,?_vfprintf
   836  00172A  C061  F051         	movff	_nout+1,?_vfprintf+1
   837  00172E                     
   838                           ; BSR set to: 0
   839  00172E  0012               	return		;funcret
   840  001730                     __end_of_vfprintf:
   841                           	callstack 0
   842                           
   843 ;; *************** function _vfpfcnvrt *****************
   844 ;; Defined at:
   845 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   848 ;;		 -> sprintf@f(6), 
   849 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   850 ;;		 -> vfprintf@cfmt(2), 
   851 ;;  ap              2   67[COMRAM] PTR PTR void 
   852 ;;		 -> sprintf@ap(2), 
   853 ;; Auto vars:     Size  Location     Type
   854 ;;  ll              8   71[COMRAM] long long 
   855 ;;  llu             8    0        unsigned long long 
   856 ;;  f               4    0        unsigned long long 
   857 ;;  vp              3    0        PTR void 
   858 ;;  ct              3    0        unsigned char [3]
   859 ;;  cp              3    0        PTR unsigned char 
   860 ;;  i               2    0        int 
   861 ;;  done            2    0        int 
   862 ;;  c               1    0        unsigned char 
   863 ;; Return value:  Size  Location     Type
   864 ;;                  2   63[COMRAM] int 
   865 ;; Registers used:
   866 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   872 ;;      Params:         6       0       0       0       0       0       0       0       0
   873 ;;      Locals:         8       0       0       0       0       0       0       0       0
   874 ;;      Temps:          2       0       0       0       0       0       0       0       0
   875 ;;      Totals:        16       0       0       0       0       0       0       0       0
   876 ;;Total ram usage:       16 bytes
   877 ;; Hardware stack levels used:    1
   878 ;; Hardware stack levels required when called:    5
   879 ;; This function calls:
   880 ;;		_dtoa
   881 ;;		_fputc
   882 ;; This function is called by:
   883 ;;		_vfprintf
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text3
   888  000B00                     __ptext3:
   889                           	callstack 0
   890  000B00                     _vfpfcnvrt:
   891                           	callstack 23
   892  000B00                     
   893                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.31\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.31\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.31\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          1\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   894  000B00  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   895  000B04  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   896  000B08  CFDE FFF6          	movff	postinc2,tblptrl
   897  000B0C  CFDD FFF7          	movff	postdec2,tblptrh
   898  000B10                     	if	0	;tblptru may be non-zero
   899  000B10                     	endif
   900  000B10                     	if	0	;tblptru may be non-zero
   901  000B10                     	endif
   902  000B10  0008               	tblrd		*
   903  000B12  50F5               	movf	tablat,w,c
   904  000B14  0A25               	xorlw	37
   905  000B16  A4D8               	btfss	status,2,c
   906  000B18  EF90  F005         	goto	u1001
   907  000B1C  EF92  F005         	goto	u1000
   908  000B20                     u1001:
   909  000B20  EF3E  F006         	goto	l1652
   910  000B24                     u1000:
   911  000B24                     
   912                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   913  000B24  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   914  000B28  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   915  000B2C  2ADE               	incf	postinc2,f,c
   916  000B2E  0E00               	movlw	0
   917  000B30  22DD               	addwfc	postdec2,f,c
   918  000B32                     
   919                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   920  000B32  0E00               	movlw	0
   921  000B34  0100               	movlb	0	; () banked
   922  000B36  6F63               	movwf	(_width+1)& (0+255),b
   923  000B38  0E00               	movlw	0
   924  000B3A  6F62               	movwf	_width& (0+255),b
   925  000B3C  C062  F066         	movff	_width,_flags
   926  000B40  C063  F067         	movff	_width+1,_flags+1
   927  000B44                     
   928                           ; BSR set to: 0
   929                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   930  000B44  6964               	setf	_prec& (0+255),b
   931  000B46  6965               	setf	(_prec+1)& (0+255),b
   932  000B48                     
   933                           ; BSR set to: 0
   934                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   935  000B48  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   936  000B4C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   937  000B50  CFDE FFF6          	movff	postinc2,tblptrl
   938  000B54  CFDD FFF7          	movff	postdec2,tblptrh
   939  000B58                     	if	0	;tblptru may be non-zero
   940  000B58                     	endif
   941  000B58                     	if	0	;tblptru may be non-zero
   942  000B58                     	endif
   943  000B58  0008               	tblrd		*
   944  000B5A  50F5               	movf	tablat,w,c
   945  000B5C  0A64               	xorlw	100
   946  000B5E  B4D8               	btfsc	status,2,c
   947  000B60  EFB4  F005         	goto	u1011
   948  000B64  EFB6  F005         	goto	u1010
   949  000B68                     u1011:
   950  000B68  EFC8  F005         	goto	l1630
   951  000B6C                     u1010:
   952  000B6C                     
   953                           ; BSR set to: 0
   954  000B6C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   955  000B70  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   956  000B74  CFDE FFF6          	movff	postinc2,tblptrl
   957  000B78  CFDD FFF7          	movff	postdec2,tblptrh
   958  000B7C                     	if	0	;tblptru may be non-zero
   959  000B7C                     	endif
   960  000B7C                     	if	0	;tblptru may be non-zero
   961  000B7C                     	endif
   962  000B7C  0008               	tblrd		*
   963  000B7E  50F5               	movf	tablat,w,c
   964  000B80  0A69               	xorlw	105
   965  000B82  A4D8               	btfss	status,2,c
   966  000B84  EFC6  F005         	goto	u1021
   967  000B88  EFC8  F005         	goto	u1020
   968  000B8C                     u1021:
   969  000B8C  EF08  F006         	goto	l1636
   970  000B90                     u1020:
   971  000B90                     l1630:
   972                           
   973                           ; BSR set to: 0
   974                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
   975  000B90  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   976  000B94  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   977  000B98  2ADE               	incf	postinc2,f,c
   978  000B9A  0E00               	movlw	0
   979  000B9C  22DD               	addwfc	postdec2,f,c
   980                           
   981                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
   982  000B9E  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   983  000BA2  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   984  000BA6  CFDF F046          	movff	indf2,??_vfpfcnvrt
   985  000BAA  0E02               	movlw	2
   986  000BAC  26DE               	addwf	postinc2,f,c
   987  000BAE  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
   988  000BB2  0E00               	movlw	0
   989  000BB4  22DD               	addwfc	postdec2,f,c
   990  000BB6  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
   991  000BBA  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   992  000BBE  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
   993  000BC2  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
   994  000BC6  0E00               	movlw	0
   995  000BC8  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
   996  000BCA  0EFF               	movlw	-1
   997  000BCC  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
   998  000BCE  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
   999  000BD0  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  1000  000BD2  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  1001  000BD4  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  1002  000BD6  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  1003  000BD8                     
  1004                           ; BSR set to: 0
  1005                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  1006  000BD8  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1007  000BDC  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1008  000BE0  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1009  000BE4  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1010  000BE8  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1011  000BEC  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1012  000BF0  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1013  000BF4  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1014  000BF8  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1015  000BFC  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1016  000C00  EC0F  F004         	call	_dtoa	;wreg free
  1017  000C04  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1018  000C08  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1019  000C0C  EF59  F006         	goto	l871
  1020  000C10                     l1636:
  1021                           
  1022                           ; BSR set to: 0
  1023                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1024  000C10  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1025  000C14  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1026  000C18  CFDE FFF6          	movff	postinc2,tblptrl
  1027  000C1C  CFDD FFF7          	movff	postdec2,tblptrh
  1028  000C20                     	if	0	;tblptru may be non-zero
  1029  000C20                     	endif
  1030  000C20                     	if	0	;tblptru may be non-zero
  1031  000C20                     	endif
  1032  000C20  0008               	tblrd		*
  1033  000C22  50F5               	movf	tablat,w,c
  1034  000C24  0A25               	xorlw	37
  1035  000C26  A4D8               	btfss	status,2,c
  1036  000C28  EF18  F006         	goto	u1031
  1037  000C2C  EF1A  F006         	goto	u1030
  1038  000C30                     u1031:
  1039  000C30  EF31  F006         	goto	l1646
  1040  000C34                     u1030:
  1041  000C34                     
  1042                           ; BSR set to: 0
  1043                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1044  000C34  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1045  000C38  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1046  000C3C  2ADE               	incf	postinc2,f,c
  1047  000C3E  0E00               	movlw	0
  1048  000C40  22DD               	addwfc	postdec2,f,c
  1049  000C42                     
  1050                           ; BSR set to: 0
  1051                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1052  000C42  0E00               	movlw	0
  1053  000C44  6E02               	movwf	(fputc@c+1)^0,c
  1054  000C46  0E25               	movlw	37
  1055  000C48  6E01               	movwf	fputc@c^0,c
  1056  000C4A  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1057  000C4E  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1058  000C52  EC9E  F009         	call	_fputc	;wreg free
  1059  000C56                     l1642:
  1060                           
  1061                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1062  000C56  0E00               	movlw	0
  1063  000C58  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1064  000C5A  0E01               	movlw	1
  1065  000C5C  6E40               	movwf	?_vfpfcnvrt^0,c
  1066  000C5E  EF59  F006         	goto	l871
  1067  000C62                     l1646:
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1071  000C62  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1072  000C66  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1073  000C6A  2ADE               	incf	postinc2,f,c
  1074  000C6C  0E00               	movlw	0
  1075  000C6E  22DD               	addwfc	postdec2,f,c
  1076  000C70                     
  1077                           ; BSR set to: 0
  1078                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1079  000C70  0E00               	movlw	0
  1080  000C72  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1081  000C74  0E00               	movlw	0
  1082  000C76  6E40               	movwf	?_vfpfcnvrt^0,c
  1083  000C78  EF59  F006         	goto	l871
  1084  000C7C                     l1652:
  1085                           
  1086                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1087  000C7C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1088  000C80  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1089  000C84  CFDE FFF6          	movff	postinc2,tblptrl
  1090  000C88  CFDD FFF7          	movff	postdec2,tblptrh
  1091  000C8C                     	if	0	;tblptru may be non-zero
  1092  000C8C                     	endif
  1093  000C8C                     	if	0	;tblptru may be non-zero
  1094  000C8C                     	endif
  1095  000C8C  0008               	tblrd		*
  1096  000C8E  50F5               	movf	tablat,w,c
  1097  000C90  6E01               	movwf	fputc@c^0,c
  1098  000C92  6A02               	clrf	(fputc@c+1)^0,c
  1099  000C94  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1100  000C98  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1101  000C9C  EC9E  F009         	call	_fputc	;wreg free
  1102  000CA0                     
  1103                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1104  000CA0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1105  000CA4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1106  000CA8  2ADE               	incf	postinc2,f,c
  1107  000CAA  0E00               	movlw	0
  1108  000CAC  22DD               	addwfc	postdec2,f,c
  1109  000CAE  EF2B  F006         	goto	l1642
  1110  000CB2                     l871:
  1111  000CB2  0012               	return		;funcret
  1112  000CB4                     __end_of_vfpfcnvrt:
  1113                           	callstack 0
  1114                           
  1115 ;; *************** function _dtoa *****************
  1116 ;; Defined at:
  1117 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1120 ;;		 -> sprintf@f(6), 
  1121 ;;  d               8   29[COMRAM] long long 
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  n               8   53[COMRAM] long long 
  1124 ;;  i               2   61[COMRAM] int 
  1125 ;;  s               2   51[COMRAM] int 
  1126 ;;  w               2   49[COMRAM] int 
  1127 ;;  p               2   47[COMRAM] int 
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  2   27[COMRAM] int 
  1130 ;; Registers used:
  1131 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1137 ;;      Params:        10       0       0       0       0       0       0       0       0
  1138 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1139 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1140 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1141 ;;Total ram usage:       36 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; Hardware stack levels required when called:    4
  1144 ;; This function calls:
  1145 ;;		___aodiv
  1146 ;;		___aomod
  1147 ;;		_abs
  1148 ;;		_pad
  1149 ;; This function is called by:
  1150 ;;		_vfpfcnvrt
  1151 ;; This function uses a non-reentrant model
  1152 ;;
  1153                           
  1154                           	psect	text4
  1155  00081E                     __ptext4:
  1156                           	callstack 0
  1157  00081E                     _dtoa:
  1158                           	callstack 23
  1159  00081E                     
  1160                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  1161  00081E  C01E  F036         	movff	dtoa@d,dtoa@n
  1162  000822  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1163  000826  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1164  00082A  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1165  00082E  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1166  000832  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1167  000836  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1168  00083A  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1169  00083E                     
  1170                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  1171  00083E  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1172  000840  EF24  F004         	goto	u851
  1173  000844  EF27  F004         	goto	u850
  1174  000848                     u851:
  1175  000848  0E01               	movlw	1
  1176  00084A  EF28  F004         	goto	u860
  1177  00084E                     u850:
  1178  00084E  0E00               	movlw	0
  1179  000850                     u860:
  1180  000850  6E34               	movwf	dtoa@s^0,c
  1181  000852  6A35               	clrf	(dtoa@s+1)^0,c
  1182                           
  1183                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1184  000854  5034               	movf	dtoa@s^0,w,c
  1185  000856  1035               	iorwf	(dtoa@s+1)^0,w,c
  1186  000858  B4D8               	btfsc	status,2,c
  1187  00085A  EF31  F004         	goto	u871
  1188  00085E  EF33  F004         	goto	u870
  1189  000862                     u871:
  1190  000862  EF43  F004         	goto	l1562
  1191  000866                     u870:
  1192  000866                     
  1193                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1194  000866  1E3D               	comf	(dtoa@n+7)^0,f,c
  1195  000868  1E3C               	comf	(dtoa@n+6)^0,f,c
  1196  00086A  1E3B               	comf	(dtoa@n+5)^0,f,c
  1197  00086C  1E3A               	comf	(dtoa@n+4)^0,f,c
  1198  00086E  1E39               	comf	(dtoa@n+3)^0,f,c
  1199  000870  1E38               	comf	(dtoa@n+2)^0,f,c
  1200  000872  1E37               	comf	(dtoa@n+1)^0,f,c
  1201  000874  6C36               	negf	dtoa@n^0,c
  1202  000876  0E00               	movlw	0
  1203  000878  2237               	addwfc	(dtoa@n+1)^0,f,c
  1204  00087A  2238               	addwfc	(dtoa@n+2)^0,f,c
  1205  00087C  2239               	addwfc	(dtoa@n+3)^0,f,c
  1206  00087E  223A               	addwfc	(dtoa@n+4)^0,f,c
  1207  000880  223B               	addwfc	(dtoa@n+5)^0,f,c
  1208  000882  223C               	addwfc	(dtoa@n+6)^0,f,c
  1209  000884  223D               	addwfc	(dtoa@n+7)^0,f,c
  1210  000886                     l1562:
  1211                           
  1212                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1213  000886  0100               	movlb	0	; () banked
  1214  000888  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1215  00088A  EF49  F004         	goto	u881
  1216  00088E  EF4B  F004         	goto	u880
  1217  000892                     u881:
  1218  000892  EF4C  F004         	goto	l1566
  1219  000896                     u880:
  1220  000896                     
  1221                           ; BSR set to: 0
  1222                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1223  000896  9366               	bcf	_flags& (0+255),1,b
  1224  000898                     l1566:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1228  000898  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1229  00089A  EF59  F004         	goto	u890
  1230  00089E  5165               	movf	(_prec+1)& (0+255),w,b
  1231  0008A0  E106               	bnz	u891
  1232  0008A2  0564               	decf	_prec& (0+255),w,b
  1233  0008A4  B0D8               	btfsc	status,0,c
  1234  0008A6  EF57  F004         	goto	u891
  1235  0008AA  EF59  F004         	goto	u890
  1236  0008AE                     u891:
  1237  0008AE  EF5F  F004         	goto	l844
  1238  0008B2                     u890:
  1239  0008B2                     
  1240                           ; BSR set to: 0
  1241  0008B2  0E00               	movlw	0
  1242  0008B4  6E31               	movwf	(dtoa@p+1)^0,c
  1243  0008B6  0E01               	movlw	1
  1244  0008B8  6E30               	movwf	dtoa@p^0,c
  1245  0008BA  EF63  F004         	goto	l846
  1246  0008BE                     l844:
  1247                           
  1248                           ; BSR set to: 0
  1249  0008BE  C064  F030         	movff	_prec,dtoa@p
  1250  0008C2  C065  F031         	movff	_prec+1,dtoa@p+1
  1251  0008C6                     l846:
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1255  0008C6  C062  F032         	movff	_width,dtoa@w
  1256  0008CA  C063  F033         	movff	_width+1,dtoa@w+1
  1257  0008CE                     
  1258                           ; BSR set to: 0
  1259                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1260  0008CE  5034               	movf	dtoa@s^0,w,c
  1261  0008D0  1035               	iorwf	(dtoa@s+1)^0,w,c
  1262  0008D2  A4D8               	btfss	status,2,c
  1263  0008D4  EF6E  F004         	goto	u901
  1264  0008D8  EF70  F004         	goto	u900
  1265  0008DC                     u901:
  1266  0008DC  EF77  F004         	goto	l1574
  1267  0008E0                     u900:
  1268  0008E0                     
  1269                           ; BSR set to: 0
  1270  0008E0  A566               	btfss	_flags& (0+255),2,b
  1271  0008E2  EF75  F004         	goto	u911
  1272  0008E6  EF77  F004         	goto	u910
  1273  0008EA                     u911:
  1274  0008EA  EF7A  F004         	goto	l1576
  1275  0008EE                     u910:
  1276  0008EE                     l1574:
  1277                           
  1278                           ; BSR set to: 0
  1279                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 306:         --w;
  1280  0008EE  0632               	decf	dtoa@w^0,f,c
  1281  0008F0  A0D8               	btfss	status,0,c
  1282  0008F2  0633               	decf	(dtoa@w+1)^0,f,c
  1283  0008F4                     l1576:
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1287  0008F4  0E00               	movlw	0
  1288  0008F6  6E3F               	movwf	(dtoa@i+1)^0,c
  1289  0008F8  0E1F               	movlw	31
  1290  0008FA  6E3E               	movwf	dtoa@i^0,c
  1291  0008FC                     
  1292                           ; BSR set to: 0
  1293                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1294  0008FC  0E00               	movlw	0
  1295  0008FE  6F89               	movwf	(_dbuf+31)& (0+255),b
  1296                           
  1297                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1298  000900  EFFE  F004         	goto	l1590
  1299  000904                     l1580:
  1300                           
  1301                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 313:         --i;
  1302  000904  063E               	decf	dtoa@i^0,f,c
  1303  000906  A0D8               	btfss	status,0,c
  1304  000908  063F               	decf	(dtoa@i+1)^0,f,c
  1305  00090A                     
  1306                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1307  00090A  0E6A               	movlw	low _dbuf
  1308  00090C  243E               	addwf	dtoa@i^0,w,c
  1309  00090E  6ED9               	movwf	fsr2l,c
  1310  000910  0E00               	movlw	high _dbuf
  1311  000912  203F               	addwfc	(dtoa@i+1)^0,w,c
  1312  000914  6EDA               	movwf	fsr2h,c
  1313  000916  C036  F001         	movff	dtoa@n,___aomod@dividend
  1314  00091A  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1315  00091E  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1316  000922  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1317  000926  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1318  00092A  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1319  00092E  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1320  000932  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1321  000936  0E0A               	movlw	10
  1322  000938  6E09               	movwf	___aomod@divisor^0,c
  1323  00093A  0E00               	movlw	0
  1324  00093C  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1325  00093E  0E00               	movlw	0
  1326  000940  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1327  000942  0E00               	movlw	0
  1328  000944  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1329  000946  0E00               	movlw	0
  1330  000948  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1331  00094A  0E00               	movlw	0
  1332  00094C  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1333  00094E  0E00               	movlw	0
  1334  000950  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1335  000952  0E00               	movlw	0
  1336  000954  6E10               	movwf	(___aomod@divisor+7)^0,c
  1337  000956  EC1E  F007         	call	___aomod	;wreg free
  1338  00095A  C001  F026         	movff	?___aomod,??_dtoa
  1339  00095E  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1340  000962  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1341  000966  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1342  00096A  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1343  00096E  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1344  000972  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1345  000976  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1346  00097A  C026  F013         	movff	??_dtoa,abs@a
  1347  00097E  C028  F014         	movff	??_dtoa+2,abs@a+1
  1348  000982  EC07  F00C         	call	_abs	;wreg free
  1349  000986  5013               	movf	?_abs^0,w,c
  1350  000988  0F30               	addlw	48
  1351  00098A  6EDF               	movwf	indf2,c
  1352  00098C                     
  1353                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 315:         --p;
  1354  00098C  0630               	decf	dtoa@p^0,f,c
  1355  00098E  A0D8               	btfss	status,0,c
  1356  000990  0631               	decf	(dtoa@p+1)^0,f,c
  1357  000992                     
  1358                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 316:         --w;
  1359  000992  0632               	decf	dtoa@w^0,f,c
  1360  000994  A0D8               	btfss	status,0,c
  1361  000996  0633               	decf	(dtoa@w+1)^0,f,c
  1362  000998                     
  1363                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1364  000998  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1365  00099C  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1366  0009A0  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1367  0009A4  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1368  0009A8  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1369  0009AC  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1370  0009B0  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1371  0009B4  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1372  0009B8  0E0A               	movlw	10
  1373  0009BA  6E09               	movwf	___aodiv@divisor^0,c
  1374  0009BC  0E00               	movlw	0
  1375  0009BE  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1376  0009C0  0E00               	movlw	0
  1377  0009C2  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1378  0009C4  0E00               	movlw	0
  1379  0009C6  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1380  0009C8  0E00               	movlw	0
  1381  0009CA  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1382  0009CC  0E00               	movlw	0
  1383  0009CE  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1384  0009D0  0E00               	movlw	0
  1385  0009D2  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1386  0009D4  0E00               	movlw	0
  1387  0009D6  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1388  0009D8  EC5A  F006         	call	___aodiv	;wreg free
  1389  0009DC  C001  F036         	movff	?___aodiv,dtoa@n
  1390  0009E0  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1391  0009E4  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1392  0009E8  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1393  0009EC  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1394  0009F0  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1395  0009F4  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1396  0009F8  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1397  0009FC                     l1590:
  1398                           
  1399                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1400  0009FC  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1401  0009FE  EF09  F005         	goto	u921
  1402  000A02  503F               	movf	(dtoa@i+1)^0,w,c
  1403  000A04  E108               	bnz	u920
  1404  000A06  043E               	decf	dtoa@i^0,w,c
  1405  000A08  A0D8               	btfss	status,0,c
  1406  000A0A  EF09  F005         	goto	u921
  1407  000A0E  EF0B  F005         	goto	u920
  1408  000A12                     u921:
  1409  000A12  EF3C  F005         	goto	l1600
  1410  000A16                     u920:
  1411  000A16  5036               	movf	dtoa@n^0,w,c
  1412  000A18  1037               	iorwf	(dtoa@n+1)^0,w,c
  1413  000A1A  1038               	iorwf	(dtoa@n+2)^0,w,c
  1414  000A1C  1039               	iorwf	(dtoa@n+3)^0,w,c
  1415  000A1E  103A               	iorwf	(dtoa@n+4)^0,w,c
  1416  000A20  103B               	iorwf	(dtoa@n+5)^0,w,c
  1417  000A22  103C               	iorwf	(dtoa@n+6)^0,w,c
  1418  000A24  103D               	iorwf	(dtoa@n+7)^0,w,c
  1419  000A26  A4D8               	btfss	status,2,c
  1420  000A28  EF18  F005         	goto	u931
  1421  000A2C  EF1A  F005         	goto	u930
  1422  000A30                     u931:
  1423  000A30  EF82  F004         	goto	l1580
  1424  000A34                     u930:
  1425  000A34  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1426  000A36  EF27  F005         	goto	u940
  1427  000A3A  5031               	movf	(dtoa@p+1)^0,w,c
  1428  000A3C  E106               	bnz	u941
  1429  000A3E  0430               	decf	dtoa@p^0,w,c
  1430  000A40  B0D8               	btfsc	status,0,c
  1431  000A42  EF25  F005         	goto	u941
  1432  000A46  EF27  F005         	goto	u940
  1433  000A4A                     u941:
  1434  000A4A  EF82  F004         	goto	l1580
  1435  000A4E                     u940:
  1436  000A4E  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1437  000A50  EF32  F005         	goto	u951
  1438  000A54  5033               	movf	(dtoa@w+1)^0,w,c
  1439  000A56  E108               	bnz	u950
  1440  000A58  0432               	decf	dtoa@w^0,w,c
  1441  000A5A  A0D8               	btfss	status,0,c
  1442  000A5C  EF32  F005         	goto	u951
  1443  000A60  EF34  F005         	goto	u950
  1444  000A64                     u951:
  1445  000A64  EF3C  F005         	goto	l1600
  1446  000A68                     u950:
  1447  000A68  0100               	movlb	0	; () banked
  1448  000A6A  B366               	btfsc	_flags& (0+255),1,b
  1449  000A6C  EF3A  F005         	goto	u961
  1450  000A70  EF3C  F005         	goto	u960
  1451  000A74                     u961:
  1452  000A74  EF82  F004         	goto	l1580
  1453  000A78                     u960:
  1454  000A78                     l1600:
  1455                           
  1456                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1457  000A78  5034               	movf	dtoa@s^0,w,c
  1458  000A7A  1035               	iorwf	(dtoa@s+1)^0,w,c
  1459  000A7C  A4D8               	btfss	status,2,c
  1460  000A7E  EF43  F005         	goto	u971
  1461  000A82  EF45  F005         	goto	u970
  1462  000A86                     u971:
  1463  000A86  EF4D  F005         	goto	l1604
  1464  000A8A                     u970:
  1465  000A8A  0100               	movlb	0	; () banked
  1466  000A8C  A566               	btfss	_flags& (0+255),2,b
  1467  000A8E  EF4B  F005         	goto	u981
  1468  000A92  EF4D  F005         	goto	u980
  1469  000A96                     u981:
  1470  000A96  EF6B  F005         	goto	l1614
  1471  000A9A                     u980:
  1472  000A9A                     l1604:
  1473                           
  1474                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 322:         --i;
  1475  000A9A  063E               	decf	dtoa@i^0,f,c
  1476  000A9C  A0D8               	btfss	status,0,c
  1477  000A9E  063F               	decf	(dtoa@i+1)^0,f,c
  1478  000AA0                     
  1479                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1480  000AA0  5034               	movf	dtoa@s^0,w,c
  1481  000AA2  1035               	iorwf	(dtoa@s+1)^0,w,c
  1482  000AA4  A4D8               	btfss	status,2,c
  1483  000AA6  EF57  F005         	goto	u991
  1484  000AAA  EF59  F005         	goto	u990
  1485  000AAE                     u991:
  1486  000AAE  EF5F  F005         	goto	l1610
  1487  000AB2                     u990:
  1488  000AB2  0E00               	movlw	0
  1489  000AB4  6E2F               	movwf	(_dtoa$914+1)^0,c
  1490  000AB6  0E2B               	movlw	43
  1491  000AB8  6E2E               	movwf	_dtoa$914^0,c
  1492  000ABA  EF63  F005         	goto	l1612
  1493  000ABE                     l1610:
  1494  000ABE  0E00               	movlw	0
  1495  000AC0  6E2F               	movwf	(_dtoa$914+1)^0,c
  1496  000AC2  0E2D               	movlw	45
  1497  000AC4  6E2E               	movwf	_dtoa$914^0,c
  1498  000AC6                     l1612:
  1499  000AC6  0E6A               	movlw	low _dbuf
  1500  000AC8  243E               	addwf	dtoa@i^0,w,c
  1501  000ACA  6ED9               	movwf	fsr2l,c
  1502  000ACC  0E00               	movlw	high _dbuf
  1503  000ACE  203F               	addwfc	(dtoa@i+1)^0,w,c
  1504  000AD0  6EDA               	movwf	fsr2h,c
  1505  000AD2  C02E  FFDF         	movff	_dtoa$914,indf2
  1506  000AD6                     l1614:
  1507                           
  1508                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1509  000AD6  C01C  F011         	movff	dtoa@fp,pad@fp
  1510  000ADA  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1511  000ADE  0E6A               	movlw	low _dbuf
  1512  000AE0  243E               	addwf	dtoa@i^0,w,c
  1513  000AE2  6E13               	movwf	pad@buf^0,c
  1514  000AE4  0E00               	movlw	high _dbuf
  1515  000AE6  203F               	addwfc	(dtoa@i+1)^0,w,c
  1516  000AE8  6E14               	movwf	(pad@buf+1)^0,c
  1517  000AEA  C032  F015         	movff	dtoa@w,pad@p
  1518  000AEE  C033  F016         	movff	dtoa@w+1,pad@p+1
  1519  000AF2  EC03  F00A         	call	_pad	;wreg free
  1520  000AF6  C011  F01C         	movff	?_pad,?_dtoa
  1521  000AFA  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1522  000AFE  0012               	return		;funcret
  1523  000B00                     __end_of_dtoa:
  1524                           	callstack 0
  1525                           
  1526 ;; *************** function _pad *****************
  1527 ;; Defined at:
  1528 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1531 ;;		 -> sprintf@f(6), 
  1532 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1533 ;;		 -> dbuf(32), 
  1534 ;;  p               2   20[COMRAM] int 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;  w               2   25[COMRAM] int 
  1537 ;;  i               2   23[COMRAM] int 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  2   16[COMRAM] int 
  1540 ;; Registers used:
  1541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1547 ;;      Params:         6       0       0       0       0       0       0       0       0
  1548 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1549 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1550 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1551 ;;Total ram usage:       11 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    3
  1554 ;; This function calls:
  1555 ;;		_fputc
  1556 ;;		_fputs
  1557 ;;		_strlen
  1558 ;; This function is called by:
  1559 ;;		_dtoa
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text5
  1564  001406                     __ptext5:
  1565                           	callstack 0
  1566  001406                     _pad:
  1567                           	callstack 23
  1568  001406                     
  1569                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1570  001406  0100               	movlb	0	; () banked
  1571  001408  A166               	btfss	_flags& (0+255),0,b
  1572  00140A  EF09  F00A         	goto	u801
  1573  00140E  EF0B  F00A         	goto	u800
  1574  001412                     u801:
  1575  001412  EF15  F00A         	goto	l1534
  1576  001416                     u800:
  1577  001416                     
  1578                           ; BSR set to: 0
  1579                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1580  001416  C013  F00A         	movff	pad@buf,fputs@s
  1581  00141A  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1582  00141E  C011  F00C         	movff	pad@fp,fputs@fp
  1583  001422  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1584  001426  ECE5  F00B         	call	_fputs	;wreg free
  1585  00142A                     l1534:
  1586                           
  1587                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1588  00142A  BE16               	btfsc	(pad@p+1)^0,7,c
  1589  00142C  EF1A  F00A         	goto	u811
  1590  001430  EF1C  F00A         	goto	u810
  1591  001434                     u811:
  1592  001434  EF22  F00A         	goto	l1538
  1593  001438                     u810:
  1594  001438  C015  F01A         	movff	pad@p,pad@w
  1595  00143C  C016  F01B         	movff	pad@p+1,pad@w+1
  1596  001440  EF26  F00A         	goto	l833
  1597  001444                     l1538:
  1598  001444  0E00               	movlw	0
  1599  001446  6E1B               	movwf	(pad@w+1)^0,c
  1600  001448  0E00               	movlw	0
  1601  00144A  6E1A               	movwf	pad@w^0,c
  1602  00144C                     l833:
  1603                           
  1604                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1605  00144C  0E00               	movlw	0
  1606  00144E  6E19               	movwf	(pad@i+1)^0,c
  1607  001450  0E00               	movlw	0
  1608  001452  6E18               	movwf	pad@i^0,c
  1609                           
  1610                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1611  001454  EF38  F00A         	goto	l1544
  1612  001458                     l1540:
  1613                           
  1614                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1615  001458  0E00               	movlw	0
  1616  00145A  6E02               	movwf	(fputc@c+1)^0,c
  1617  00145C  0E20               	movlw	32
  1618  00145E  6E01               	movwf	fputc@c^0,c
  1619  001460  C011  F003         	movff	pad@fp,fputc@fp
  1620  001464  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1621  001468  EC9E  F009         	call	_fputc	;wreg free
  1622  00146C                     
  1623                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1624  00146C  4A18               	infsnz	pad@i^0,f,c
  1625  00146E  2A19               	incf	(pad@i+1)^0,f,c
  1626  001470                     l1544:
  1627                           
  1628                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1629  001470  501A               	movf	pad@w^0,w,c
  1630  001472  5C18               	subwf	pad@i^0,w,c
  1631  001474  5019               	movf	(pad@i+1)^0,w,c
  1632  001476  0A80               	xorlw	128
  1633  001478  6E17               	movwf	??_pad^0,c
  1634  00147A  501B               	movf	(pad@w+1)^0,w,c
  1635  00147C  0A80               	xorlw	128
  1636  00147E  5817               	subwfb	??_pad^0,w,c
  1637  001480  A0D8               	btfss	status,0,c
  1638  001482  EF45  F00A         	goto	u821
  1639  001486  EF47  F00A         	goto	u820
  1640  00148A                     u821:
  1641  00148A  EF2C  F00A         	goto	l1540
  1642  00148E                     u820:
  1643  00148E                     
  1644                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1645  00148E  0100               	movlb	0	; () banked
  1646  001490  B166               	btfsc	_flags& (0+255),0,b
  1647  001492  EF4D  F00A         	goto	u831
  1648  001496  EF4F  F00A         	goto	u830
  1649  00149A                     u831:
  1650  00149A  EF59  F00A         	goto	l1548
  1651  00149E                     u830:
  1652  00149E                     
  1653                           ; BSR set to: 0
  1654                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1655  00149E  C013  F00A         	movff	pad@buf,fputs@s
  1656  0014A2  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1657  0014A6  C011  F00C         	movff	pad@fp,fputs@fp
  1658  0014AA  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1659  0014AE  ECE5  F00B         	call	_fputs	;wreg free
  1660  0014B2                     l1548:
  1661                           
  1662                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1663  0014B2  C013  F001         	movff	pad@buf,strlen@s
  1664  0014B6  C014  F002         	movff	pad@buf+1,strlen@s+1
  1665  0014BA  EC45  F00C         	call	_strlen	;wreg free
  1666  0014BE  501A               	movf	pad@w^0,w,c
  1667  0014C0  2401               	addwf	?_strlen^0,w,c
  1668  0014C2  6E11               	movwf	?_pad^0,c
  1669  0014C4  501B               	movf	(pad@w+1)^0,w,c
  1670  0014C6  2002               	addwfc	(?_strlen+1)^0,w,c
  1671  0014C8  6E12               	movwf	(?_pad+1)^0,c
  1672  0014CA  0012               	return		;funcret
  1673  0014CC                     __end_of_pad:
  1674                           	callstack 0
  1675                           
  1676 ;; *************** function _strlen *****************
  1677 ;; Defined at:
  1678 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\strlen.c"
  1679 ;; Parameters:    Size  Location     Type
  1680 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1681 ;;		 -> dbuf(32), 
  1682 ;; Auto vars:     Size  Location     Type
  1683 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1684 ;;		 -> dbuf(32), 
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  2    0[COMRAM] unsigned int 
  1687 ;; Registers used:
  1688 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1694 ;;      Params:         2       0       0       0       0       0       0       0       0
  1695 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1696 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1697 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1698 ;;Total ram usage:        4 bytes
  1699 ;; Hardware stack levels used:    1
  1700 ;; This function calls:
  1701 ;;		Nothing
  1702 ;; This function is called by:
  1703 ;;		_pad
  1704 ;; This function uses a non-reentrant model
  1705 ;;
  1706                           
  1707                           	psect	text6
  1708  00188A                     __ptext6:
  1709                           	callstack 0
  1710  00188A                     _strlen:
  1711                           	callstack 25
  1712  00188A  C001  F003         	movff	strlen@s,strlen@a
  1713  00188E  C002  F004         	movff	strlen@s+1,strlen@a+1
  1714  001892  EF4D  F00C         	goto	l1444
  1715  001896                     l1442:
  1716  001896  4A01               	infsnz	strlen@s^0,f,c
  1717  001898  2A02               	incf	(strlen@s+1)^0,f,c
  1718  00189A                     l1444:
  1719  00189A  C001  FFD9         	movff	strlen@s,fsr2l
  1720  00189E  C002  FFDA         	movff	strlen@s+1,fsr2h
  1721  0018A2  50DF               	movf	indf2,w,c
  1722  0018A4  A4D8               	btfss	status,2,c
  1723  0018A6  EF57  F00C         	goto	u661
  1724  0018AA  EF59  F00C         	goto	u660
  1725  0018AE                     u661:
  1726  0018AE  EF4B  F00C         	goto	l1442
  1727  0018B2                     u660:
  1728  0018B2  5003               	movf	strlen@a^0,w,c
  1729  0018B4  5C01               	subwf	strlen@s^0,w,c
  1730  0018B6  6E01               	movwf	?_strlen^0,c
  1731  0018B8  5004               	movf	(strlen@a+1)^0,w,c
  1732  0018BA  5802               	subwfb	(strlen@s+1)^0,w,c
  1733  0018BC  6E02               	movwf	(?_strlen+1)^0,c
  1734  0018BE  0012               	return		;funcret
  1735  0018C0                     __end_of_strlen:
  1736                           	callstack 0
  1737                           
  1738 ;; *************** function _fputs *****************
  1739 ;; Defined at:
  1740 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_fputs.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1743 ;;		 -> dbuf(32), 
  1744 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1745 ;;		 -> sprintf@f(6), 
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;  i               2   14[COMRAM] int 
  1748 ;;  c               1   13[COMRAM] unsigned char 
  1749 ;; Return value:  Size  Location     Type
  1750 ;;                  2    9[COMRAM] int 
  1751 ;; Registers used:
  1752 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1753 ;; Tracked objects:
  1754 ;;		On entry : 0/0
  1755 ;;		On exit  : 0/0
  1756 ;;		Unchanged: 0/0
  1757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1758 ;;      Params:         4       0       0       0       0       0       0       0       0
  1759 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1760 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1761 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1762 ;;Total ram usage:        7 bytes
  1763 ;; Hardware stack levels used:    1
  1764 ;; Hardware stack levels required when called:    2
  1765 ;; This function calls:
  1766 ;;		_fputc
  1767 ;; This function is called by:
  1768 ;;		_pad
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text7
  1773  0017CA                     __ptext7:
  1774                           	callstack 0
  1775  0017CA                     _fputs:
  1776                           	callstack 23
  1777  0017CA  0E00               	movlw	0
  1778  0017CC  6E10               	movwf	(fputs@i+1)^0,c
  1779  0017CE  0E00               	movlw	0
  1780  0017D0  6E0F               	movwf	fputs@i^0,c
  1781  0017D2  EFF6  F00B         	goto	l1438
  1782  0017D6                     l1434:
  1783  0017D6  C00E  F001         	movff	fputs@c,fputc@c
  1784  0017DA  6A02               	clrf	(fputc@c+1)^0,c
  1785  0017DC  C00C  F003         	movff	fputs@fp,fputc@fp
  1786  0017E0  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1787  0017E4  EC9E  F009         	call	_fputc	;wreg free
  1788  0017E8  4A0F               	infsnz	fputs@i^0,f,c
  1789  0017EA  2A10               	incf	(fputs@i+1)^0,f,c
  1790  0017EC                     l1438:
  1791  0017EC  500F               	movf	fputs@i^0,w,c
  1792  0017EE  240A               	addwf	fputs@s^0,w,c
  1793  0017F0  6ED9               	movwf	fsr2l,c
  1794  0017F2  5010               	movf	(fputs@i+1)^0,w,c
  1795  0017F4  200B               	addwfc	(fputs@s+1)^0,w,c
  1796  0017F6  6EDA               	movwf	fsr2h,c
  1797  0017F8  50DF               	movf	indf2,w,c
  1798  0017FA  6E0E               	movwf	fputs@c^0,c
  1799  0017FC  500E               	movf	fputs@c^0,w,c
  1800  0017FE  A4D8               	btfss	status,2,c
  1801  001800  EF04  F00C         	goto	u651
  1802  001804  EF06  F00C         	goto	u650
  1803  001808                     u651:
  1804  001808  EFEB  F00B         	goto	l1434
  1805  00180C                     u650:
  1806  00180C  0012               	return		;funcret
  1807  00180E                     __end_of_fputs:
  1808                           	callstack 0
  1809                           
  1810 ;; *************** function _fputc *****************
  1811 ;; Defined at:
  1812 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_fputc.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  c               2    0[COMRAM] int 
  1815 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1816 ;;		 -> sprintf@f(6), 
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;		None
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  2    0[COMRAM] int 
  1821 ;; Registers used:
  1822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1828 ;;      Params:         4       0       0       0       0       0       0       0       0
  1829 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1830 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1831 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1832 ;;Total ram usage:        9 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; Hardware stack levels required when called:    1
  1835 ;; This function calls:
  1836 ;;		_putch
  1837 ;; This function is called by:
  1838 ;;		_pad
  1839 ;;		_vfpfcnvrt
  1840 ;;		_fputs
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           	psect	text8
  1845  00133C                     __ptext8:
  1846                           	callstack 0
  1847  00133C                     _fputc:
  1848                           	callstack 26
  1849  00133C  5003               	movf	fputc@fp^0,w,c
  1850  00133E  1004               	iorwf	(fputc@fp+1)^0,w,c
  1851  001340  B4D8               	btfsc	status,2,c
  1852  001342  EFA5  F009         	goto	u611
  1853  001346  EFA7  F009         	goto	u610
  1854  00134A                     u611:
  1855  00134A  EFB0  F009         	goto	l1422
  1856  00134E                     u610:
  1857  00134E  5003               	movf	fputc@fp^0,w,c
  1858  001350  1004               	iorwf	(fputc@fp+1)^0,w,c
  1859  001352  A4D8               	btfss	status,2,c
  1860  001354  EFAE  F009         	goto	u621
  1861  001358  EFB0  F009         	goto	u620
  1862  00135C                     u621:
  1863  00135C  EFB5  F009         	goto	l1424
  1864  001360                     u620:
  1865  001360                     l1422:
  1866  001360  5001               	movf	fputc@c^0,w,c
  1867  001362  EC6B  F00C         	call	_putch
  1868  001366  EF02  F00A         	goto	l897
  1869  00136A                     l1424:
  1870  00136A  EE20 F004          	lfsr	2,4
  1871  00136E  5003               	movf	fputc@fp^0,w,c
  1872  001370  26D9               	addwf	fsr2l,f,c
  1873  001372  5004               	movf	(fputc@fp+1)^0,w,c
  1874  001374  22DA               	addwfc	fsr2h,f,c
  1875  001376  50DE               	movf	postinc2,w,c
  1876  001378  10DE               	iorwf	postinc2,w,c
  1877  00137A  B4D8               	btfsc	status,2,c
  1878  00137C  EFC2  F009         	goto	u631
  1879  001380  EFC4  F009         	goto	u630
  1880  001384                     u631:
  1881  001384  EFDF  F009         	goto	l1428
  1882  001388                     u630:
  1883  001388  EE20 F004          	lfsr	2,4
  1884  00138C  5003               	movf	fputc@fp^0,w,c
  1885  00138E  26D9               	addwf	fsr2l,f,c
  1886  001390  5004               	movf	(fputc@fp+1)^0,w,c
  1887  001392  22DA               	addwfc	fsr2h,f,c
  1888  001394  EE10 F002          	lfsr	1,2
  1889  001398  5003               	movf	fputc@fp^0,w,c
  1890  00139A  26E1               	addwf	fsr1l,f,c
  1891  00139C  5004               	movf	(fputc@fp+1)^0,w,c
  1892  00139E  22E2               	addwfc	fsr1h,f,c
  1893  0013A0  50DE               	movf	postinc2,w,c
  1894  0013A2  5CE6               	subwf	postinc1,w,c
  1895  0013A4  50E6               	movf	postinc1,w,c
  1896  0013A6  0A80               	xorlw	128
  1897  0013A8  6E09               	movwf	(??_fputc+4)^0,c
  1898  0013AA  50DE               	movf	postinc2,w,c
  1899  0013AC  0A80               	xorlw	128
  1900  0013AE  5809               	subwfb	(??_fputc+4)^0,w,c
  1901  0013B0  B0D8               	btfsc	status,0,c
  1902  0013B2  EFDD  F009         	goto	u641
  1903  0013B6  EFDF  F009         	goto	u640
  1904  0013BA                     u641:
  1905  0013BA  EF02  F00A         	goto	l897
  1906  0013BE                     u640:
  1907  0013BE                     l1428:
  1908  0013BE  EE20 F002          	lfsr	2,2
  1909  0013C2  5003               	movf	fputc@fp^0,w,c
  1910  0013C4  26D9               	addwf	fsr2l,f,c
  1911  0013C6  5004               	movf	(fputc@fp+1)^0,w,c
  1912  0013C8  22DA               	addwfc	fsr2h,f,c
  1913  0013CA  CFDE F005          	movff	postinc2,??_fputc
  1914  0013CE  CFDD F006          	movff	postdec2,??_fputc+1
  1915  0013D2  C003  FFD9         	movff	fputc@fp,fsr2l
  1916  0013D6  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1917  0013DA  CFDE F007          	movff	postinc2,??_fputc+2
  1918  0013DE  CFDD F008          	movff	postdec2,??_fputc+3
  1919  0013E2  5005               	movf	??_fputc^0,w,c
  1920  0013E4  2407               	addwf	(??_fputc+2)^0,w,c
  1921  0013E6  6ED9               	movwf	fsr2l,c
  1922  0013E8  5006               	movf	(??_fputc+1)^0,w,c
  1923  0013EA  2008               	addwfc	(??_fputc+3)^0,w,c
  1924  0013EC  6EDA               	movwf	fsr2h,c
  1925  0013EE  C001  FFDF         	movff	fputc@c,indf2
  1926  0013F2  EE20 F002          	lfsr	2,2
  1927  0013F6  5003               	movf	fputc@fp^0,w,c
  1928  0013F8  26D9               	addwf	fsr2l,f,c
  1929  0013FA  5004               	movf	(fputc@fp+1)^0,w,c
  1930  0013FC  22DA               	addwfc	fsr2h,f,c
  1931  0013FE  2ADE               	incf	postinc2,f,c
  1932  001400  0E00               	movlw	0
  1933  001402  22DD               	addwfc	postdec2,f,c
  1934  001404                     l897:
  1935  001404  0012               	return		;funcret
  1936  001406                     __end_of_fputc:
  1937                           	callstack 0
  1938                           
  1939 ;; *************** function _putch *****************
  1940 ;; Defined at:
  1941 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\putch.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  c               1    wreg     unsigned char 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  c               1    0[COMRAM] unsigned char 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      void 
  1948 ;; Registers used:
  1949 ;;		wreg
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1955 ;;      Params:         0       0       0       0       0       0       0       0       0
  1956 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1957 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1958 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1959 ;;Total ram usage:        0 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_fputc
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text9
  1969  0018D6                     __ptext9:
  1970                           	callstack 0
  1971  0018D6                     _putch:
  1972                           	callstack 26
  1973  0018D6  0012               	return		;funcret
  1974  0018D8                     __end_of_putch:
  1975                           	callstack 0
  1976                           
  1977 ;; *************** function _abs *****************
  1978 ;; Defined at:
  1979 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\abs.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;  a               2   18[COMRAM] int 
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;		None
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  2   18[COMRAM] int 
  1986 ;; Registers used:
  1987 ;;		wreg, status,2, status,0
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1993 ;;      Params:         2       0       0       0       0       0       0       0       0
  1994 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1995 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1996 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1997 ;;Total ram usage:        4 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_dtoa
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           	psect	text10
  2007  00180E                     __ptext10:
  2008                           	callstack 0
  2009  00180E                     _abs:
  2010                           	callstack 26
  2011  00180E  BE14               	btfsc	(abs@a+1)^0,7,c
  2012  001810  EF14  F00C         	goto	u840
  2013  001814  5014               	movf	(abs@a+1)^0,w,c
  2014  001816  E106               	bnz	u841
  2015  001818  0413               	decf	abs@a^0,w,c
  2016  00181A  B0D8               	btfsc	status,0,c
  2017  00181C  EF12  F00C         	goto	u841
  2018  001820  EF14  F00C         	goto	u840
  2019  001824                     u841:
  2020  001824  EF22  F00C         	goto	l882
  2021  001828                     u840:
  2022  001828  C013  F015         	movff	abs@a,??_abs
  2023  00182C  C014  F016         	movff	abs@a+1,??_abs+1
  2024  001830  1E15               	comf	??_abs^0,f,c
  2025  001832  1E16               	comf	(??_abs+1)^0,f,c
  2026  001834  4A15               	infsnz	??_abs^0,f,c
  2027  001836  2A16               	incf	(??_abs+1)^0,f,c
  2028  001838  C015  F013         	movff	??_abs,?_abs
  2029  00183C  C016  F014         	movff	??_abs+1,?_abs+1
  2030  001840  EF26  F00C         	goto	l885
  2031  001844                     l882:
  2032  001844  C013  F013         	movff	abs@a,?_abs
  2033  001848  C014  F014         	movff	abs@a+1,?_abs+1
  2034  00184C                     l885:
  2035  00184C  0012               	return		;funcret
  2036  00184E                     __end_of_abs:
  2037                           	callstack 0
  2038                           
  2039 ;; *************** function ___aomod *****************
  2040 ;; Defined at:
  2041 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\aomod.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;  dividend        8    0[COMRAM] long long 
  2044 ;;  divisor         8    8[COMRAM] long long 
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;  sign            1   17[COMRAM] unsigned char 
  2047 ;;  counter         1   16[COMRAM] unsigned char 
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  8    0[COMRAM] long long 
  2050 ;; Registers used:
  2051 ;;		wreg, status,2, status,0
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2057 ;;      Params:        16       0       0       0       0       0       0       0       0
  2058 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2059 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2060 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2061 ;;Total ram usage:       18 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; This function calls:
  2064 ;;		Nothing
  2065 ;; This function is called by:
  2066 ;;		_dtoa
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           	psect	text11
  2071  000E3C                     __ptext11:
  2072                           	callstack 0
  2073  000E3C                     ___aomod:
  2074                           	callstack 26
  2075  000E3C  0E00               	movlw	0
  2076  000E3E  6E12               	movwf	___aomod@sign^0,c
  2077  000E40  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2078  000E42  EF27  F007         	goto	u740
  2079  000E46  EF25  F007         	goto	u741
  2080  000E4A                     u741:
  2081  000E4A  EF39  F007         	goto	l1502
  2082  000E4E                     u740:
  2083  000E4E  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2084  000E50  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2085  000E52  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2086  000E54  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2087  000E56  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2088  000E58  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2089  000E5A  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2090  000E5C  6C01               	negf	___aomod@dividend^0,c
  2091  000E5E  0E00               	movlw	0
  2092  000E60  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2093  000E62  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2094  000E64  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2095  000E66  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2096  000E68  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2097  000E6A  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2098  000E6C  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2099  000E6E  0E01               	movlw	1
  2100  000E70  6E12               	movwf	___aomod@sign^0,c
  2101  000E72                     l1502:
  2102  000E72  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2103  000E74  EF40  F007         	goto	u750
  2104  000E78  EF3E  F007         	goto	u751
  2105  000E7C                     u751:
  2106  000E7C  EF50  F007         	goto	l1506
  2107  000E80                     u750:
  2108  000E80  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2109  000E82  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2110  000E84  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2111  000E86  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2112  000E88  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2113  000E8A  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2114  000E8C  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2115  000E8E  6C09               	negf	___aomod@divisor^0,c
  2116  000E90  0E00               	movlw	0
  2117  000E92  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2118  000E94  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2119  000E96  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2120  000E98  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2121  000E9A  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2122  000E9C  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2123  000E9E  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2124  000EA0                     l1506:
  2125  000EA0  5009               	movf	___aomod@divisor^0,w,c
  2126  000EA2  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2127  000EA4  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2128  000EA6  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2129  000EA8  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2130  000EAA  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2131  000EAC  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2132  000EAE  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2133  000EB0  B4D8               	btfsc	status,2,c
  2134  000EB2  EF5D  F007         	goto	u761
  2135  000EB6  EF5F  F007         	goto	u760
  2136  000EBA                     u761:
  2137  000EBA  EFA7  F007         	goto	l1522
  2138  000EBE                     u760:
  2139  000EBE  0E01               	movlw	1
  2140  000EC0  6E11               	movwf	___aomod@counter^0,c
  2141  000EC2  EF6D  F007         	goto	l1512
  2142  000EC6                     l1510:
  2143  000EC6  90D8               	bcf	status,0,c
  2144  000EC8  3609               	rlcf	___aomod@divisor^0,f,c
  2145  000ECA  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2146  000ECC  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2147  000ECE  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2148  000ED0  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2149  000ED2  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2150  000ED4  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2151  000ED6  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2152  000ED8  2A11               	incf	___aomod@counter^0,f,c
  2153  000EDA                     l1512:
  2154  000EDA  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2155  000EDC  EF72  F007         	goto	u771
  2156  000EE0  EF74  F007         	goto	u770
  2157  000EE4                     u771:
  2158  000EE4  EF63  F007         	goto	l1510
  2159  000EE8                     u770:
  2160  000EE8                     l1514:
  2161  000EE8  5009               	movf	___aomod@divisor^0,w,c
  2162  000EEA  5C01               	subwf	___aomod@dividend^0,w,c
  2163  000EEC  500A               	movf	(___aomod@divisor+1)^0,w,c
  2164  000EEE  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2165  000EF0  500B               	movf	(___aomod@divisor+2)^0,w,c
  2166  000EF2  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2167  000EF4  500C               	movf	(___aomod@divisor+3)^0,w,c
  2168  000EF6  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2169  000EF8  500D               	movf	(___aomod@divisor+4)^0,w,c
  2170  000EFA  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2171  000EFC  500E               	movf	(___aomod@divisor+5)^0,w,c
  2172  000EFE  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2173  000F00  500F               	movf	(___aomod@divisor+6)^0,w,c
  2174  000F02  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2175  000F04  5010               	movf	(___aomod@divisor+7)^0,w,c
  2176  000F06  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2177  000F08  A0D8               	btfss	status,0,c
  2178  000F0A  EF89  F007         	goto	u781
  2179  000F0E  EF8B  F007         	goto	u780
  2180  000F12                     u781:
  2181  000F12  EF9B  F007         	goto	l1518
  2182  000F16                     u780:
  2183  000F16  5009               	movf	___aomod@divisor^0,w,c
  2184  000F18  5E01               	subwf	___aomod@dividend^0,f,c
  2185  000F1A  500A               	movf	(___aomod@divisor+1)^0,w,c
  2186  000F1C  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2187  000F1E  500B               	movf	(___aomod@divisor+2)^0,w,c
  2188  000F20  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2189  000F22  500C               	movf	(___aomod@divisor+3)^0,w,c
  2190  000F24  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2191  000F26  500D               	movf	(___aomod@divisor+4)^0,w,c
  2192  000F28  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2193  000F2A  500E               	movf	(___aomod@divisor+5)^0,w,c
  2194  000F2C  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2195  000F2E  500F               	movf	(___aomod@divisor+6)^0,w,c
  2196  000F30  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2197  000F32  5010               	movf	(___aomod@divisor+7)^0,w,c
  2198  000F34  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2199  000F36                     l1518:
  2200  000F36  90D8               	bcf	status,0,c
  2201  000F38  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2202  000F3A  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2203  000F3C  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2204  000F3E  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2205  000F40  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2206  000F42  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2207  000F44  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2208  000F46  3209               	rrcf	___aomod@divisor^0,f,c
  2209  000F48  2E11               	decfsz	___aomod@counter^0,f,c
  2210  000F4A  EF74  F007         	goto	l1514
  2211  000F4E                     l1522:
  2212  000F4E  5012               	movf	___aomod@sign^0,w,c
  2213  000F50  B4D8               	btfsc	status,2,c
  2214  000F52  EFAD  F007         	goto	u791
  2215  000F56  EFAF  F007         	goto	u790
  2216  000F5A                     u791:
  2217  000F5A  EFBF  F007         	goto	l1526
  2218  000F5E                     u790:
  2219  000F5E  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2220  000F60  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2221  000F62  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2222  000F64  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2223  000F66  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2224  000F68  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2225  000F6A  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2226  000F6C  6C01               	negf	___aomod@dividend^0,c
  2227  000F6E  0E00               	movlw	0
  2228  000F70  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2229  000F72  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2230  000F74  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2231  000F76  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2232  000F78  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2233  000F7A  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2234  000F7C  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2235  000F7E                     l1526:
  2236  000F7E  C001  F001         	movff	___aomod@dividend,?___aomod
  2237  000F82  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2238  000F86  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2239  000F8A  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2240  000F8E  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2241  000F92  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2242  000F96  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2243  000F9A  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2244  000F9E  0012               	return		;funcret
  2245  000FA0                     __end_of___aomod:
  2246                           	callstack 0
  2247                           
  2248 ;; *************** function ___aodiv *****************
  2249 ;; Defined at:
  2250 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\aodiv.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;  dividend        8    0[COMRAM] long long 
  2253 ;;  divisor         8    8[COMRAM] long long 
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;  quotient        8   18[COMRAM] long long 
  2256 ;;  sign            1   17[COMRAM] unsigned char 
  2257 ;;  counter         1   16[COMRAM] unsigned char 
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  8    0[COMRAM] long long 
  2260 ;; Registers used:
  2261 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2267 ;;      Params:        16       0       0       0       0       0       0       0       0
  2268 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2269 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2270 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2271 ;;Total ram usage:       26 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_dtoa
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text12
  2281  000CB4                     __ptext12:
  2282                           	callstack 0
  2283  000CB4                     ___aodiv:
  2284                           	callstack 26
  2285  000CB4  0E00               	movlw	0
  2286  000CB6  6E12               	movwf	___aodiv@sign^0,c
  2287  000CB8  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2288  000CBA  EF63  F006         	goto	u670
  2289  000CBE  EF61  F006         	goto	u671
  2290  000CC2                     u671:
  2291  000CC2  EF75  F006         	goto	l1458
  2292  000CC6                     u670:
  2293  000CC6  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2294  000CC8  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2295  000CCA  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2296  000CCC  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2297  000CCE  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2298  000CD0  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2299  000CD2  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2300  000CD4  6C09               	negf	___aodiv@divisor^0,c
  2301  000CD6  0E00               	movlw	0
  2302  000CD8  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2303  000CDA  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2304  000CDC  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2305  000CDE  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2306  000CE0  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2307  000CE2  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2308  000CE4  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2309  000CE6  0E01               	movlw	1
  2310  000CE8  6E12               	movwf	___aodiv@sign^0,c
  2311  000CEA                     l1458:
  2312  000CEA  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2313  000CEC  EF7C  F006         	goto	u680
  2314  000CF0  EF7A  F006         	goto	u681
  2315  000CF4                     u681:
  2316  000CF4  EF8E  F006         	goto	l1464
  2317  000CF8                     u680:
  2318  000CF8  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2319  000CFA  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2320  000CFC  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2321  000CFE  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2322  000D00  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2323  000D02  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2324  000D04  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2325  000D06  6C01               	negf	___aodiv@dividend^0,c
  2326  000D08  0E00               	movlw	0
  2327  000D0A  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2328  000D0C  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2329  000D0E  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2330  000D10  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2331  000D12  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2332  000D14  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2333  000D16  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2334  000D18  0E01               	movlw	1
  2335  000D1A  1A12               	xorwf	___aodiv@sign^0,f,c
  2336  000D1C                     l1464:
  2337  000D1C  EE20  F013         	lfsr	2,___aodiv@quotient
  2338  000D20  0E07               	movlw	7
  2339  000D22                     u691:
  2340  000D22  6ADE               	clrf	postinc2,c
  2341  000D24  06E8               	decf	wreg,f,c
  2342  000D26  E2FD               	bc	u691
  2343  000D28  5009               	movf	___aodiv@divisor^0,w,c
  2344  000D2A  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2345  000D2C  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2346  000D2E  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2347  000D30  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2348  000D32  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2349  000D34  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2350  000D36  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2351  000D38  B4D8               	btfsc	status,2,c
  2352  000D3A  EFA1  F006         	goto	u701
  2353  000D3E  EFA3  F006         	goto	u700
  2354  000D42                     u701:
  2355  000D42  EFF5  F006         	goto	l1486
  2356  000D46                     u700:
  2357  000D46  0E01               	movlw	1
  2358  000D48  6E11               	movwf	___aodiv@counter^0,c
  2359  000D4A  EFB1  F006         	goto	l1472
  2360  000D4E                     l1470:
  2361  000D4E  90D8               	bcf	status,0,c
  2362  000D50  3609               	rlcf	___aodiv@divisor^0,f,c
  2363  000D52  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2364  000D54  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2365  000D56  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2366  000D58  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2367  000D5A  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2368  000D5C  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2369  000D5E  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2370  000D60  2A11               	incf	___aodiv@counter^0,f,c
  2371  000D62                     l1472:
  2372  000D62  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2373  000D64  EFB6  F006         	goto	u711
  2374  000D68  EFB8  F006         	goto	u710
  2375  000D6C                     u711:
  2376  000D6C  EFA7  F006         	goto	l1470
  2377  000D70                     u710:
  2378  000D70                     l1474:
  2379  000D70  90D8               	bcf	status,0,c
  2380  000D72  3613               	rlcf	___aodiv@quotient^0,f,c
  2381  000D74  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2382  000D76  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2383  000D78  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2384  000D7A  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2385  000D7C  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2386  000D7E  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2387  000D80  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2388  000D82  5009               	movf	___aodiv@divisor^0,w,c
  2389  000D84  5C01               	subwf	___aodiv@dividend^0,w,c
  2390  000D86  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2391  000D88  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2392  000D8A  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2393  000D8C  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2394  000D8E  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2395  000D90  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2396  000D92  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2397  000D94  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2398  000D96  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2399  000D98  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2400  000D9A  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2401  000D9C  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2402  000D9E  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2403  000DA0  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2404  000DA2  A0D8               	btfss	status,0,c
  2405  000DA4  EFD6  F006         	goto	u721
  2406  000DA8  EFD8  F006         	goto	u720
  2407  000DAC                     u721:
  2408  000DAC  EFE9  F006         	goto	l1482
  2409  000DB0                     u720:
  2410  000DB0  5009               	movf	___aodiv@divisor^0,w,c
  2411  000DB2  5E01               	subwf	___aodiv@dividend^0,f,c
  2412  000DB4  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2413  000DB6  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2414  000DB8  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2415  000DBA  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2416  000DBC  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2417  000DBE  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2418  000DC0  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2419  000DC2  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2420  000DC4  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2421  000DC6  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2422  000DC8  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2423  000DCA  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2424  000DCC  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2425  000DCE  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2426  000DD0  8013               	bsf	___aodiv@quotient^0,0,c
  2427  000DD2                     l1482:
  2428  000DD2  90D8               	bcf	status,0,c
  2429  000DD4  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2430  000DD6  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2431  000DD8  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2432  000DDA  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2433  000DDC  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2434  000DDE  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2435  000DE0  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2436  000DE2  3209               	rrcf	___aodiv@divisor^0,f,c
  2437  000DE4  2E11               	decfsz	___aodiv@counter^0,f,c
  2438  000DE6  EFB8  F006         	goto	l1474
  2439  000DEA                     l1486:
  2440  000DEA  5012               	movf	___aodiv@sign^0,w,c
  2441  000DEC  B4D8               	btfsc	status,2,c
  2442  000DEE  EFFB  F006         	goto	u731
  2443  000DF2  EFFD  F006         	goto	u730
  2444  000DF6                     u731:
  2445  000DF6  EF0D  F007         	goto	l1490
  2446  000DFA                     u730:
  2447  000DFA  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2448  000DFC  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2449  000DFE  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2450  000E00  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2451  000E02  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2452  000E04  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2453  000E06  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2454  000E08  6C13               	negf	___aodiv@quotient^0,c
  2455  000E0A  0E00               	movlw	0
  2456  000E0C  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2457  000E0E  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2458  000E10  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2459  000E12  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2460  000E14  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2461  000E16  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2462  000E18  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2463  000E1A                     l1490:
  2464  000E1A  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2465  000E1E  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2466  000E22  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2467  000E26  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2468  000E2A  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2469  000E2E  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2470  000E32  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2471  000E36  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2472  000E3A  0012               	return		;funcret
  2473  000E3C                     __end_of___aodiv:
  2474                           	callstack 0
  2475                           
  2476 ;; *************** function _adcInit *****************
  2477 ;; Defined at:
  2478 ;;		line 11 in file "adc.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;  ADC_PINs        1    wreg     unsigned char 
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;  ADC_PINs        1    1[COMRAM] unsigned char 
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  1    wreg      void 
  2485 ;; Registers used:
  2486 ;;		wreg, status,2, status,0
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2492 ;;      Params:         0       0       0       0       0       0       0       0       0
  2493 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2494 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2495 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2496 ;;Total ram usage:        2 bytes
  2497 ;; Hardware stack levels used:    1
  2498 ;; This function calls:
  2499 ;;		Nothing
  2500 ;; This function is called by:
  2501 ;;		_main
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text13
  2506  001782                     __ptext13:
  2507                           	callstack 0
  2508  001782                     _adcInit:
  2509                           	callstack 30
  2510                           
  2511                           ;incstack = 0
  2512                           ;adcInit@ADC_PINs stored from wreg
  2513  001782  6E02               	movwf	adcInit@ADC_PINs^0,c
  2514  001784                     
  2515                           ;adc.c: 11: void adcInit(uint8_t ADC_PINs);adc.c: 12: {;adc.c: 14:     if(ADC_PINs == 0)
  2516  001784  5002               	movf	adcInit@ADC_PINs^0,w,c
  2517  001786  A4D8               	btfss	status,2,c
  2518  001788  EFC8  F00B         	goto	u1141
  2519  00178C  EFCA  F00B         	goto	u1140
  2520  001790                     u1141:
  2521  001790  EFD0  F00B         	goto	l1718
  2522  001794                     u1140:
  2523  001794                     
  2524                           ;adc.c: 15:     {;adc.c: 16:         ADCON1bits.PCFG = 0b1110;
  2525  001794  50C1               	movf	193,w,c	;volatile
  2526  001796  0BF0               	andlw	-16
  2527  001798  090E               	iorlw	14
  2528  00179A  6EC1               	movwf	193,c	;volatile
  2529                           
  2530                           ;adc.c: 17:     }
  2531  00179C  EFD8  F00B         	goto	l1720
  2532  0017A0                     l1718:
  2533                           
  2534                           ;adc.c: 19:     {;adc.c: 20:         ADCON1bits.PCFG = 15 - ADC_PINs;
  2535  0017A0  5002               	movf	adcInit@ADC_PINs^0,w,c
  2536  0017A2  080F               	sublw	15
  2537  0017A4  6E01               	movwf	??_adcInit^0,c
  2538  0017A6  50C1               	movf	193,w,c	;volatile
  2539  0017A8  1801               	xorwf	??_adcInit^0,w,c
  2540  0017AA  0BF0               	andlw	-16
  2541  0017AC  1801               	xorwf	??_adcInit^0,w,c
  2542  0017AE  6EC1               	movwf	193,c	;volatile
  2543  0017B0                     l1720:
  2544                           
  2545                           ;adc.c: 26:     ADCON1bits.VCFG = 0b00;
  2546  0017B0  0ECF               	movlw	-49
  2547  0017B2  16C1               	andwf	193,f,c	;volatile
  2548  0017B4                     
  2549                           ;adc.c: 31:     ADCON2bits.ACQT = 0b010;
  2550  0017B4  50C0               	movf	192,w,c	;volatile
  2551  0017B6  0BC7               	andlw	-57
  2552  0017B8  0910               	iorlw	16
  2553  0017BA  6EC0               	movwf	192,c	;volatile
  2554  0017BC                     
  2555                           ;adc.c: 36:     ADCON2bits.ADCS = 3;
  2556  0017BC  50C0               	movf	192,w,c	;volatile
  2557  0017BE  0BF8               	andlw	-8
  2558  0017C0  0903               	iorlw	3
  2559  0017C2  6EC0               	movwf	192,c	;volatile
  2560  0017C4                     
  2561                           ;adc.c: 39:     ADCON2bits.ADFM = 1;
  2562  0017C4  8EC0               	bsf	192,7,c	;volatile
  2563  0017C6                     
  2564                           ;adc.c: 40:     ADCON0bits.ADON = 1;
  2565  0017C6  80C2               	bsf	194,0,c	;volatile
  2566  0017C8  0012               	return		;funcret
  2567  0017CA                     __end_of_adcInit:
  2568                           	callstack 0
  2569                           
  2570 ;; *************** function _adcGetValue *****************
  2571 ;; Defined at:
  2572 ;;		line 43 in file "adc.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;  PinADC          1    wreg     unsigned char 
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;  PinADC          1    3[COMRAM] unsigned char 
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  2    0[COMRAM] unsigned short 
  2579 ;; Registers used:
  2580 ;;		wreg, status,2, status,0
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2586 ;;      Params:         2       0       0       0       0       0       0       0       0
  2587 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2588 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2589 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2590 ;;Total ram usage:        4 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; This function calls:
  2593 ;;		Nothing
  2594 ;; This function is called by:
  2595 ;;		_main
  2596 ;; This function uses a non-reentrant model
  2597 ;;
  2598                           
  2599                           	psect	text14
  2600  00184E                     __ptext14:
  2601                           	callstack 0
  2602  00184E                     _adcGetValue:
  2603                           	callstack 30
  2604                           
  2605                           ;incstack = 0
  2606                           ;adcGetValue@PinADC stored from wreg
  2607  00184E  6E04               	movwf	adcGetValue@PinADC^0,c
  2608  001850                     
  2609                           ;adc.c: 43: uint16_t adcGetValue(uint8_t PinADC);adc.c: 44: {;adc.c: 45:     ADCON0bits.
      +                          CHS = PinADC;
  2610  001850  C004  F003         	movff	adcGetValue@PinADC,??_adcGetValue
  2611  001854  4603               	rlncf	??_adcGetValue^0,f,c
  2612  001856  4603               	rlncf	??_adcGetValue^0,f,c
  2613  001858  50C2               	movf	194,w,c	;volatile
  2614  00185A  1803               	xorwf	??_adcGetValue^0,w,c
  2615  00185C  0BC3               	andlw	-61
  2616  00185E  1803               	xorwf	??_adcGetValue^0,w,c
  2617  001860  6EC2               	movwf	194,c	;volatile
  2618  001862                     
  2619                           ;adc.c: 46:     _delay((unsigned long)((2)*(12000000/4000.0)));
  2620  001862  0E08               	movlw	8
  2621  001864  6E03               	movwf	??_adcGetValue^0,c
  2622  001866  0ECA               	movlw	202
  2623  001868                     u1247:
  2624  001868  2EE8               	decfsz	wreg,f,c
  2625  00186A  D7FE               	bra	u1247
  2626  00186C  2E03               	decfsz	??_adcGetValue^0,f,c
  2627  00186E  D7FC               	bra	u1247
  2628  001870                     
  2629                           ;adc.c: 47:     GO_nDONE = 1;
  2630  001870  82C2               	bsf	4034,1,c	;volatile
  2631  001872                     l20:
  2632                           
  2633                           ;adc.c: 48:     while(ADCON0bits.GO_DONE)
  2634  001872  B2C2               	btfsc	194,1,c	;volatile
  2635  001874  EF3E  F00C         	goto	u1151
  2636  001878  EF40  F00C         	goto	u1150
  2637  00187C                     u1151:
  2638  00187C  EF39  F00C         	goto	l20
  2639  001880                     u1150:
  2640  001880                     
  2641                           ;adc.c: 51:     return ADRES;
  2642  001880  CFC3 F001          	movff	4035,?_adcGetValue	;volatile
  2643  001884  CFC4 F002          	movff	4036,?_adcGetValue+1	;volatile
  2644  001888  0012               	return		;funcret
  2645  00188A                     __end_of_adcGetValue:
  2646                           	callstack 0
  2647                           
  2648 ;; *************** function _Lcd_Out2 *****************
  2649 ;; Defined at:
  2650 ;;		line 123 in file "flex_lcd.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;  y               1    wreg     unsigned char 
  2653 ;;  x               1    3[COMRAM] unsigned char 
  2654 ;;  buffer          2    4[COMRAM] PTR char 
  2655 ;;		 -> buffer_lcd(16), 
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  y               1    8[COMRAM] unsigned char 
  2658 ;;  data            1    9[COMRAM] unsigned char 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2668 ;;      Params:         3       0       0       0       0       0       0       0       0
  2669 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2670 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2671 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2672 ;;Total ram usage:        7 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    1
  2675 ;; This function calls:
  2676 ;;		_Lcd_Chr_CP
  2677 ;;		_Lcd_Cmd
  2678 ;; This function is called by:
  2679 ;;		_main
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           	psect	text15
  2684  001630                     __ptext15:
  2685                           	callstack 0
  2686  001630                     _Lcd_Out2:
  2687                           	callstack 29
  2688                           
  2689                           ;incstack = 0
  2690                           ;Lcd_Out2@y stored from wreg
  2691  001630  6E09               	movwf	Lcd_Out2@y^0,c
  2692  001632                     
  2693                           ;flex_lcd.c: 123: void Lcd_Out2(uint8_t y, uint8_t x, int8_t *buffer);flex_lcd.c: 124: {
      +                          ;flex_lcd.c: 125:     uint8_t data;;flex_lcd.c: 126:     switch (y)
  2694  001632  EF2F  F00B         	goto	l1844
  2695  001636                     l1834:
  2696                           
  2697                           ;flex_lcd.c: 129:             data = 128 + x;
  2698  001636  5004               	movf	Lcd_Out2@x^0,w,c
  2699  001638  0F80               	addlw	128
  2700  00163A  6E0A               	movwf	Lcd_Out2@data^0,c
  2701                           
  2702                           ;flex_lcd.c: 130:             break;
  2703  00163C  EF4C  F00B         	goto	l1846
  2704  001640                     l1836:
  2705                           
  2706                           ;flex_lcd.c: 132:             data = 192 + x;
  2707  001640  5004               	movf	Lcd_Out2@x^0,w,c
  2708  001642  0FC0               	addlw	192
  2709  001644  6E0A               	movwf	Lcd_Out2@data^0,c
  2710                           
  2711                           ;flex_lcd.c: 133:             break;
  2712  001646  EF4C  F00B         	goto	l1846
  2713  00164A                     l1838:
  2714                           
  2715                           ;flex_lcd.c: 135:             data = 148 + x;
  2716  00164A  5004               	movf	Lcd_Out2@x^0,w,c
  2717  00164C  0F94               	addlw	148
  2718  00164E  6E0A               	movwf	Lcd_Out2@data^0,c
  2719                           
  2720                           ;flex_lcd.c: 136:             break;
  2721  001650  EF4C  F00B         	goto	l1846
  2722  001654                     l1840:
  2723                           
  2724                           ;flex_lcd.c: 138:             data = 212 + x;
  2725  001654  5004               	movf	Lcd_Out2@x^0,w,c
  2726  001656  0FD4               	addlw	212
  2727  001658  6E0A               	movwf	Lcd_Out2@data^0,c
  2728                           
  2729                           ;flex_lcd.c: 139:             break;
  2730  00165A  EF4C  F00B         	goto	l1846
  2731  00165E                     l1844:
  2732  00165E  5009               	movf	Lcd_Out2@y^0,w,c
  2733  001660  6E07               	movwf	??_Lcd_Out2^0,c
  2734  001662  6A08               	clrf	(??_Lcd_Out2+1)^0,c
  2735                           
  2736                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2737                           ; Switch size 1, requested type "simple"
  2738                           ; Number of cases is 1, Range of values is 0 to 0
  2739                           ; switch strategies available:
  2740                           ; Name         Instructions Cycles
  2741                           ; simple_byte            4     3 (average)
  2742                           ;	Chosen strategy is simple_byte
  2743  001664  5008               	movf	(??_Lcd_Out2+1)^0,w,c
  2744  001666  0A00               	xorlw	0	; case 0
  2745  001668  B4D8               	btfsc	status,2,c
  2746  00166A  EF39  F00B         	goto	l1928
  2747  00166E  EF4C  F00B         	goto	l1846
  2748  001672                     l1928:
  2749                           
  2750                           ; Switch size 1, requested type "simple"
  2751                           ; Number of cases is 4, Range of values is 1 to 4
  2752                           ; switch strategies available:
  2753                           ; Name         Instructions Cycles
  2754                           ; simple_byte           13     7 (average)
  2755                           ;	Chosen strategy is simple_byte
  2756  001672  5007               	movf	??_Lcd_Out2^0,w,c
  2757  001674  0A01               	xorlw	1	; case 1
  2758  001676  B4D8               	btfsc	status,2,c
  2759  001678  EF1B  F00B         	goto	l1834
  2760  00167C  0A03               	xorlw	3	; case 2
  2761  00167E  B4D8               	btfsc	status,2,c
  2762  001680  EF20  F00B         	goto	l1836
  2763  001684  0A01               	xorlw	1	; case 3
  2764  001686  B4D8               	btfsc	status,2,c
  2765  001688  EF25  F00B         	goto	l1838
  2766  00168C  0A07               	xorlw	7	; case 4
  2767  00168E  B4D8               	btfsc	status,2,c
  2768  001690  EF2A  F00B         	goto	l1840
  2769  001694  EF4C  F00B         	goto	l1846
  2770  001698                     l1846:
  2771                           
  2772                           ;flex_lcd.c: 143:     Lcd_Cmd(data);
  2773  001698  500A               	movf	Lcd_Out2@data^0,w,c
  2774  00169A  EC77  F008         	call	_Lcd_Cmd
  2775                           
  2776                           ;flex_lcd.c: 144:     while(*buffer)
  2777  00169E  EF5A  F00B         	goto	l1852
  2778  0016A2                     l1848:
  2779                           
  2780                           ;flex_lcd.c: 145:     {;flex_lcd.c: 146:         Lcd_Chr_CP(*buffer);
  2781  0016A2  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  2782  0016A6  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  2783  0016AA  50DF               	movf	indf2,w,c
  2784  0016AC  ECD0  F007         	call	_Lcd_Chr_CP
  2785  0016B0                     
  2786                           ;flex_lcd.c: 147:         buffer++;
  2787  0016B0  4A05               	infsnz	Lcd_Out2@buffer^0,f,c
  2788  0016B2  2A06               	incf	(Lcd_Out2@buffer+1)^0,f,c
  2789  0016B4                     l1852:
  2790                           
  2791                           ;flex_lcd.c: 144:     while(*buffer)
  2792  0016B4  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  2793  0016B8  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  2794  0016BC  50DF               	movf	indf2,w,c
  2795  0016BE  A4D8               	btfss	status,2,c
  2796  0016C0  EF64  F00B         	goto	u1181
  2797  0016C4  EF66  F00B         	goto	u1180
  2798  0016C8                     u1181:
  2799  0016C8  EF51  F00B         	goto	l1848
  2800  0016CC                     u1180:
  2801  0016CC  0012               	return		;funcret
  2802  0016CE                     __end_of_Lcd_Out2:
  2803                           	callstack 0
  2804                           
  2805 ;; *************** function _Lcd_Out *****************
  2806 ;; Defined at:
  2807 ;;		line 95 in file "flex_lcd.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;  y               1    wreg     unsigned char 
  2810 ;;  x               1    3[COMRAM] unsigned char 
  2811 ;;  buffer          2    4[COMRAM] PTR const char 
  2812 ;;		 -> STR_1(12), 
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;  y               1    8[COMRAM] unsigned char 
  2815 ;;  data            1    9[COMRAM] unsigned char 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      void 
  2818 ;; Registers used:
  2819 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2825 ;;      Params:         3       0       0       0       0       0       0       0       0
  2826 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2827 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2828 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2829 ;;Total ram usage:        7 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    1
  2832 ;; This function calls:
  2833 ;;		_Lcd_Chr_CP
  2834 ;;		_Lcd_Cmd
  2835 ;; This function is called by:
  2836 ;;		_main
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           	psect	text16
  2841  00158C                     __ptext16:
  2842                           	callstack 0
  2843  00158C                     _Lcd_Out:
  2844                           	callstack 29
  2845                           
  2846                           ;incstack = 0
  2847                           ;Lcd_Out@y stored from wreg
  2848  00158C  6E09               	movwf	Lcd_Out@y^0,c
  2849  00158E                     
  2850                           ;flex_lcd.c: 95: void Lcd_Out(uint8_t y, uint8_t x, const int8_t *buffer);flex_lcd.c: 96
      +                          : {;flex_lcd.c: 97:     uint8_t data;;flex_lcd.c: 98:     switch (y)
  2851  00158E  EFDD  F00A         	goto	l1806
  2852  001592                     l1796:
  2853                           
  2854                           ;flex_lcd.c: 101:             data = 128 + x;
  2855  001592  5004               	movf	Lcd_Out@x^0,w,c
  2856  001594  0F80               	addlw	128
  2857  001596  6E0A               	movwf	Lcd_Out@data^0,c
  2858                           
  2859                           ;flex_lcd.c: 102:             break;
  2860  001598  EFFA  F00A         	goto	l1808
  2861  00159C                     l1798:
  2862                           
  2863                           ;flex_lcd.c: 104:             data = 192 + x;
  2864  00159C  5004               	movf	Lcd_Out@x^0,w,c
  2865  00159E  0FC0               	addlw	192
  2866  0015A0  6E0A               	movwf	Lcd_Out@data^0,c
  2867                           
  2868                           ;flex_lcd.c: 105:             break;
  2869  0015A2  EFFA  F00A         	goto	l1808
  2870  0015A6                     l1800:
  2871                           
  2872                           ;flex_lcd.c: 107:             data = 148 + x;
  2873  0015A6  5004               	movf	Lcd_Out@x^0,w,c
  2874  0015A8  0F94               	addlw	148
  2875  0015AA  6E0A               	movwf	Lcd_Out@data^0,c
  2876                           
  2877                           ;flex_lcd.c: 108:             break;
  2878  0015AC  EFFA  F00A         	goto	l1808
  2879  0015B0                     l1802:
  2880                           
  2881                           ;flex_lcd.c: 110:             data = 212 + x;
  2882  0015B0  5004               	movf	Lcd_Out@x^0,w,c
  2883  0015B2  0FD4               	addlw	212
  2884  0015B4  6E0A               	movwf	Lcd_Out@data^0,c
  2885                           
  2886                           ;flex_lcd.c: 111:             break;
  2887  0015B6  EFFA  F00A         	goto	l1808
  2888  0015BA                     l1806:
  2889  0015BA  5009               	movf	Lcd_Out@y^0,w,c
  2890  0015BC  6E07               	movwf	??_Lcd_Out^0,c
  2891  0015BE  6A08               	clrf	(??_Lcd_Out+1)^0,c
  2892                           
  2893                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2894                           ; Switch size 1, requested type "simple"
  2895                           ; Number of cases is 1, Range of values is 0 to 0
  2896                           ; switch strategies available:
  2897                           ; Name         Instructions Cycles
  2898                           ; simple_byte            4     3 (average)
  2899                           ;	Chosen strategy is simple_byte
  2900  0015C0  5008               	movf	(??_Lcd_Out+1)^0,w,c
  2901  0015C2  0A00               	xorlw	0	; case 0
  2902  0015C4  B4D8               	btfsc	status,2,c
  2903  0015C6  EFE7  F00A         	goto	l1930
  2904  0015CA  EFFA  F00A         	goto	l1808
  2905  0015CE                     l1930:
  2906                           
  2907                           ; Switch size 1, requested type "simple"
  2908                           ; Number of cases is 4, Range of values is 1 to 4
  2909                           ; switch strategies available:
  2910                           ; Name         Instructions Cycles
  2911                           ; simple_byte           13     7 (average)
  2912                           ;	Chosen strategy is simple_byte
  2913  0015CE  5007               	movf	??_Lcd_Out^0,w,c
  2914  0015D0  0A01               	xorlw	1	; case 1
  2915  0015D2  B4D8               	btfsc	status,2,c
  2916  0015D4  EFC9  F00A         	goto	l1796
  2917  0015D8  0A03               	xorlw	3	; case 2
  2918  0015DA  B4D8               	btfsc	status,2,c
  2919  0015DC  EFCE  F00A         	goto	l1798
  2920  0015E0  0A01               	xorlw	1	; case 3
  2921  0015E2  B4D8               	btfsc	status,2,c
  2922  0015E4  EFD3  F00A         	goto	l1800
  2923  0015E8  0A07               	xorlw	7	; case 4
  2924  0015EA  B4D8               	btfsc	status,2,c
  2925  0015EC  EFD8  F00A         	goto	l1802
  2926  0015F0  EFFA  F00A         	goto	l1808
  2927  0015F4                     l1808:
  2928                           
  2929                           ;flex_lcd.c: 115:     Lcd_Cmd(data);
  2930  0015F4  500A               	movf	Lcd_Out@data^0,w,c
  2931  0015F6  EC77  F008         	call	_Lcd_Cmd
  2932                           
  2933                           ;flex_lcd.c: 116:     while(*buffer)
  2934  0015FA  EF09  F00B         	goto	l1814
  2935  0015FE                     l1810:
  2936                           
  2937                           ;flex_lcd.c: 117:     {;flex_lcd.c: 118:         Lcd_Chr_CP(*buffer);
  2938  0015FE  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  2939  001602  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  2940  001606                     	if	0	;tblptru may be non-zero
  2941  001606                     	endif
  2942  001606                     	if	0	;tblptru may be non-zero
  2943  001606                     	endif
  2944  001606  0008               	tblrd		*
  2945  001608  50F5               	movf	tablat,w,c
  2946  00160A  ECD0  F007         	call	_Lcd_Chr_CP
  2947  00160E                     
  2948                           ;flex_lcd.c: 119:         buffer++;
  2949  00160E  4A05               	infsnz	Lcd_Out@buffer^0,f,c
  2950  001610  2A06               	incf	(Lcd_Out@buffer+1)^0,f,c
  2951  001612                     l1814:
  2952                           
  2953                           ;flex_lcd.c: 116:     while(*buffer)
  2954  001612  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  2955  001616  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  2956  00161A                     	if	0	;tblptru may be non-zero
  2957  00161A                     	endif
  2958  00161A                     	if	0	;tblptru may be non-zero
  2959  00161A                     	endif
  2960  00161A  0008               	tblrd		*
  2961  00161C  50F5               	movf	tablat,w,c
  2962  00161E  0900               	iorlw	0
  2963  001620  A4D8               	btfss	status,2,c
  2964  001622  EF15  F00B         	goto	u1171
  2965  001626  EF17  F00B         	goto	u1170
  2966  00162A                     u1171:
  2967  00162A  EFFF  F00A         	goto	l1810
  2968  00162E                     u1170:
  2969  00162E  0012               	return		;funcret
  2970  001630                     __end_of_Lcd_Out:
  2971                           	callstack 0
  2972                           
  2973 ;; *************** function _Lcd_Chr_CP *****************
  2974 ;; Defined at:
  2975 ;;		line 151 in file "flex_lcd.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  data            1    wreg     char 
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;  data            1    2[COMRAM] char 
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  1    wreg      void 
  2982 ;; Registers used:
  2983 ;;		wreg, status,2, status,0
  2984 ;; Tracked objects:
  2985 ;;		On entry : 0/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2989 ;;      Params:         0       0       0       0       0       0       0       0       0
  2990 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2991 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2992 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2993 ;;Total ram usage:        3 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; This function calls:
  2996 ;;		Nothing
  2997 ;; This function is called by:
  2998 ;;		_Lcd_Out
  2999 ;;		_Lcd_Out2
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text17
  3004  000FA0                     __ptext17:
  3005                           	callstack 0
  3006  000FA0                     _Lcd_Chr_CP:
  3007                           	callstack 29
  3008                           
  3009                           ;incstack = 0
  3010                           ;Lcd_Chr_CP@data stored from wreg
  3011  000FA0  6E03               	movwf	Lcd_Chr_CP@data^0,c
  3012  000FA2                     
  3013                           ;flex_lcd.c: 151: void Lcd_Chr_CP(int8_t data);flex_lcd.c: 152: {;flex_lcd.c: 153:     L
      +                          ATDbits.LD3 = 0;
  3014  000FA2  968C               	bcf	140,3,c	;volatile
  3015                           
  3016                           ;flex_lcd.c: 154:     LATDbits.LD2 = 1;
  3017  000FA4  848C               	bsf	140,2,c	;volatile
  3018  000FA6                     
  3019                           ;flex_lcd.c: 155:     LATDbits.LD7 = (data & 0b10000000)>>7;
  3020  000FA6  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3021  000FAA  0E07               	movlw	7
  3022  000FAC  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3023  000FAE                     u1075:
  3024  000FAE  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3025  000FB0  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3026  000FB2  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3027  000FB4  EFD7  F007         	goto	u1075
  3028  000FB8  0E01               	movlw	1
  3029  000FBA  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3030  000FBC  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3031  000FBE  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3032  000FC0  508C               	movf	140,w,c	;volatile
  3033  000FC2  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3034  000FC4  0B7F               	andlw	-129
  3035  000FC6  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3036  000FC8  6E8C               	movwf	140,c	;volatile
  3037                           
  3038                           ;flex_lcd.c: 156:     LATDbits.LD6 = (data & 0b01000000)>>6;
  3039  000FCA  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3040  000FCE  0E06               	movlw	6
  3041  000FD0  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3042  000FD2                     u1085:
  3043  000FD2  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3044  000FD4  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3045  000FD6  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3046  000FD8  EFE9  F007         	goto	u1085
  3047  000FDC  0E01               	movlw	1
  3048  000FDE  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3049  000FE0  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3050  000FE2  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3051  000FE4  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3052  000FE6  508C               	movf	140,w,c	;volatile
  3053  000FE8  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3054  000FEA  0BBF               	andlw	-65
  3055  000FEC  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3056  000FEE  6E8C               	movwf	140,c	;volatile
  3057                           
  3058                           ;flex_lcd.c: 157:     LATDbits.LD5 = (data & 0b00100000)>>5;
  3059  000FF0  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3060  000FF4  0E05               	movlw	5
  3061  000FF6  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3062  000FF8                     u1095:
  3063  000FF8  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3064  000FFA  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3065  000FFC  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3066  000FFE  EFFC  F007         	goto	u1095
  3067  001002  0E01               	movlw	1
  3068  001004  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3069  001006  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3070  001008  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3071  00100A  508C               	movf	140,w,c	;volatile
  3072  00100C  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3073  00100E  0BDF               	andlw	-33
  3074  001010  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3075  001012  6E8C               	movwf	140,c	;volatile
  3076                           
  3077                           ;flex_lcd.c: 158:     LATDbits.LD4 = (data & 0b00010000)>>4;
  3078  001014  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3079  001018  0E04               	movlw	4
  3080  00101A  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3081  00101C                     u1105:
  3082  00101C  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3083  00101E  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3084  001020  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3085  001022  EF0E  F008         	goto	u1105
  3086  001026  0E01               	movlw	1
  3087  001028  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3088  00102A  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3089  00102C  508C               	movf	140,w,c	;volatile
  3090  00102E  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3091  001030  0BEF               	andlw	-17
  3092  001032  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3093  001034  6E8C               	movwf	140,c	;volatile
  3094  001036                     
  3095                           ;flex_lcd.c: 159:     _delay(10);
  3096  001036  0E03               	movlw	3
  3097  001038                     u1257:
  3098  001038  2EE8               	decfsz	wreg,f,c
  3099  00103A  D7FE               	bra	u1257
  3100  00103C  F000               	nop	
  3101  00103E                     
  3102                           ;flex_lcd.c: 160:     LATDbits.LD3 = 1;
  3103  00103E  868C               	bsf	140,3,c	;volatile
  3104  001040                     
  3105                           ;flex_lcd.c: 161:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3106  001040  0E05               	movlw	5
  3107  001042                     u1267:
  3108  001042  2EE8               	decfsz	wreg,f,c
  3109  001044  D7FE               	bra	u1267
  3110  001046                     
  3111                           ;flex_lcd.c: 162:     LATDbits.LD3 = 0;
  3112  001046  968C               	bcf	140,3,c	;volatile
  3113                           
  3114                           ;flex_lcd.c: 163:     LATDbits.LD7 = (data & 0b00001000)>>3;
  3115  001048  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3116  00104C  0E03               	movlw	3
  3117  00104E  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3118  001050                     u1115:
  3119  001050  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3120  001052  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3121  001054  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3122  001056  EF28  F008         	goto	u1115
  3123  00105A  0E01               	movlw	1
  3124  00105C  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3125  00105E  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3126  001060  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3127  001062  508C               	movf	140,w,c	;volatile
  3128  001064  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3129  001066  0B7F               	andlw	-129
  3130  001068  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3131  00106A  6E8C               	movwf	140,c	;volatile
  3132                           
  3133                           ;flex_lcd.c: 164:     LATDbits.LD6 = (data & 0b00000100)>>2;
  3134  00106C  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3135  001070  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3136  001072  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3137  001074  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3138  001076  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3139  001078  0E01               	movlw	1
  3140  00107A  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3141  00107C  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3142  00107E  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3143  001080  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3144  001082  508C               	movf	140,w,c	;volatile
  3145  001084  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3146  001086  0BBF               	andlw	-65
  3147  001088  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3148  00108A  6E8C               	movwf	140,c	;volatile
  3149                           
  3150                           ;flex_lcd.c: 165:     LATDbits.LD5 = (data & 0b00000010)>>1;
  3151  00108C  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3152  001090  0E01               	movlw	1
  3153  001092  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  3154  001094                     u1125:
  3155  001094  3401               	rlcf	??_Lcd_Chr_CP^0,w,c
  3156  001096  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  3157  001098  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  3158  00109A  EF4A  F008         	goto	u1125
  3159  00109E  0E01               	movlw	1
  3160  0010A0  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3161  0010A2  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3162  0010A4  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  3163  0010A6  508C               	movf	140,w,c	;volatile
  3164  0010A8  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3165  0010AA  0BDF               	andlw	-33
  3166  0010AC  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3167  0010AE  6E8C               	movwf	140,c	;volatile
  3168                           
  3169                           ;flex_lcd.c: 166:     LATDbits.LD4 = (data & 0b00000001);
  3170  0010B0  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3171  0010B4  0E01               	movlw	1
  3172  0010B6  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  3173  0010B8  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  3174  0010BA  508C               	movf	140,w,c	;volatile
  3175  0010BC  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3176  0010BE  0BEF               	andlw	-17
  3177  0010C0  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  3178  0010C2  6E8C               	movwf	140,c	;volatile
  3179  0010C4                     
  3180                           ;flex_lcd.c: 167:     _delay(10);
  3181  0010C4  0E03               	movlw	3
  3182  0010C6                     u1277:
  3183  0010C6  2EE8               	decfsz	wreg,f,c
  3184  0010C8  D7FE               	bra	u1277
  3185  0010CA  F000               	nop	
  3186  0010CC                     
  3187                           ;flex_lcd.c: 168:     LATDbits.LD3 = 1;
  3188  0010CC  868C               	bsf	140,3,c	;volatile
  3189  0010CE                     
  3190                           ;flex_lcd.c: 169:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3191  0010CE  0E05               	movlw	5
  3192  0010D0                     u1287:
  3193  0010D0  2EE8               	decfsz	wreg,f,c
  3194  0010D2  D7FE               	bra	u1287
  3195  0010D4                     
  3196                           ;flex_lcd.c: 170:     LATDbits.LD3 = 0;
  3197  0010D4  968C               	bcf	140,3,c	;volatile
  3198  0010D6                     
  3199                           ;flex_lcd.c: 171:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3200  0010D6  0E05               	movlw	5
  3201  0010D8                     u1297:
  3202  0010D8  2EE8               	decfsz	wreg,f,c
  3203  0010DA  D7FE               	bra	u1297
  3204  0010DC                     
  3205                           ;flex_lcd.c: 172:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  3206  0010DC  0E16               	movlw	22
  3207  0010DE  6E01               	movwf	??_Lcd_Chr_CP^0,c
  3208  0010E0  0E6C               	movlw	108
  3209  0010E2                     u1307:
  3210  0010E2  2EE8               	decfsz	wreg,f,c
  3211  0010E4  D7FE               	bra	u1307
  3212  0010E6  2E01               	decfsz	??_Lcd_Chr_CP^0,f,c
  3213  0010E8  D7FC               	bra	u1307
  3214  0010EA  D000               	nop2	
  3215  0010EC  0012               	return		;funcret
  3216  0010EE                     __end_of_Lcd_Chr_CP:
  3217                           	callstack 0
  3218                           
  3219 ;; *************** function _Lcd_Init *****************
  3220 ;; Defined at:
  3221 ;;		line 31 in file "flex_lcd.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;		None
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;  i               1    4[COMRAM] unsigned char 
  3226 ;;  data            1    0        unsigned char 
  3227 ;; Return value:  Size  Location     Type
  3228 ;;                  1    wreg      void 
  3229 ;; Registers used:
  3230 ;;		wreg, status,2, status,0, cstack
  3231 ;; Tracked objects:
  3232 ;;		On entry : 0/0
  3233 ;;		On exit  : 0/0
  3234 ;;		Unchanged: 0/0
  3235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3236 ;;      Params:         0       0       0       0       0       0       0       0       0
  3237 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3238 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3239 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3240 ;;Total ram usage:        3 bytes
  3241 ;; Hardware stack levels used:    1
  3242 ;; Hardware stack levels required when called:    1
  3243 ;; This function calls:
  3244 ;;		_Lcd_Cmd
  3245 ;; This function is called by:
  3246 ;;		_main
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           	psect	text18
  3251  0014CC                     __ptext18:
  3252                           	callstack 0
  3253  0014CC                     _Lcd_Init:
  3254                           	callstack 29
  3255  0014CC                     
  3256                           ;flex_lcd.c: 33:     TRISDbits.TRISD7 = 0;
  3257  0014CC  9E95               	bcf	149,7,c	;volatile
  3258                           
  3259                           ;flex_lcd.c: 34:     TRISDbits.TRISD6 = 0;
  3260  0014CE  9C95               	bcf	149,6,c	;volatile
  3261                           
  3262                           ;flex_lcd.c: 35:     TRISDbits.TRISD5 = 0;
  3263  0014D0  9A95               	bcf	149,5,c	;volatile
  3264                           
  3265                           ;flex_lcd.c: 36:     TRISDbits.TRISD4 = 0;
  3266  0014D2  9895               	bcf	149,4,c	;volatile
  3267                           
  3268                           ;flex_lcd.c: 37:     TRISDbits.TRISD3 = 0;
  3269  0014D4  9695               	bcf	149,3,c	;volatile
  3270                           
  3271                           ;flex_lcd.c: 38:     TRISDbits.TRISD2 = 0;
  3272  0014D6  9495               	bcf	149,2,c	;volatile
  3273  0014D8                     
  3274                           ;flex_lcd.c: 39:     _delay((unsigned long)((34)*(12000000/4000.0)));
  3275  0014D8  0E85               	movlw	133
  3276  0014DA  6E04               	movwf	??_Lcd_Init^0,c
  3277  0014DC  0E76               	movlw	118
  3278  0014DE                     u1317:
  3279  0014DE  2EE8               	decfsz	wreg,f,c
  3280  0014E0  D7FE               	bra	u1317
  3281  0014E2  2E04               	decfsz	??_Lcd_Init^0,f,c
  3282  0014E4  D7FC               	bra	u1317
  3283  0014E6  D000               	nop2	
  3284  0014E8                     
  3285                           ;flex_lcd.c: 40:     for (uint8_t i = 0; i < 4; i++) {
  3286  0014E8  0E00               	movlw	0
  3287  0014EA  6E05               	movwf	Lcd_Init@i^0,c
  3288  0014EC                     l91:
  3289                           
  3290                           ;flex_lcd.c: 41:         LATDbits.LD7 = 0;
  3291  0014EC  9E8C               	bcf	140,7,c	;volatile
  3292                           
  3293                           ;flex_lcd.c: 42:         LATDbits.LD6 = 0;
  3294  0014EE  9C8C               	bcf	140,6,c	;volatile
  3295                           
  3296                           ;flex_lcd.c: 43:         LATDbits.LD5 = 1;
  3297  0014F0  8A8C               	bsf	140,5,c	;volatile
  3298                           
  3299                           ;flex_lcd.c: 44:         LATDbits.LD4 = 1;
  3300  0014F2  888C               	bsf	140,4,c	;volatile
  3301                           
  3302                           ;flex_lcd.c: 45:         LATDbits.LD3 = 0;
  3303  0014F4  968C               	bcf	140,3,c	;volatile
  3304                           
  3305                           ;flex_lcd.c: 46:         LATDbits.LD2 = 0;
  3306  0014F6  948C               	bcf	140,2,c	;volatile
  3307                           
  3308                           ;flex_lcd.c: 47:         LATDbits.LD7 = 0;
  3309  0014F8  9E8C               	bcf	140,7,c	;volatile
  3310                           
  3311                           ;flex_lcd.c: 48:         LATDbits.LD6 = 0;
  3312  0014FA  9C8C               	bcf	140,6,c	;volatile
  3313                           
  3314                           ;flex_lcd.c: 49:         LATDbits.LD5 = 1;
  3315  0014FC  8A8C               	bsf	140,5,c	;volatile
  3316                           
  3317                           ;flex_lcd.c: 50:         LATDbits.LD4 = 1;
  3318  0014FE  888C               	bsf	140,4,c	;volatile
  3319                           
  3320                           ;flex_lcd.c: 51:         LATDbits.LD3 = 1;
  3321  001500  868C               	bsf	140,3,c	;volatile
  3322                           
  3323                           ;flex_lcd.c: 52:         LATDbits.LD2 = 0;
  3324  001502  948C               	bcf	140,2,c	;volatile
  3325  001504                     
  3326                           ;flex_lcd.c: 53:         _delay((unsigned long)((5)*(12000000/4000000.0)));
  3327  001504  0E05               	movlw	5
  3328  001506                     u1327:
  3329  001506  2EE8               	decfsz	wreg,f,c
  3330  001508  D7FE               	bra	u1327
  3331  00150A                     
  3332                           ;flex_lcd.c: 54:         LATDbits.LD7 = 0;
  3333  00150A  9E8C               	bcf	140,7,c	;volatile
  3334  00150C                     
  3335                           ;flex_lcd.c: 55:         LATDbits.LD6 = 0;
  3336  00150C  9C8C               	bcf	140,6,c	;volatile
  3337  00150E                     
  3338                           ;flex_lcd.c: 56:         LATDbits.LD5 = 1;
  3339  00150E  8A8C               	bsf	140,5,c	;volatile
  3340  001510                     
  3341                           ;flex_lcd.c: 57:         LATDbits.LD4 = 1;
  3342  001510  888C               	bsf	140,4,c	;volatile
  3343  001512                     
  3344                           ;flex_lcd.c: 58:         LATDbits.LD3 = 0;
  3345  001512  968C               	bcf	140,3,c	;volatile
  3346  001514                     
  3347                           ;flex_lcd.c: 59:         LATDbits.LD2 = 0;
  3348  001514  948C               	bcf	140,2,c	;volatile
  3349                           
  3350                           ;flex_lcd.c: 60:         _delay((unsigned long)((5500)*(12000000/4000000.0)));
  3351  001516  0E16               	movlw	22
  3352  001518  6E04               	movwf	??_Lcd_Init^0,c
  3353  00151A  0E6C               	movlw	108
  3354  00151C                     u1337:
  3355  00151C  2EE8               	decfsz	wreg,f,c
  3356  00151E  D7FE               	bra	u1337
  3357  001520  2E04               	decfsz	??_Lcd_Init^0,f,c
  3358  001522  D7FC               	bra	u1337
  3359  001524  D000               	nop2	
  3360  001526                     
  3361                           ;flex_lcd.c: 61:     }
  3362  001526  2A05               	incf	Lcd_Init@i^0,f,c
  3363  001528  0E03               	movlw	3
  3364  00152A  6405               	cpfsgt	Lcd_Init@i^0,c
  3365  00152C  EF9A  F00A         	goto	u1161
  3366  001530  EF9C  F00A         	goto	u1160
  3367  001534                     u1161:
  3368  001534  EF76  F00A         	goto	l91
  3369  001538                     u1160:
  3370  001538                     
  3371                           ;flex_lcd.c: 62:     LATDbits.LD7 = 0;
  3372  001538  9E8C               	bcf	140,7,c	;volatile
  3373                           
  3374                           ;flex_lcd.c: 63:     LATDbits.LD6 = 0;
  3375  00153A  9C8C               	bcf	140,6,c	;volatile
  3376                           
  3377                           ;flex_lcd.c: 64:     LATDbits.LD5 = 1;
  3378  00153C  8A8C               	bsf	140,5,c	;volatile
  3379                           
  3380                           ;flex_lcd.c: 65:     LATDbits.LD4 = 0;
  3381  00153E  988C               	bcf	140,4,c	;volatile
  3382                           
  3383                           ;flex_lcd.c: 66:     LATDbits.LD3 = 0;
  3384  001540  968C               	bcf	140,3,c	;volatile
  3385                           
  3386                           ;flex_lcd.c: 67:     LATDbits.LD2 = 0;
  3387  001542  948C               	bcf	140,2,c	;volatile
  3388                           
  3389                           ;flex_lcd.c: 68:     LATDbits.LD7 = 0;
  3390  001544  9E8C               	bcf	140,7,c	;volatile
  3391                           
  3392                           ;flex_lcd.c: 69:     LATDbits.LD6 = 0;
  3393  001546  9C8C               	bcf	140,6,c	;volatile
  3394                           
  3395                           ;flex_lcd.c: 70:     LATDbits.LD5 = 1;
  3396  001548  8A8C               	bsf	140,5,c	;volatile
  3397                           
  3398                           ;flex_lcd.c: 71:     LATDbits.LD4 = 0;
  3399  00154A  988C               	bcf	140,4,c	;volatile
  3400                           
  3401                           ;flex_lcd.c: 72:     LATDbits.LD3 = 1;
  3402  00154C  868C               	bsf	140,3,c	;volatile
  3403                           
  3404                           ;flex_lcd.c: 73:     LATDbits.LD2 = 0;
  3405  00154E  948C               	bcf	140,2,c	;volatile
  3406  001550                     
  3407                           ;flex_lcd.c: 74:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3408  001550  0E05               	movlw	5
  3409  001552                     u1347:
  3410  001552  2EE8               	decfsz	wreg,f,c
  3411  001554  D7FE               	bra	u1347
  3412  001556                     
  3413                           ;flex_lcd.c: 75:     LATDbits.LD7 = 0;
  3414  001556  9E8C               	bcf	140,7,c	;volatile
  3415  001558                     
  3416                           ;flex_lcd.c: 76:     LATDbits.LD6 = 0;
  3417  001558  9C8C               	bcf	140,6,c	;volatile
  3418  00155A                     
  3419                           ;flex_lcd.c: 77:     LATDbits.LD5 = 1;
  3420  00155A  8A8C               	bsf	140,5,c	;volatile
  3421  00155C                     
  3422                           ;flex_lcd.c: 78:     LATDbits.LD4 = 0;
  3423  00155C  988C               	bcf	140,4,c	;volatile
  3424  00155E                     
  3425                           ;flex_lcd.c: 79:     LATDbits.LD3 = 0;
  3426  00155E  968C               	bcf	140,3,c	;volatile
  3427  001560                     
  3428                           ;flex_lcd.c: 80:     LATDbits.LD2 = 0;
  3429  001560  948C               	bcf	140,2,c	;volatile
  3430                           
  3431                           ;flex_lcd.c: 81:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  3432  001562  0E16               	movlw	22
  3433  001564  6E04               	movwf	??_Lcd_Init^0,c
  3434  001566  0E6C               	movlw	108
  3435  001568                     u1357:
  3436  001568  2EE8               	decfsz	wreg,f,c
  3437  00156A  D7FE               	bra	u1357
  3438  00156C  2E04               	decfsz	??_Lcd_Init^0,f,c
  3439  00156E  D7FC               	bra	u1357
  3440  001570  D000               	nop2	
  3441  001572                     
  3442                           ;flex_lcd.c: 85:     Lcd_Cmd(data);
  3443  001572  0E28               	movlw	40
  3444  001574  EC77  F008         	call	_Lcd_Cmd
  3445  001578                     
  3446                           ;flex_lcd.c: 87:     Lcd_Cmd(data);
  3447  001578  0E10               	movlw	16
  3448  00157A  EC77  F008         	call	_Lcd_Cmd
  3449  00157E                     
  3450                           ;flex_lcd.c: 89:     Lcd_Cmd(data);
  3451  00157E  0E01               	movlw	1
  3452  001580  EC77  F008         	call	_Lcd_Cmd
  3453  001584                     
  3454                           ;flex_lcd.c: 91:     Lcd_Cmd(data);
  3455  001584  0E0F               	movlw	15
  3456  001586  EC77  F008         	call	_Lcd_Cmd
  3457  00158A  0012               	return		;funcret
  3458  00158C                     __end_of_Lcd_Init:
  3459                           	callstack 0
  3460                           
  3461 ;; *************** function _Lcd_Cmd *****************
  3462 ;; Defined at:
  3463 ;;		line 175 in file "flex_lcd.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;  data            1    wreg     unsigned char 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  data            1    2[COMRAM] unsigned char 
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      void 
  3470 ;; Registers used:
  3471 ;;		wreg, status,2, status,0
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3477 ;;      Params:         0       0       0       0       0       0       0       0       0
  3478 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3479 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3480 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3481 ;;Total ram usage:        3 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; This function calls:
  3484 ;;		Nothing
  3485 ;; This function is called by:
  3486 ;;		_main
  3487 ;;		_Lcd_Init
  3488 ;;		_Lcd_Out
  3489 ;;		_Lcd_Out2
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           	psect	text19
  3494  0010EE                     __ptext19:
  3495                           	callstack 0
  3496  0010EE                     _Lcd_Cmd:
  3497                           	callstack 29
  3498                           
  3499                           ;incstack = 0
  3500                           ;Lcd_Cmd@data stored from wreg
  3501  0010EE  6E03               	movwf	Lcd_Cmd@data^0,c
  3502  0010F0                     
  3503                           ;flex_lcd.c: 175: void Lcd_Cmd(uint8_t data);flex_lcd.c: 176: {;flex_lcd.c: 177:     LAT
      +                          Dbits.LD3 = 0; LATDbits.LD2 = 0;
  3504  0010F0  968C               	bcf	140,3,c	;volatile
  3505  0010F2  948C               	bcf	140,2,c	;volatile
  3506  0010F4                     
  3507                           ;flex_lcd.c: 178:     LATDbits.LD7 = (data & 0b10000000)>>7;
  3508  0010F4  6A01               	clrf	??_Lcd_Cmd^0,c
  3509  0010F6  AE03               	btfss	Lcd_Cmd@data^0,7,c
  3510  0010F8  D001               	bra	u1045
  3511  0010FA  2A01               	incf	??_Lcd_Cmd^0,f,c
  3512  0010FC                     u1045:
  3513  0010FC  0E01               	movlw	1
  3514  0010FE  1601               	andwf	??_Lcd_Cmd^0,f,c
  3515  001100  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3516  001102  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3517  001104  508C               	movf	140,w,c	;volatile
  3518  001106  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3519  001108  0B7F               	andlw	-129
  3520  00110A  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3521  00110C  6E8C               	movwf	140,c	;volatile
  3522                           
  3523                           ;flex_lcd.c: 179:     LATDbits.LD6 = (data & 0b01000000)>>6;
  3524  00110E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3525  001112  0E06               	movlw	6
  3526  001114  6E02               	movwf	(??_Lcd_Cmd+1)^0,c
  3527  001116                     u1055:
  3528  001116  90D8               	bcf	status,0,c
  3529  001118  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3530  00111A  2E02               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  3531  00111C  EF8B  F008         	goto	u1055
  3532  001120  0E01               	movlw	1
  3533  001122  1601               	andwf	??_Lcd_Cmd^0,f,c
  3534  001124  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3535  001126  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3536  001128  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3537  00112A  508C               	movf	140,w,c	;volatile
  3538  00112C  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3539  00112E  0BBF               	andlw	-65
  3540  001130  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3541  001132  6E8C               	movwf	140,c	;volatile
  3542                           
  3543                           ;flex_lcd.c: 180:     LATDbits.LD5 = (data & 0b00100000)>>5;
  3544  001134  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3545  001138  0E05               	movlw	5
  3546  00113A  6E02               	movwf	(??_Lcd_Cmd+1)^0,c
  3547  00113C                     u1065:
  3548  00113C  90D8               	bcf	status,0,c
  3549  00113E  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3550  001140  2E02               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  3551  001142  EF9E  F008         	goto	u1065
  3552  001146  0E01               	movlw	1
  3553  001148  1601               	andwf	??_Lcd_Cmd^0,f,c
  3554  00114A  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3555  00114C  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3556  00114E  508C               	movf	140,w,c	;volatile
  3557  001150  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3558  001152  0BDF               	andlw	-33
  3559  001154  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3560  001156  6E8C               	movwf	140,c	;volatile
  3561                           
  3562                           ;flex_lcd.c: 181:     LATDbits.LD4 = (data & 0b00010000)>>4;
  3563  001158  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3564  00115C  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3565  00115E  0E0F               	movlw	15
  3566  001160  1601               	andwf	??_Lcd_Cmd^0,f,c
  3567  001162  0E01               	movlw	1
  3568  001164  1601               	andwf	??_Lcd_Cmd^0,f,c
  3569  001166  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3570  001168  508C               	movf	140,w,c	;volatile
  3571  00116A  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3572  00116C  0BEF               	andlw	-17
  3573  00116E  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3574  001170  6E8C               	movwf	140,c	;volatile
  3575  001172                     
  3576                           ;flex_lcd.c: 182:     _delay(10);
  3577  001172  0E03               	movlw	3
  3578  001174                     u1367:
  3579  001174  2EE8               	decfsz	wreg,f,c
  3580  001176  D7FE               	bra	u1367
  3581  001178  F000               	nop	
  3582  00117A                     
  3583                           ;flex_lcd.c: 183:     LATDbits.LD3 = 1;
  3584  00117A  868C               	bsf	140,3,c	;volatile
  3585  00117C                     
  3586                           ;flex_lcd.c: 184:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3587  00117C  0E05               	movlw	5
  3588  00117E                     u1377:
  3589  00117E  2EE8               	decfsz	wreg,f,c
  3590  001180  D7FE               	bra	u1377
  3591  001182                     
  3592                           ;flex_lcd.c: 185:     LATDbits.LD3 = 0;
  3593  001182  968C               	bcf	140,3,c	;volatile
  3594                           
  3595                           ;flex_lcd.c: 186:     LATDbits.LD7 = (data & 0b00001000)>>3;
  3596  001184  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3597  001188  90D8               	bcf	status,0,c
  3598  00118A  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3599  00118C  90D8               	bcf	status,0,c
  3600  00118E  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3601  001190  90D8               	bcf	status,0,c
  3602  001192  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3603  001194  0E01               	movlw	1
  3604  001196  1601               	andwf	??_Lcd_Cmd^0,f,c
  3605  001198  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3606  00119A  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3607  00119C  508C               	movf	140,w,c	;volatile
  3608  00119E  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3609  0011A0  0B7F               	andlw	-129
  3610  0011A2  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3611  0011A4  6E8C               	movwf	140,c	;volatile
  3612                           
  3613                           ;flex_lcd.c: 187:     LATDbits.LD6 = (data & 0b00000100)>>2;
  3614  0011A6  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3615  0011AA  90D8               	bcf	status,0,c
  3616  0011AC  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3617  0011AE  90D8               	bcf	status,0,c
  3618  0011B0  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3619  0011B2  0E01               	movlw	1
  3620  0011B4  1601               	andwf	??_Lcd_Cmd^0,f,c
  3621  0011B6  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3622  0011B8  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3623  0011BA  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3624  0011BC  508C               	movf	140,w,c	;volatile
  3625  0011BE  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3626  0011C0  0BBF               	andlw	-65
  3627  0011C2  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3628  0011C4  6E8C               	movwf	140,c	;volatile
  3629                           
  3630                           ;flex_lcd.c: 188:     LATDbits.LD5 = (data & 0b00000010)>>1;
  3631  0011C6  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3632  0011CA  90D8               	bcf	status,0,c
  3633  0011CC  3201               	rrcf	??_Lcd_Cmd^0,f,c
  3634  0011CE  0E01               	movlw	1
  3635  0011D0  1601               	andwf	??_Lcd_Cmd^0,f,c
  3636  0011D2  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3637  0011D4  4601               	rlncf	??_Lcd_Cmd^0,f,c
  3638  0011D6  508C               	movf	140,w,c	;volatile
  3639  0011D8  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3640  0011DA  0BDF               	andlw	-33
  3641  0011DC  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3642  0011DE  6E8C               	movwf	140,c	;volatile
  3643                           
  3644                           ;flex_lcd.c: 189:     LATDbits.LD4 = (data & 0b00000001);
  3645  0011E0  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  3646  0011E4  0E01               	movlw	1
  3647  0011E6  1601               	andwf	??_Lcd_Cmd^0,f,c
  3648  0011E8  3A01               	swapf	??_Lcd_Cmd^0,f,c
  3649  0011EA  508C               	movf	140,w,c	;volatile
  3650  0011EC  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3651  0011EE  0BEF               	andlw	-17
  3652  0011F0  1801               	xorwf	??_Lcd_Cmd^0,w,c
  3653  0011F2  6E8C               	movwf	140,c	;volatile
  3654  0011F4                     
  3655                           ;flex_lcd.c: 190:     _delay(10);
  3656  0011F4  0E03               	movlw	3
  3657  0011F6                     u1387:
  3658  0011F6  2EE8               	decfsz	wreg,f,c
  3659  0011F8  D7FE               	bra	u1387
  3660  0011FA  F000               	nop	
  3661  0011FC                     
  3662                           ;flex_lcd.c: 191:     LATDbits.LD3 = 1;
  3663  0011FC  868C               	bsf	140,3,c	;volatile
  3664  0011FE                     
  3665                           ;flex_lcd.c: 192:     _delay((unsigned long)((5)*(12000000/4000000.0)));
  3666  0011FE  0E05               	movlw	5
  3667  001200                     u1397:
  3668  001200  2EE8               	decfsz	wreg,f,c
  3669  001202  D7FE               	bra	u1397
  3670  001204                     
  3671                           ;flex_lcd.c: 193:     LATDbits.LD3 = 0;
  3672  001204  968C               	bcf	140,3,c	;volatile
  3673  001206                     
  3674                           ;flex_lcd.c: 194:     _delay((unsigned long)((5500)*(12000000/4000000.0)));
  3675  001206  0E16               	movlw	22
  3676  001208  6E01               	movwf	??_Lcd_Cmd^0,c
  3677  00120A  0E6C               	movlw	108
  3678  00120C                     u1407:
  3679  00120C  2EE8               	decfsz	wreg,f,c
  3680  00120E  D7FE               	bra	u1407
  3681  001210  2E01               	decfsz	??_Lcd_Cmd^0,f,c
  3682  001212  D7FC               	bra	u1407
  3683  001214  D000               	nop2	
  3684  001216  0012               	return		;funcret
  3685  001218                     __end_of_Lcd_Cmd:
  3686                           	callstack 0
  3687                           
  3688                           	psect	rparam
  3689  0000                     
  3690                           	psect	idloc
  3691                           
  3692                           ;Config register IDLOC0 @ 0x200000
  3693                           ;	unspecified, using default values
  3694  200000                     	org	2097152
  3695  200000  FF                 	db	255
  3696                           
  3697                           ;Config register IDLOC1 @ 0x200001
  3698                           ;	unspecified, using default values
  3699  200001                     	org	2097153
  3700  200001  FF                 	db	255
  3701                           
  3702                           ;Config register IDLOC2 @ 0x200002
  3703                           ;	unspecified, using default values
  3704  200002                     	org	2097154
  3705  200002  FF                 	db	255
  3706                           
  3707                           ;Config register IDLOC3 @ 0x200003
  3708                           ;	unspecified, using default values
  3709  200003                     	org	2097155
  3710  200003  FF                 	db	255
  3711                           
  3712                           ;Config register IDLOC4 @ 0x200004
  3713                           ;	unspecified, using default values
  3714  200004                     	org	2097156
  3715  200004  FF                 	db	255
  3716                           
  3717                           ;Config register IDLOC5 @ 0x200005
  3718                           ;	unspecified, using default values
  3719  200005                     	org	2097157
  3720  200005  FF                 	db	255
  3721                           
  3722                           ;Config register IDLOC6 @ 0x200006
  3723                           ;	unspecified, using default values
  3724  200006                     	org	2097158
  3725  200006  FF                 	db	255
  3726                           
  3727                           ;Config register IDLOC7 @ 0x200007
  3728                           ;	unspecified, using default values
  3729  200007                     	org	2097159
  3730  200007  FF                 	db	255
  3731                           
  3732                           	psect	config
  3733                           
  3734                           ;Config register CONFIG1L @ 0x300000
  3735                           ;	PLL Prescaler Selection bits
  3736                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  3737                           ;	System Clock Postscaler Selection bits
  3738                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  3739                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3740                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  3741  300000                     	org	3145728
  3742  300000  00                 	db	0
  3743                           
  3744                           ;Config register CONFIG1H @ 0x300001
  3745                           ;	Oscillator Selection bits
  3746                           ;	FOSC = HS, HS oscillator (HS)
  3747                           ;	Fail-Safe Clock Monitor Enable bit
  3748                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3749                           ;	Internal/External Oscillator Switchover bit
  3750                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3751  300001                     	org	3145729
  3752  300001  0C                 	db	12
  3753                           
  3754                           ;Config register CONFIG2L @ 0x300002
  3755                           ;	Power-up Timer Enable bit
  3756                           ;	PWRT = OFF, PWRT disabled
  3757                           ;	Brown-out Reset Enable bits
  3758                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3759                           ;	Brown-out Reset Voltage bits
  3760                           ;	BORV = 3, Minimum setting 2.05V
  3761                           ;	USB Voltage Regulator Enable bit
  3762                           ;	VREGEN = OFF, USB voltage regulator disabled
  3763  300002                     	org	3145730
  3764  300002  19                 	db	25
  3765                           
  3766                           ;Config register CONFIG2H @ 0x300003
  3767                           ;	Watchdog Timer Enable bit
  3768                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3769                           ;	Watchdog Timer Postscale Select bits
  3770                           ;	WDTPS = 32768, 1:32768
  3771  300003                     	org	3145731
  3772  300003  1E                 	db	30
  3773                           
  3774                           ; Padding undefined space
  3775  300004                     	org	3145732
  3776  300004  FF                 	db	255
  3777                           
  3778                           ;Config register CONFIG3H @ 0x300005
  3779                           ;	CCP2 MUX bit
  3780                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  3781                           ;	PORTB A/D Enable bit
  3782                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3783                           ;	Low-Power Timer 1 Oscillator Enable bit
  3784                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3785                           ;	MCLR Pin Enable bit
  3786                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3787  300005                     	org	3145733
  3788  300005  81                 	db	129
  3789                           
  3790                           ;Config register CONFIG4L @ 0x300006
  3791                           ;	Stack Full/Underflow Reset Enable bit
  3792                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3793                           ;	Single-Supply ICSP Enable bit
  3794                           ;	LVP = OFF, Single-Supply ICSP disabled
  3795                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3796                           ;	ICPRT = OFF, ICPORT disabled
  3797                           ;	Extended Instruction Set Enable bit
  3798                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3799                           ;	Background Debugger Enable bit
  3800                           ;	DEBUG = 0x1, unprogrammed default
  3801  300006                     	org	3145734
  3802  300006  81                 	db	129
  3803                           
  3804                           ; Padding undefined space
  3805  300007                     	org	3145735
  3806  300007  FF                 	db	255
  3807                           
  3808                           ;Config register CONFIG5L @ 0x300008
  3809                           ;	Code Protection bit
  3810                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  3811                           ;	Code Protection bit
  3812                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  3813                           ;	Code Protection bit
  3814                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  3815                           ;	Code Protection bit
  3816                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  3817  300008                     	org	3145736
  3818  300008  0F                 	db	15
  3819                           
  3820                           ;Config register CONFIG5H @ 0x300009
  3821                           ;	Boot Block Code Protection bit
  3822                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  3823                           ;	Data EEPROM Code Protection bit
  3824                           ;	CPD = OFF, Data EEPROM is not code-protected
  3825  300009                     	org	3145737
  3826  300009  C0                 	db	192
  3827                           
  3828                           ;Config register CONFIG6L @ 0x30000A
  3829                           ;	Write Protection bit
  3830                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  3831                           ;	Write Protection bit
  3832                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  3833                           ;	Write Protection bit
  3834                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  3835                           ;	Write Protection bit
  3836                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  3837  30000A                     	org	3145738
  3838  30000A  0F                 	db	15
  3839                           
  3840                           ;Config register CONFIG6H @ 0x30000B
  3841                           ;	Configuration Register Write Protection bit
  3842                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3843                           ;	Boot Block Write Protection bit
  3844                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  3845                           ;	Data EEPROM Write Protection bit
  3846                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3847  30000B                     	org	3145739
  3848  30000B  E0                 	db	224
  3849                           
  3850                           ;Config register CONFIG7L @ 0x30000C
  3851                           ;	Table Read Protection bit
  3852                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3853                           ;	Table Read Protection bit
  3854                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3855                           ;	Table Read Protection bit
  3856                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3857                           ;	Table Read Protection bit
  3858                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3859  30000C                     	org	3145740
  3860  30000C  0F                 	db	15
  3861                           
  3862                           ;Config register CONFIG7H @ 0x30000D
  3863                           ;	Boot Block Table Read Protection bit
  3864                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  3865  30000D                     	org	3145741
  3866  30000D  40                 	db	64
  3867                           tosu	equ	0xFFF
  3868                           tosh	equ	0xFFE
  3869                           tosl	equ	0xFFD
  3870                           stkptr	equ	0xFFC
  3871                           pclatu	equ	0xFFB
  3872                           pclath	equ	0xFFA
  3873                           pcl	equ	0xFF9
  3874                           tblptru	equ	0xFF8
  3875                           tblptrh	equ	0xFF7
  3876                           tblptrl	equ	0xFF6
  3877                           tablat	equ	0xFF5
  3878                           prodh	equ	0xFF4
  3879                           prodl	equ	0xFF3
  3880                           indf0	equ	0xFEF
  3881                           postinc0	equ	0xFEE
  3882                           postdec0	equ	0xFED
  3883                           preinc0	equ	0xFEC
  3884                           plusw0	equ	0xFEB
  3885                           fsr0h	equ	0xFEA
  3886                           fsr0l	equ	0xFE9
  3887                           wreg	equ	0xFE8
  3888                           indf1	equ	0xFE7
  3889                           postinc1	equ	0xFE6
  3890                           postdec1	equ	0xFE5
  3891                           preinc1	equ	0xFE4
  3892                           plusw1	equ	0xFE3
  3893                           fsr1h	equ	0xFE2
  3894                           fsr1l	equ	0xFE1
  3895                           bsr	equ	0xFE0
  3896                           indf2	equ	0xFDF
  3897                           postinc2	equ	0xFDE
  3898                           postdec2	equ	0xFDD
  3899                           preinc2	equ	0xFDC
  3900                           plusw2	equ	0xFDB
  3901                           fsr2h	equ	0xFDA
  3902                           fsr2l	equ	0xFD9
  3903                           status	equ	0xFD8

Data Sizes:
    Strings     28
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     10      68
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[8]), STR_2(CODE[8]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[8]), STR_2(CODE[8]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[8]), STR_2(CODE[8]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S841_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    Lcd_Out2@buffer	PTR char  size(2) Largest target is 16
		 -> buffer_lcd(BANK0[16]), 

    Lcd_Out@buffer	PTR const char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8687
                                             93 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                           _Lcd_Out2
                        _adcGetValue
                            _adcInit
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6608
                                             87 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              2     2      0      44
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _adcGetValue                                          4     2      2      22
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             7     4      3     837
                                              3 COMRAM     7     4      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              7     4      3     685
                                              3 COMRAM     7     4      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             3     3      0     315
                                              3 COMRAM     3     3      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   _adcGetValue
   _adcInit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A      44       5       42.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A3      20        0.0%
DATA                 0      0      A3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu May 27 00:14:41 2021

                     l20 1872                       l22 1880                       l23 1888  
                     l17 17C8                       l91 14EC                       l92 1538  
                     l93 158A                      l122 10EC                      l106 162E  
                    l125 1216                      l119 16CC                      l242 0E3A  
                    l255 0F9E                      l806 1780                      l905 180C  
                    l833 144C                      l914 18BE                      l908 18D6  
                    l836 148E                      l844 08BE                      l838 14CA  
                    l846 08C6                      l871 0CB2                      l864 0AFE  
                    l882 1844                      l885 184C                      l877 1726  
                    l878 172E                      l897 1404          adcInit@ADC_PINs 0002  
                    u610 134E                      u611 134A                      u700 0D46  
                    u620 1360                      u701 0D42                      u621 135C  
                    u710 0D70                      u630 1388                      u711 0D6C  
                    u631 1384                      u720 0DB0                      u640 13BE  
                    u800 1416                      u721 0DAC                      u641 13BA  
                    u801 1412                      u730 0DFA                      u650 180C  
                    u810 1438                      u731 0DF6                      u651 1808  
                    u811 1434                      u740 0E4E                      u660 18B2  
                    u820 148E                      u900 08E0                      u741 0E4A  
                    u661 18AE                      u821 148A                      u901 08DC  
                    u670 0CC6                      u750 0E80                      u830 149E  
                    u910 08EE                      u671 0CC2                      u751 0E7C  
                    u831 149A                      u911 08EA                      u680 0CF8  
                    u760 0EBE                      u840 1828                      u920 0A16  
                    u681 0CF4                      u761 0EBA                      u841 1824  
                    u921 0A12                      u770 0EE8                      u930 0A34  
                    u850 084E                      u691 0D22                      u771 0EE4  
                    u931 0A30                      u851 0848                      u780 0F16  
                    u940 0A4E                      u860 0850                      u781 0F12  
                    u941 0A4A                      u790 0F5E                      u950 0A68  
                    u870 0866                      u791 0F5A                      u951 0A64  
                    u871 0862                      u960 0A78                      u880 0896  
                    u961 0A74                      u881 0892                      u970 0A8A  
                    u890 08B2                      u971 0A86                      u891 08AE  
                    u980 0A9A                      u981 0A96                      u990 0AB2  
                    u991 0AAE                      _abs 180E                      _pad 1406  
                    wreg 000FE8                     ?_abs 0013                     l1500 0E6E  
                   l1420 134E                     l1510 0EC6                     l1502 0E72  
                   l1422 1360                     l1520 0F48                     l1512 0EDA  
                   l1504 0E80                     l1424 136A                     l1432 17CA  
                   l1440 188A                     l1600 0A78                     l1450 0CB4  
                   l1514 0EE8                     l1522 0F4E                     l1506 0EA0  
                   l1426 1388                     l1418 133C                     l1434 17D6  
                   l1442 1896                     l1530 1406                     l1610 0ABE  
                   l1602 0A8A                     l1700 10D4                     l1460 0CF8  
                   l1452 0CB8                     l1524 0F5E                     l1516 0F16  
                   l1508 0EBE                     l1428 13BE                     l1436 17E8  
                   l1444 189A                     l1540 1458                     l1532 1416  
                   l1612 0AC6                     l1604 0A9A                     l1620 0B24  
                   l1702 10D6                     l1470 0D4E                     l1462 0D18  
                   l1454 0CC6                     l1526 0F7E                     l1518 0F36  
                   l1438 17EC                     l1446 18B2                     l1542 146C  
                   l1534 142A                     l1606 0AA0                     l1614 0AD6  
                   l1630 0B90                     l1622 0B32                     l1710 16E4  
                   l1704 10DC                     l1800 15A6                     l1720 17B0  
                   l1480 0DD0                     l1472 0D62                     l1464 0D1C  
                   l1456 0CE6                     l1552 180E                     l1544 1470  
                   l1536 1438                     l1608 0AB2                     l1560 0866  
                   l1640 0C42                     l1632 0BD8                     l1624 0B44  
                   l1712 170A                     l1810 15FE                     l1802 15B0  
                   l1730 1850                     l1722 17B4                     l1714 1784  
                   l1490 0E1A                     l1482 0DD2                     l1474 0D70  
                   l1466 0D28                     l1458 0CEA                     l1554 1828  
                   l1546 149E                     l1538 1444                     l1570 08CE  
                   l1562 0886                     l1642 0C56                     l1626 0B48  
                   l1618 0B00                     l1706 16CE                     l1660 10F0  
                   l1740 14E8                     l1812 160E                     l1732 1862  
                   l1724 17BC                     l1716 1794                     l1484 0DE4  
                   l1476 0D82                     l1468 0D46                     l1548 14B2  
                   l1580 0904                     l1572 08E0                     l1564 0896  
                   l1556 081E                     l1636 0C10                     l1628 0B6C  
                   l1652 0C7C                     l1708 16D6                     l1820 1730  
                   l1670 1182                     l1662 10F4                     l1750 150C  
                   l1814 1612                     l1806 15BA                     l1734 1870  
                   l1726 17C4                     l1718 17A0                     l1478 0DB0  
                   l1486 0DEA                     l1494 0E3C                     l1582 090A  
                   l1590 09FC                     l1574 08EE                     l1566 0898  
                   l1558 083E                     l1654 0CA0                     l1638 0C34  
                   l1646 0C62                     l1822 1742                     l1680 1206  
                   l1672 11F4                     l1664 1172                     l1760 1526  
                   l1752 150E                     l1736 14CC                     l1808 15F4  
                   l1840 1654                     l1832 1632                     l1728 17C6  
                   l1488 0DFA                     l1496 0E40                     l1592 0A16  
                   l1584 098C                     l1576 08F4                     l1568 08B2  
                   l1648 0C70                     l1824 174A                     l1674 11FC  
                   l1666 117A                     l1770 155C                     l1762 1550  
                   l1754 1510                     l1746 1504                     l1738 14D8  
                   l1690 1040                     l1682 0FA2                     l1930 15CE  
                   l1850 16B0                     l1834 1636                     l1498 0E4E  
                   l1594 0A34                     l1586 0992                     l1578 08FC  
                   l1826 1752                     l1676 11FE                     l1668 117C  
                   l1780 1572                     l1772 155E                     l1764 1556  
                   l1756 1512                     l1748 150A                     l1692 1046  
                   l1684 0FA6                     l1852 16B4                     l1836 1640  
                   l1844 165E                     l1596 0A4E                     l1588 0998  
                   l1828 176E                     l1860 1228                     l1678 1204  
                   l1790 1584                     l1782 1578                     l1774 1560  
                   l1766 1558                     l1758 1514                     l1694 10C4  
                   l1686 1036                     l1838 164A                     l1846 1698  
                   l1598 0A68                     l1870 1286                     l1862 1240  
                   l1792 1584                     l1784 1578                     l1776 1572  
                   l1768 155A                     l1696 10CC                     l1688 103E  
                   l1848 16A2                     l1928 1672                     l1880 12E0  
                   l1872 128C                     l1864 1252                     l1786 157E  
                   l1778 1572                     l1698 10CE                     l1794 158E  
                   l1882 12EE                     l1874 129A                     l1866 1268  
                   l1858 1218                     l1788 157E                     l1796 1592  
                   l1884 130A                     l1876 12B6                     l1868 126E  
                   l1798 159C                     l1886 131C                     l1878 12C8  
                   ?_pad 0011                     STR_1 0801                     STR_2 080D  
                   STR_3 0815                     u1000 0B24                     u1001 0B20  
                   u1010 0B6C                     u1011 0B68                     u1020 0B90  
                   u1021 0B8C                     u1030 0C34                     u1031 0C30  
                   u1105 101C                     u1130 1726                     u1115 1050  
                   u1131 1722                     u1140 1794                     u1045 10FC  
                   u1125 1094                     u1141 1790                     u1150 1880  
                   u1055 1116                     u1151 187C                     u1207 125C  
                   u1160 1538                     u1065 113C                     u1161 1534  
                   u1217 1278                     u1170 162E                     u1307 10E2  
                   u1075 0FAE                     u1171 162A                     u1227 12D2  
                   u1180 16CC                     u1317 14DE                     u1085 0FD2  
                   u1181 16C8                     u1237 1326                     u1407 120C  
                   u1327 1506                     u1095 0FF8                     u1247 1868  
                   u1337 151C                     u1257 1038                     u1347 1552  
                   u1267 1042                     u1357 1568                     u1277 10C6  
                   u1197 1232                     u1367 1174                     u1287 10D0  
                   u1377 117E                     u1297 10D8                     u1387 11F6  
                   u1397 1200                     abs@a 0013                     _dbuf 006A  
                   _main 1218                     _dtoa 081E                     _prec 0064  
                   _nout 0060                     pad@i 0018                     pad@p 0015  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   start 0000          __end_of_Lcd_Cmd 1218          __end_of_Lcd_Out 1630  
           ___param_bank 000000               _Lcd_Chr_CP 0FA0                    ??_abs 0015  
                  ??_pad 0017           Lcd_Out2@buffer 0005          __end_of___aodiv 0E3C  
                  ?_main 0001                    ?_dtoa 001C          __end_of___aomod 0FA0  
        __end_of_adcInit 17CA                    _ADRES 000FC3             vfpfcnvrt@fmt 0042  
                  _PORTB 000F81                    _flags 0066                    _fputc 133C  
                  _fputs 17CA                    pad@fp 0011                    _width 0062  
                  _putch 18D6                    dtoa@d 001E                    dtoa@i 003E  
                  dtoa@n 0036                    dtoa@p 0030                    dtoa@s 0034  
                  dtoa@w 0032                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 1782         __end_of_Lcd_Init 158C         __end_of_Lcd_Out2 16CE  
        __initialization 18C0             __end_of_main 133C             __end_of_dtoa 0B00  
                 ??_main 005E                   ??_dtoa 0026            __activetblptr 000002  
                 ?_fputc 0001                   ?_fputs 000A                   ?_putch 0001  
              ??_Lcd_Cmd 0001                ??_Lcd_Out 0007             vfprintf@cfmt 0056  
            ?_Lcd_Chr_CP 0001                ??___aodiv 0011                ??___aomod 0011  
              ??_adcInit 0001                   _entero 0068                   clear_0 18C6  
                 pad@buf 0013                   dtoa@fp 001C                   _strlen 188A  
                 fputc@c 0001                   fputs@c 000E                   fputs@i 000F  
                 fputs@s 000A             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8        adcGetValue@PinADC 0004  
                 putch@c 0001         __end_of_vfprintf 1730                ??_sprintf 005E  
             __accesstop 0060  __end_of__initialization 18CC            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_fputc 1406            __end_of_fputs 180E  
          __end_of_putch 18D8            ??_adcGetValue 0003                ?_Lcd_Init 0001  
              ?_Lcd_Out2 0004                  ??_fputc 0005                  ??_fputs 000E  
    __size_of_Lcd_Chr_CP 014E                  ??_putch 0001               __pbssBANK0 0060  
                ?_strlen 0001               _buffer_lcd 008A       __size_of_vfpfcnvrt 01B4  
             ??_Lcd_Init 0004               ??_Lcd_Out2 0007      __end_of_adcGetValue 188A  
                _Lcd_Cmd 10EE                  _Lcd_Out 158C                  __Hparam 0000  
                __Lparam 0000                  ___aodiv 0CB4                  ___aomod 0E3C  
                _adcInit 1782                ?_vfprintf 0050             __psmallconst 0800  
                __pcinit 18C0                  __ramtop 0800                  __ptext0 1218  
                __ptext1 1730                  __ptext2 16CE                  __ptext3 0B00  
                __ptext4 081E                  __ptext5 1406                  __ptext6 188A  
                __ptext7 17CA                  __ptext8 133C                  __ptext9 18D6  
        __size_of_strlen 0036             __size_of_abs 0040             __size_of_pad 00C6  
                _sprintf 1730     end_of_initialization 18CC                  fputc@fp 0003  
          __Lmediumconst 0000                  fputs@fp 000C        __end_of_vfpfcnvrt 0CB4  
              Lcd_Init@i 0005             ??_Lcd_Chr_CP 0001                Lcd_Out2@x 0004  
              Lcd_Out2@y 0009                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 0056  
                strlen@a 0003                  strlen@s 0001                _PORTBbits 000F81  
            _adcGetValue 184E                _TRISDbits 000F95       __end_of_Lcd_Chr_CP 10EE  
            vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040              vfpfcnvrt@ll 0048  
         __end_of_strlen 18C0      start_initialization 18C0              __end_of_abs 184E  
            __end_of_pad 14CC            Lcd_Out@buffer 0005        __size_of_Lcd_Init 00C0  
      __size_of_Lcd_Out2 009E              vfprintf@fmt 0052                 ??_strlen 0003  
          __pcstackBANK0 009A         ___aodiv@dividend 0001                 ?_Lcd_Cmd 0001  
               ?_Lcd_Out 0004                 ?___aodiv 0001                 ?___aomod 0001  
               ?_adcInit 0001         ___aodiv@quotient 0013        __size_of_vfprintf 0062  
            __smallconst 0800                 ?_sprintf 0058           __size_of_fputc 00CA  
         __size_of_fputs 0044           __size_of_putch 0002                 _LATDbits 000F8C  
               _GO_nDONE 007E11                 Lcd_Out@x 0004                 Lcd_Out@y 0009  
              _vfpfcnvrt 0B00               _ADCON0bits 000FC2               _ADCON1bits 000FC1  
             _ADCON2bits 000FC0             ?_adcGetValue 0001             Lcd_Out2@data 000A  
               _Lcd_Init 14CC                 _Lcd_Out2 1630         __size_of_Lcd_Cmd 012A  
       __size_of_Lcd_Out 00A4                 __Hrparam 0000               vfprintf@ap 0054  
               __Lrparam 0000               vfprintf@fp 0050         __size_of___aodiv 0188  
       __size_of___aomod 0164         __size_of_adcInit 0048               ?_vfpfcnvrt 0040  
        ___aodiv@divisor 0009          ___aodiv@counter 0011               sprintf@fmt 005A  
         Lcd_Chr_CP@data 0003                 _dtoa$914 002E                 __ptext10 180E  
               __ptext11 0E3C                 __ptext12 0CB4                 __ptext13 1782  
               __ptext14 184E                 __ptext15 1630                 __ptext16 158C  
               __ptext17 0FA0                 __ptext18 14CC                 __ptext19 10EE  
       __size_of_sprintf 0052              Lcd_Cmd@data 0003            __size_of_main 0124  
          __size_of_dtoa 02E2                 _vfprintf 16CE         ___aomod@dividend 0001  
            Lcd_Out@data 000A                sprintf@ap 009C          ___aomod@divisor 0009  
            ??_vfpfcnvrt 0046          ___aomod@counter 0011                 sprintf@f 009E  
               sprintf@s 0058     __size_of_adcGetValue 003C             ___aodiv@sign 0012  
           ___aomod@sign 0012  
